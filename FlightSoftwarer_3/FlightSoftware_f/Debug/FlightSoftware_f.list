
FlightSoftware_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080082b0  080082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080082b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004208  24000078  0800832c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004280  0800832c  00024280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021535  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039b2  00000000  00000000  000415db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e8  00000000  00000000  00044f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001680  00000000  00000000  00046778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000558c  00000000  00000000  00047df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eae0  00000000  00000000  0004d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d1b8  00000000  00000000  0006be64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d901c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006874  00000000  00000000  001d906c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008190 	.word	0x08008190

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08008190 	.word	0x08008190

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ICM_sensor_create>:
 */

#include "ICM-42688.h"


ICM_data *ICM_sensor_create() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
    ICM_data *sensor = (ICM_data *)malloc(sizeof(ICM_data));
 80005ea:	2040      	movs	r0, #64	; 0x40
 80005ec:	f007 fc5a 	bl	8007ea4 <malloc>
 80005f0:	4603      	mov	r3, r0
 80005f2:	607b      	str	r3, [r7, #4]
    if (sensor) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <ICM_sensor_create+0x1c>
        sensor->collect_data = collect_data;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <ICM_sensor_create+0x28>)
 80005fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return sensor;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	0800068d 	.word	0x0800068d

08000610 <setup_ICM>:

void setup_ICM (I2C_HandleTypeDef* hi2c){
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af04      	add	r7, sp, #16
 8000616:	6078      	str	r0, [r7, #4]
		uint8_t gyro_set  = GYRO_SETTING;
 8000618:	2306      	movs	r3, #6
 800061a:	73fb      	strb	r3, [r7, #15]
		uint8_t accel_set = ACCEL_SETTING;
 800061c:	2306      	movs	r3, #6
 800061e:	73bb      	strb	r3, [r7, #14]
		uint8_t pwr_set   = PWR_SET_ICM;
 8000620:	231f      	movs	r3, #31
 8000622:	737b      	strb	r3, [r7, #13]


		HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR_ICM, ACCEL_CONFIG0, 1, &accel_set,1, 100);
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2301      	movs	r3, #1
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	f107 030e 	add.w	r3, r7, #14
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	2250      	movs	r2, #80	; 0x50
 8000636:	21d0      	movs	r1, #208	; 0xd0
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f001 f9d1 	bl	80019e0 <HAL_I2C_Mem_Write>
		HAL_Delay(250);
 800063e:	20fa      	movs	r0, #250	; 0xfa
 8000640:	f000 fe58 	bl	80012f4 <HAL_Delay>

		HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR_ICM, GYRO_CONFIG0, 1, &gyro_set,1, 100);
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	2301      	movs	r3, #1
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	f107 030f 	add.w	r3, r7, #15
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	224f      	movs	r2, #79	; 0x4f
 8000656:	21d0      	movs	r1, #208	; 0xd0
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f001 f9c1 	bl	80019e0 <HAL_I2C_Mem_Write>
		HAL_Delay(250);
 800065e:	20fa      	movs	r0, #250	; 0xfa
 8000660:	f000 fe48 	bl	80012f4 <HAL_Delay>

		HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR_ICM, PWR_MGMT0, 1, &pwr_set, 1, 100);
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	2301      	movs	r3, #1
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	f107 030d 	add.w	r3, r7, #13
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	224e      	movs	r2, #78	; 0x4e
 8000676:	21d0      	movs	r1, #208	; 0xd0
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f001 f9b1 	bl	80019e0 <HAL_I2C_Mem_Write>
		HAL_Delay(250);
 800067e:	20fa      	movs	r0, #250	; 0xfa
 8000680:	f000 fe38 	bl	80012f4 <HAL_Delay>

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <collect_data>:

void collect_data (struct ICM_data *sensor, I2C_HandleTypeDef* hi2c){
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af04      	add	r7, sp, #16
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]

	uint8_t temp_buffer[14];
	HAL_I2C_Mem_Read((I2C_HandleTypeDef*) hi2c, DEVICE_ADDR_ICM, DATA_START, 1, (uint8_t *)temp_buffer, sizeof(temp_buffer), 1000);
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	230e      	movs	r3, #14
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	221d      	movs	r2, #29
 80006aa:	21d0      	movs	r1, #208	; 0xd0
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f001 faab 	bl	8001c08 <HAL_I2C_Mem_Read>

	sensor->TEMP 	= ((temp_buffer[1] << 8)|(temp_buffer[0]));
 80006b2:	7a7b      	ldrb	r3, [r7, #9]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	7a3a      	ldrb	r2, [r7, #8]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	ee07 3a90 	vmov	s15, r3
 80006be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	sensor->ACCEL_X = ((temp_buffer[3] << 8)|(temp_buffer[2]));
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	7aba      	ldrb	r2, [r7, #10]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	ee07 3a90 	vmov	s15, r3
 80006d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	ed83 7b06 	vstr	d7, [r3, #24]
	sensor->ACCEL_Y = ((temp_buffer[5] << 8)|(temp_buffer[4]));
 80006de:	7b7b      	ldrb	r3, [r7, #13]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	7b3a      	ldrb	r2, [r7, #12]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	ed83 7b08 	vstr	d7, [r3, #32]
	sensor->ACCEL_Z = ((temp_buffer[7] << 8)|(temp_buffer[6]));
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	7bba      	ldrb	r2, [r7, #14]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	sensor->GYRO_X  = ((temp_buffer[9] << 8)|(temp_buffer[8]));
 800070a:	7c7b      	ldrb	r3, [r7, #17]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	7c3a      	ldrb	r2, [r7, #16]
 8000710:	4313      	orrs	r3, r2
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	ed83 7b00 	vstr	d7, [r3]
	sensor->GYRO_Y  = ((temp_buffer[11] << 8)|(temp_buffer[10]));
 8000720:	7cfb      	ldrb	r3, [r7, #19]
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	7cba      	ldrb	r2, [r7, #18]
 8000726:	4313      	orrs	r3, r2
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	ed83 7b02 	vstr	d7, [r3, #8]
	sensor->GYRO_Z  = ((temp_buffer[13] << 8)|(temp_buffer[12]));
 8000736:	7d7b      	ldrb	r3, [r7, #21]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	7d3a      	ldrb	r2, [r7, #20]
 800073c:	4313      	orrs	r3, r2
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	ed83 7b04 	vstr	d7, [r3, #16]


}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4a07      	ldr	r2, [pc, #28]	; (8000780 <vApplicationGetIdleTaskMemory+0x2c>)
 8000764:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <vApplicationGetIdleTaskMemory+0x30>)
 800076a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	24000094 	.word	0x24000094
 8000784:	24000148 	.word	0x24000148

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078e:	f000 fd55 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000792:	f000 f821 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 f971 	bl	8000a7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f923 	bl	80009e4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800079e:	f000 f8d5 	bl	800094c <MX_USART1_UART_Init>
  MX_I2C4_Init();
 80007a2:	f000 f893 	bl	80008cc <MX_I2C4_Init>
//  /* definition and creation of GZP_Thread */
//  osThreadDef(GZP_Thread, GZP_Entry, osPriorityIdle, 0, 128);
//  GZP_ThreadHandle = osThreadCreate(osThread(GZP_Thread), NULL);

  /* definition and creation of ICM_Thread */
  osThreadDef(ICM_Thread, ICM_Entry, osPriorityIdle, 0, 128);
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <main+0x48>)
 80007a8:	1d3c      	adds	r4, r7, #4
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ICM_ThreadHandle = osThreadCreate(osThread(ICM_Thread), NULL);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 f8ee 	bl	800699e <osThreadCreate>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <main+0x4c>)
 80007c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007c8:	f006 f8e2 	bl	8006990 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x44>
 80007ce:	bf00      	nop
 80007d0:	080081b4 	.word	0x080081b4
 80007d4:	240004c4 	.word	0x240004c4

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	224c      	movs	r2, #76	; 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 fb64 	bl	8007eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 fb5e 	bl	8007eb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f001 fe79 	bl	80024f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <SystemClock_Config+0xec>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <SystemClock_Config+0xec>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <SystemClock_Config+0xec>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <SystemClock_Config+0xf0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <SystemClock_Config+0xf0>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SystemClock_Config+0xf0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000830:	bf00      	nop
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <SystemClock_Config+0xf0>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800083e:	d1f8      	bne.n	8000832 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000844:	2301      	movs	r3, #1
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000858:	230a      	movs	r3, #10
 800085a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000868:	230c      	movs	r3, #12
 800086a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800086c:	2302      	movs	r3, #2
 800086e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fe73 	bl	8002564 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000884:	f000 fa2c 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	233f      	movs	r3, #63	; 0x3f
 800088a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2303      	movs	r3, #3
 800088e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 fab3 	bl	8002e18 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008b8:	f000 fa12 	bl	8000ce0 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3770      	adds	r7, #112	; 0x70
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	58000400 	.word	0x58000400
 80008c8:	58024800 	.word	0x58024800

080008cc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_I2C4_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_I2C4_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_I2C4_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_I2C4_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_I2C4_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_I2C4_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_I2C4_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_I2C4_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C4_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C4_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C4_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_I2C4_Init+0x74>)
 8000908:	f000 ffce 	bl	80018a8 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 f9e5 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_I2C4_Init+0x74>)
 800091a:	f001 fd51 	bl	80023c0 <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 f9dc 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_I2C4_Init+0x74>)
 800092c:	f001 fd93 	bl	8002456 <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 f9d3 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24000348 	.word	0x24000348
 8000944:	58001c00 	.word	0x58001c00
 8000948:	00702991 	.word	0x00702991

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART1_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000996:	f004 ff07 	bl	80057a8 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f99e 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009a8:	f005 ff0f 	bl	80067ca <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f995 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ba:	f005 ff44 	bl	8006846 <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f98c 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ca:	f005 fec5 	bl	8006758 <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f984 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2400039c 	.word	0x2400039c
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_USART3_UART_Init+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f004 febb 	bl	80057a8 <HAL_UART_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 f952 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a40:	f005 fec3 	bl	80067ca <HAL_UARTEx_SetTxFifoThreshold>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 f949 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a52:	f005 fef8 	bl	8006846 <HAL_UARTEx_SetRxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 f940 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a62:	f005 fe79 	bl	8006758 <HAL_UARTEx_DisableFifoMode>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 f938 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24000430 	.word	0x24000430
 8000a78:	40004800 	.word	0x40004800

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b78      	ldr	r3, [pc, #480]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a76      	ldr	r2, [pc, #472]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b74      	ldr	r3, [pc, #464]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab0:	4b70      	ldr	r3, [pc, #448]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a6f      	ldr	r2, [pc, #444]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b6c      	ldr	r3, [pc, #432]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b69      	ldr	r3, [pc, #420]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a67      	ldr	r2, [pc, #412]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b65      	ldr	r3, [pc, #404]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a60      	ldr	r2, [pc, #384]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b5d      	ldr	r3, [pc, #372]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4b5a      	ldr	r3, [pc, #360]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a58      	ldr	r2, [pc, #352]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b56      	ldr	r3, [pc, #344]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b28:	4b52      	ldr	r3, [pc, #328]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a51      	ldr	r2, [pc, #324]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <MX_GPIO_Init+0x1f8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	484b      	ldr	r0, [pc, #300]	; (8000c78 <MX_GPIO_Init+0x1fc>)
 8000b4c:	f000 fe92 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	4849      	ldr	r0, [pc, #292]	; (8000c7c <MX_GPIO_Init+0x200>)
 8000b56:	f000 fe8d 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4843      	ldr	r0, [pc, #268]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b72:	f000 fccf 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b76:	2332      	movs	r3, #50	; 0x32
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483b      	ldr	r0, [pc, #236]	; (8000c80 <MX_GPIO_Init+0x204>)
 8000b92:	f000 fcbf 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b96:	2386      	movs	r3, #134	; 0x86
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4834      	ldr	r0, [pc, #208]	; (8000c84 <MX_GPIO_Init+0x208>)
 8000bb2:	f000 fcaf 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc8:	230b      	movs	r3, #11
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	482a      	ldr	r0, [pc, #168]	; (8000c7c <MX_GPIO_Init+0x200>)
 8000bd4:	f000 fc9e 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bd8:	2340      	movs	r3, #64	; 0x40
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4822      	ldr	r0, [pc, #136]	; (8000c78 <MX_GPIO_Init+0x1fc>)
 8000bf0:	f000 fc90 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_GPIO_Init+0x1fc>)
 8000c08:	f000 fc84 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c0c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <MX_GPIO_Init+0x208>)
 8000c2a:	f000 fc73 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_GPIO_Init+0x1fc>)
 8000c4c:	f000 fc62 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_GPIO_Init+0x200>)
 8000c68:	f000 fc54 	bl	8001514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58021800 	.word	0x58021800
 8000c7c:	58020400 	.word	0x58020400
 8000c80:	58020800 	.word	0x58020800
 8000c84:	58020000 	.word	0x58020000

08000c88 <ICM_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ICM_Entry */
void ICM_Entry(void const * argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ICM_Entry */
  /* Infinite loop */
	ICM_data *icm_sensor = ICM_sensor_create();
 8000c90:	f7ff fca8 	bl	80005e4 <ICM_sensor_create>
 8000c94:	6178      	str	r0, [r7, #20]
	setup_ICM(&hi2c4);
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <ICM_Entry+0x30>)
 8000c98:	f7ff fcba 	bl	8000610 <setup_ICM>

  for(;;)
  {
	icm_sensor->collect_data((ICM_data *)icm_sensor,  &hi2c4);
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca0:	4905      	ldr	r1, [pc, #20]	; (8000cb8 <ICM_Entry+0x30>)
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	4798      	blx	r3
	double gyro_x = icm_sensor->GYRO_Y;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cac:	e9c7 2302 	strd	r2, r3, [r7, #8]
    osDelay(10);
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f005 fec0 	bl	8006a36 <osDelay>
  {
 8000cb6:	e7f1      	b.n	8000c9c <ICM_Entry+0x14>
 8000cb8:	24000348 	.word	0x24000348

08000cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cce:	f000 faf1 	bl	80012b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x38>)
 8000cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_MspInit+0x38>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_MspInit+0x38>)
 8000d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	210f      	movs	r1, #15
 8000d14:	f06f 0001 	mvn.w	r0, #1
 8000d18:	f000 fbd4 	bl	80014c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	58024400 	.word	0x58024400

08000d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	; 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22c0      	movs	r2, #192	; 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f007 f8b3 	bl	8007eb4 <memset>
  if(hi2c->Instance==I2C4)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a27      	ldr	r2, [pc, #156]	; (8000df0 <HAL_I2C_MspInit+0xc8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d146      	bne.n	8000de6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d58:	f04f 0210 	mov.w	r2, #16
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fc20 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000d7a:	f7ff ffb1 	bl	8000ce0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_I2C_MspInit+0xcc>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_I2C_MspInit+0xcc>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_I2C_MspInit+0xcc>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000db6:	2304      	movs	r3, #4
 8000db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_I2C_MspInit+0xd0>)
 8000dc4:	f000 fba6 	bl	8001514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_I2C_MspInit+0xcc>)
 8000dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_I2C_MspInit+0xcc>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_I2C_MspInit+0xcc>)
 8000dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	37e8      	adds	r7, #232	; 0xe8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	58001c00 	.word	0x58001c00
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020c00 	.word	0x58020c00

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0bc      	sub	sp, #240	; 0xf0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	22c0      	movs	r2, #192	; 0xc0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f007 f849 	bl	8007eb4 <memset>
  if(huart->Instance==USART1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <HAL_UART_MspInit+0x160>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d147      	bne.n	8000ebc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e2c:	f04f 0201 	mov.w	r2, #1
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fbb6 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e4e:	f7ff ff47 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e58:	4a41      	ldr	r2, [pc, #260]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e62:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a3a      	ldr	r2, [pc, #232]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	482b      	ldr	r0, [pc, #172]	; (8000f64 <HAL_UART_MspInit+0x168>)
 8000eb6:	f000 fb2d 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eba:	e04b      	b.n	8000f54 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <HAL_UART_MspInit+0x16c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d146      	bne.n	8000f54 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec6:	f04f 0202 	mov.w	r2, #2
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fb69 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000ee8:	f7ff fefa 	bl	8000ce0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x164>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f42:	2307      	movs	r3, #7
 8000f44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x168>)
 8000f50:	f000 fae0 	bl	8001514 <HAL_GPIO_Init>
}
 8000f54:	bf00      	nop
 8000f56:	37f0      	adds	r7, #240	; 0xf0
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58020400 	.word	0x58020400
 8000f68:	40004800 	.word	0x40004800

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	d842      	bhi.n	8001000 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	2019      	movs	r0, #25
 8000f80:	f000 faa0 	bl	80014c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f84:	2019      	movs	r0, #25
 8000f86:	f000 fab7 	bl	80014f8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <HAL_InitTick+0xac>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_InitTick+0xb0>)
 8000f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <HAL_InitTick+0xb0>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_InitTick+0xb0>)
 8000fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fae:	f107 020c 	add.w	r2, r7, #12
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fab9 	bl	8003530 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fbe:	f002 faa1 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8000fc2:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	4a16      	ldr	r2, [pc, #88]	; (8001020 <HAL_InitTick+0xb4>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_InitTick+0xb8>)
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <HAL_InitTick+0xbc>)
 8000fd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0xb8>)
 8000fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fde:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fe0:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_InitTick+0xb8>)
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_InitTick+0xb8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_InitTick+0xb8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <HAL_InitTick+0xb8>)
 8000ff4:	f004 f90a 	bl	800520c <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d107      	bne.n	800100e <HAL_InitTick+0xa2>
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e005      	b.n	8001010 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <HAL_InitTick+0xb8>)
 8001006:	f004 f963 	bl	80052d0 <HAL_TIM_Base_Start_IT>
 800100a:	4603      	mov	r3, r0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3738      	adds	r7, #56	; 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	24000008 	.word	0x24000008
 800101c:	58024400 	.word	0x58024400
 8001020:	431bde83 	.word	0x431bde83
 8001024:	240004c8 	.word	0x240004c8
 8001028:	40010000 	.word	0x40010000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM1_UP_IRQHandler+0x10>)
 800105e:	f004 f9af 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	240004c8 	.word	0x240004c8

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f006 fed6 	bl	8007e4c <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24080000 	.word	0x24080000
 80010cc:	00000400 	.word	0x00000400
 80010d0:	24000514 	.word	0x24000514
 80010d4:	24004280 	.word	0x24004280

080010d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <SystemInit+0xe4>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a36      	ldr	r2, [pc, #216]	; (80011bc <SystemInit+0xe4>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <SystemInit+0xe8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d807      	bhi.n	8001108 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <SystemInit+0xe8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <SystemInit+0xe8>)
 8001102:	f043 0307 	orr.w	r3, r3, #7
 8001106:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <SystemInit+0xec>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <SystemInit+0xec>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <SystemInit+0xec>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <SystemInit+0xec>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4929      	ldr	r1, [pc, #164]	; (80011c4 <SystemInit+0xec>)
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <SystemInit+0xf0>)
 8001122:	4013      	ands	r3, r2
 8001124:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <SystemInit+0xe8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <SystemInit+0xe8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 030f 	bic.w	r3, r3, #15
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <SystemInit+0xe8>)
 800113c:	f043 0307 	orr.w	r3, r3, #7
 8001140:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <SystemInit+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <SystemInit+0xec>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <SystemInit+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <SystemInit+0xec>)
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <SystemInit+0xf4>)
 8001158:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <SystemInit+0xec>)
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <SystemInit+0xf8>)
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <SystemInit+0xec>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <SystemInit+0xfc>)
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <SystemInit+0xec>)
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <SystemInit+0xec>)
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <SystemInit+0xfc>)
 8001170:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <SystemInit+0xec>)
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <SystemInit+0xec>)
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <SystemInit+0xfc>)
 800117c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <SystemInit+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <SystemInit+0xec>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <SystemInit+0xec>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <SystemInit+0xec>)
 8001192:	2200      	movs	r2, #0
 8001194:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <SystemInit+0x100>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <SystemInit+0x104>)
 800119c:	4013      	ands	r3, r2
 800119e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011a2:	d202      	bcs.n	80011aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <SystemInit+0x108>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <SystemInit+0x10c>)
 80011ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	52002000 	.word	0x52002000
 80011c4:	58024400 	.word	0x58024400
 80011c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011cc:	02020200 	.word	0x02020200
 80011d0:	01ff0000 	.word	0x01ff0000
 80011d4:	01010280 	.word	0x01010280
 80011d8:	5c001000 	.word	0x5c001000
 80011dc:	ffff0000 	.word	0xffff0000
 80011e0:	51008108 	.word	0x51008108
 80011e4:	52004000 	.word	0x52004000

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ec:	f7ff ff74 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f006 fe1f 	bl	8007e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff fab5 	bl	8000788 <main>
  bx  lr
 800121e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001224:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001228:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800122c:	080082b4 	.word	0x080082b4
  ldr r2, =_sbss
 8001230:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001234:	24004280 	.word	0x24004280

08001238 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC3_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001242:	2003      	movs	r0, #3
 8001244:	f000 f933 	bl	80014ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001248:	f001 ff9c 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 800124c:	4602      	mov	r2, r0
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_Init+0x68>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	4913      	ldr	r1, [pc, #76]	; (80012a8 <HAL_Init+0x6c>)
 800125a:	5ccb      	ldrb	r3, [r1, r3]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_Init+0x68>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_Init+0x6c>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_Init+0x70>)
 800127e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_Init+0x74>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001286:	200f      	movs	r0, #15
 8001288:	f7ff fe70 	bl	8000f6c <HAL_InitTick>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e002      	b.n	800129c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001296:	f7ff fd29 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	0800820c 	.word	0x0800820c
 80012ac:	24000004 	.word	0x24000004
 80012b0:	24000000 	.word	0x24000000

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2400000c 	.word	0x2400000c
 80012d8:	24000518 	.word	0x24000518

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	24000518 	.word	0x24000518

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff ffee 	bl	80012dc <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	d005      	beq.n	800131a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_Delay+0x44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131a:	bf00      	nop
 800131c:	f7ff ffde 	bl	80012dc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <HAL_Delay+0x28>
  {
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2400000c 	.word	0x2400000c

0800133c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetREVID+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0c1b      	lsrs	r3, r3, #16
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	5c001000 	.word	0x5c001000

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	4313      	orrs	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	05fa0000 	.word	0x05fa0000

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff4c 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d2:	f7ff ff63 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	6978      	ldr	r0, [r7, #20]
 80014de:	f7ff ffb3 	bl	8001448 <NVIC_EncodePriority>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff82 	bl	80013f4 <__NVIC_SetPriority>
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff56 	bl	80013b8 <__NVIC_EnableIRQ>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_GPIO_Init+0x234>)
 8001524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001526:	e194      	b.n	8001852 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8186 	beq.w	800184c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d005      	beq.n	8001558 <HAL_GPIO_Init+0x44>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d130      	bne.n	80015ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800158e:	2201      	movs	r2, #1
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 0201 	and.w	r2, r3, #1
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d017      	beq.n	80015f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d123      	bne.n	800164a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3208      	adds	r2, #8
 800160a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	08da      	lsrs	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3208      	adds	r2, #8
 8001644:	69b9      	ldr	r1, [r7, #24]
 8001646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0203 	and.w	r2, r3, #3
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80e0 	beq.w	800184c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168c:	4b2f      	ldr	r3, [pc, #188]	; (800174c <HAL_GPIO_Init+0x238>)
 800168e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001692:	4a2e      	ldr	r2, [pc, #184]	; (800174c <HAL_GPIO_Init+0x238>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_GPIO_Init+0x238>)
 800169e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <HAL_GPIO_Init+0x23c>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a20      	ldr	r2, [pc, #128]	; (8001754 <HAL_GPIO_Init+0x240>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d052      	beq.n	800177c <HAL_GPIO_Init+0x268>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_GPIO_Init+0x244>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d031      	beq.n	8001742 <HAL_GPIO_Init+0x22e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_GPIO_Init+0x248>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d02b      	beq.n	800173e <HAL_GPIO_Init+0x22a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_GPIO_Init+0x24c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d025      	beq.n	800173a <HAL_GPIO_Init+0x226>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <HAL_GPIO_Init+0x250>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <HAL_GPIO_Init+0x222>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_GPIO_Init+0x254>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_Init+0x21e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_GPIO_Init+0x258>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x21a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <HAL_GPIO_Init+0x25c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x216>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_GPIO_Init+0x260>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x212>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_GPIO_Init+0x264>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x20e>
 800171e:	2309      	movs	r3, #9
 8001720:	e02d      	b.n	800177e <HAL_GPIO_Init+0x26a>
 8001722:	230a      	movs	r3, #10
 8001724:	e02b      	b.n	800177e <HAL_GPIO_Init+0x26a>
 8001726:	2308      	movs	r3, #8
 8001728:	e029      	b.n	800177e <HAL_GPIO_Init+0x26a>
 800172a:	2307      	movs	r3, #7
 800172c:	e027      	b.n	800177e <HAL_GPIO_Init+0x26a>
 800172e:	2306      	movs	r3, #6
 8001730:	e025      	b.n	800177e <HAL_GPIO_Init+0x26a>
 8001732:	2305      	movs	r3, #5
 8001734:	e023      	b.n	800177e <HAL_GPIO_Init+0x26a>
 8001736:	2304      	movs	r3, #4
 8001738:	e021      	b.n	800177e <HAL_GPIO_Init+0x26a>
 800173a:	2303      	movs	r3, #3
 800173c:	e01f      	b.n	800177e <HAL_GPIO_Init+0x26a>
 800173e:	2302      	movs	r3, #2
 8001740:	e01d      	b.n	800177e <HAL_GPIO_Init+0x26a>
 8001742:	2301      	movs	r3, #1
 8001744:	e01b      	b.n	800177e <HAL_GPIO_Init+0x26a>
 8001746:	bf00      	nop
 8001748:	58000080 	.word	0x58000080
 800174c:	58024400 	.word	0x58024400
 8001750:	58000400 	.word	0x58000400
 8001754:	58020000 	.word	0x58020000
 8001758:	58020400 	.word	0x58020400
 800175c:	58020800 	.word	0x58020800
 8001760:	58020c00 	.word	0x58020c00
 8001764:	58021000 	.word	0x58021000
 8001768:	58021400 	.word	0x58021400
 800176c:	58021800 	.word	0x58021800
 8001770:	58021c00 	.word	0x58021c00
 8001774:	58022000 	.word	0x58022000
 8001778:	58022400 	.word	0x58022400
 800177c:	2300      	movs	r3, #0
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	f002 0203 	and.w	r2, r2, #3
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	4093      	lsls	r3, r2
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800178e:	4938      	ldr	r1, [pc, #224]	; (8001870 <HAL_GPIO_Init+0x35c>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	3301      	adds	r3, #1
 8001850:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	f47f ae63 	bne.w	8001528 <HAL_GPIO_Init+0x14>
  }
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3724      	adds	r7, #36	; 0x24
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	58000400 	.word	0x58000400

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e08b      	b.n	80019d2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fa2a 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2224      	movs	r2, #36	; 0x24
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	e006      	b.n	8001930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800192e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d108      	bne.n	800194a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	e007      	b.n	800195a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_I2C_Init+0x134>)
 8001966:	430b      	orrs	r3, r1
 8001968:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001978:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69d9      	ldr	r1, [r3, #28]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1a      	ldr	r2, [r3, #32]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	02008000 	.word	0x02008000

080019e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	817b      	strh	r3, [r7, #10]
 80019f2:	460b      	mov	r3, r1
 80019f4:	813b      	strh	r3, [r7, #8]
 80019f6:	4613      	mov	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	f040 80f9 	bne.w	8001bfa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_I2C_Mem_Write+0x34>
 8001a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0ed      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_I2C_Mem_Write+0x4e>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e0e6      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a36:	f7ff fc51 	bl	80012dc <HAL_GetTick>
 8001a3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2319      	movs	r3, #25
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 fac3 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d1      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2221      	movs	r2, #33	; 0x21
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2240      	movs	r2, #64	; 0x40
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a3a      	ldr	r2, [r7, #32]
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a80:	88f8      	ldrh	r0, [r7, #6]
 8001a82:	893a      	ldrh	r2, [r7, #8]
 8001a84:	8979      	ldrh	r1, [r7, #10]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4603      	mov	r3, r0
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f9d3 	bl	8001e3c <I2C_RequestMemoryWrite>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0a9      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d90e      	bls.n	8001ad0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	8979      	ldrh	r1, [r7, #10]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 fc47 	bl	800235c <I2C_TransferConfig>
 8001ace:	e00f      	b.n	8001af0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	8979      	ldrh	r1, [r7, #10]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fc36 	bl	800235c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fac6 	bl	8002086 <I2C_WaitOnTXISFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e07b      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d034      	beq.n	8001ba8 <HAL_I2C_Mem_Write+0x1c8>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d130      	bne.n	8001ba8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 fa3f 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e04d      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2bff      	cmp	r3, #255	; 0xff
 8001b68:	d90e      	bls.n	8001b88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	22ff      	movs	r2, #255	; 0xff
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	8979      	ldrh	r1, [r7, #10]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fbeb 	bl	800235c <I2C_TransferConfig>
 8001b86:	e00f      	b.n	8001ba8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fbda 	bl	800235c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d19e      	bne.n	8001af0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 faac 	bl	8002114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e01a      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_I2C_Mem_Write+0x224>)
 8001bda:	400b      	ands	r3, r1
 8001bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
  }
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	fe00e800 	.word	0xfe00e800

08001c08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	817b      	strh	r3, [r7, #10]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	813b      	strh	r3, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	f040 80fd 	bne.w	8001e2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_I2C_Mem_Read+0x34>
 8001c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0f1      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_Mem_Read+0x4e>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0ea      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c5e:	f7ff fb3d 	bl	80012dc <HAL_GetTick>
 8001c62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2319      	movs	r3, #25
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f9af 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0d5      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2222      	movs	r2, #34	; 0x22
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a3a      	ldr	r2, [r7, #32]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ca8:	88f8      	ldrh	r0, [r7, #6]
 8001caa:	893a      	ldrh	r2, [r7, #8]
 8001cac:	8979      	ldrh	r1, [r7, #10]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f913 	bl	8001ee4 <I2C_RequestMemoryRead>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0ad      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d90e      	bls.n	8001cf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	8979      	ldrh	r1, [r7, #10]
 8001ce8:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <HAL_I2C_Mem_Read+0x22c>)
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fb33 	bl	800235c <I2C_TransferConfig>
 8001cf6:	e00f      	b.n	8001d18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_I2C_Mem_Read+0x22c>)
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fb22 	bl	800235c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2104      	movs	r1, #4
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f956 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07c      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d034      	beq.n	8001dd8 <HAL_I2C_Mem_Read+0x1d0>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d130      	bne.n	8001dd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f927 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e04d      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2bff      	cmp	r3, #255	; 0xff
 8001d98:	d90e      	bls.n	8001db8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	8979      	ldrh	r1, [r7, #10]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fad3 	bl	800235c <I2C_TransferConfig>
 8001db6:	e00f      	b.n	8001dd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	8979      	ldrh	r1, [r7, #10]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fac2 	bl	800235c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d19a      	bne.n	8001d18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f994 	bl	8002114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e01a      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_I2C_Mem_Read+0x230>)
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
  }
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	80002400 	.word	0x80002400
 8001e38:	fe00e800 	.word	0xfe00e800

08001e3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	4608      	mov	r0, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	817b      	strh	r3, [r7, #10]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	813b      	strh	r3, [r7, #8]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	8979      	ldrh	r1, [r7, #10]
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <I2C_RequestMemoryWrite+0xa4>)
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fa79 	bl	800235c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	69b9      	ldr	r1, [r7, #24]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f909 	bl	8002086 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e02c      	b.n	8001ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e84:	893b      	ldrh	r3, [r7, #8]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e8e:	e015      	b.n	8001ebc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e90:	893b      	ldrh	r3, [r7, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	69b9      	ldr	r1, [r7, #24]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f8ef 	bl	8002086 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e012      	b.n	8001ed8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f884 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	80002000 	.word	0x80002000

08001ee4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	813b      	strh	r3, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	8979      	ldrh	r1, [r7, #10]
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <I2C_RequestMemoryRead+0xa4>)
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fa26 	bl	800235c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f8b6 	bl	8002086 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e02c      	b.n	8001f7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f2a:	893b      	ldrh	r3, [r7, #8]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
 8001f34:	e015      	b.n	8001f62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f36:	893b      	ldrh	r3, [r7, #8]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f89c 	bl	8002086 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e012      	b.n	8001f7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f58:	893b      	ldrh	r3, [r7, #8]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2140      	movs	r1, #64	; 0x40
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f831 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	80002000 	.word	0x80002000

08001f8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d103      	bne.n	8001faa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d007      	beq.n	8001fc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	619a      	str	r2, [r3, #24]
  }
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe4:	e03b      	b.n	800205e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f8d6 	bl	800219c <I2C_IsErrorOccurred>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e041      	b.n	800207e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d02d      	beq.n	800205e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002002:	f7ff f96b 	bl	80012dc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d302      	bcc.n	8002018 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d122      	bne.n	800205e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	429a      	cmp	r2, r3
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	429a      	cmp	r2, r3
 8002034:	d113      	bne.n	800205e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	429a      	cmp	r2, r3
 800207a:	d0b4      	beq.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002092:	e033      	b.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f87f 	bl	800219c <I2C_IsErrorOccurred>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e031      	b.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d025      	beq.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b0:	f7ff f914 	bl	80012dc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d302      	bcc.n	80020c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d11a      	bne.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d013      	beq.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e007      	b.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d1c4      	bne.n	8002094 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002120:	e02f      	b.n	8002182 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f838 	bl	800219c <I2C_IsErrorOccurred>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e02d      	b.n	8002192 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002136:	f7ff f8d1 	bl	80012dc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11a      	bne.n	8002182 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b20      	cmp	r3, #32
 8002158:	d013      	beq.n	8002182 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e007      	b.n	8002192 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b20      	cmp	r3, #32
 800218e:	d1c8      	bne.n	8002122 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d068      	beq.n	800229a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2210      	movs	r2, #16
 80021ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021d0:	e049      	b.n	8002266 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d045      	beq.n	8002266 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7ff f87f 	bl	80012dc <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <I2C_IsErrorOccurred+0x54>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d13a      	bne.n	8002266 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002202:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002212:	d121      	bne.n	8002258 <I2C_IsErrorOccurred+0xbc>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800221a:	d01d      	beq.n	8002258 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b20      	cmp	r3, #32
 8002220:	d01a      	beq.n	8002258 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002230:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002232:	f7ff f853 	bl	80012dc <HAL_GetTick>
 8002236:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002238:	e00e      	b.n	8002258 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800223a:	f7ff f84f 	bl	80012dc <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b19      	cmp	r3, #25
 8002246:	d907      	bls.n	8002258 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f043 0320 	orr.w	r3, r3, #32
 800224e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002256:	e006      	b.n	8002266 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b20      	cmp	r3, #32
 8002264:	d1e9      	bne.n	800223a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b20      	cmp	r3, #32
 8002272:	d003      	beq.n	800227c <I2C_IsErrorOccurred+0xe0>
 8002274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0aa      	beq.n	80021d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800227c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2220      	movs	r2, #32
 800228a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00b      	beq.n	80022c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff fe3b 	bl	8001f8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <I2C_IsErrorOccurred+0x1bc>)
 8002322:	400b      	ands	r3, r1
 8002324:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	431a      	orrs	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800234a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800234e:	4618      	mov	r0, r3
 8002350:	3728      	adds	r7, #40	; 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	fe00e800 	.word	0xfe00e800

0800235c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	817b      	strh	r3, [r7, #10]
 800236a:	4613      	mov	r3, r2
 800236c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800236e:	897b      	ldrh	r3, [r7, #10]
 8002370:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002374:	7a7b      	ldrb	r3, [r7, #9]
 8002376:	041b      	lsls	r3, r3, #16
 8002378:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800237c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	4313      	orrs	r3, r2
 8002386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800238a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	0d5b      	lsrs	r3, r3, #21
 8002396:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <I2C_TransferConfig+0x60>)
 800239c:	430b      	orrs	r3, r1
 800239e:	43db      	mvns	r3, r3
 80023a0:	ea02 0103 	and.w	r1, r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	03ff63ff 	.word	0x03ff63ff

080023c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d138      	bne.n	8002448 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e032      	b.n	800244a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002412:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	d139      	bne.n	80024e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002476:	2302      	movs	r3, #2
 8002478:	e033      	b.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2224      	movs	r2, #36	; 0x24
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_PWREx_ConfigSupply+0x70>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d00a      	beq.n	800251a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_PWREx_ConfigSupply+0x70>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e01f      	b.n	8002556 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e01d      	b.n	8002556 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_PWREx_ConfigSupply+0x70>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	490f      	ldr	r1, [pc, #60]	; (8002560 <HAL_PWREx_ConfigSupply+0x70>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4313      	orrs	r3, r2
 8002528:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800252a:	f7fe fed7 	bl	80012dc <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002530:	e009      	b.n	8002546 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002532:	f7fe fed3 	bl	80012dc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002540:	d901      	bls.n	8002546 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e007      	b.n	8002556 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_PWREx_ConfigSupply+0x70>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002552:	d1ee      	bne.n	8002532 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	58024800 	.word	0x58024800

08002564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f000 bc48 	b.w	8002e08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8088 	beq.w	8002696 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	4b99      	ldr	r3, [pc, #612]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002590:	4b96      	ldr	r3, [pc, #600]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	2b10      	cmp	r3, #16
 800259a:	d007      	beq.n	80025ac <HAL_RCC_OscConfig+0x48>
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	2b18      	cmp	r3, #24
 80025a0:	d111      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62>
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d06d      	beq.n	8002694 <HAL_RCC_OscConfig+0x130>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d169      	bne.n	8002694 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f000 bc21 	b.w	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x7a>
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a85      	ldr	r2, [pc, #532]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e02e      	b.n	800263c <HAL_RCC_OscConfig+0xd8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x9c>
 80025e6:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a80      	ldr	r2, [pc, #512]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a7d      	ldr	r2, [pc, #500]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80025f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xd8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0xc0>
 800260a:	4b78      	ldr	r3, [pc, #480]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a77      	ldr	r2, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b75      	ldr	r3, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a74      	ldr	r2, [pc, #464]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xd8>
 8002624:	4b71      	ldr	r3, [pc, #452]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a70      	ldr	r2, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6d      	ldr	r2, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fe4a 	bl	80012dc <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fe46 	bl	80012dc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e3d4      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xe8>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fe36 	bl	80012dc <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fe32 	bl	80012dc <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e3c0      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002686:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x110>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80ca 	beq.w	8002838 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ae:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0x166>
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b18      	cmp	r3, #24
 80026be:	d156      	bne.n	800276e <HAL_RCC_OscConfig+0x20a>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d151      	bne.n	800276e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ca:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e392      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0219 	bic.w	r2, r3, #25
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	493f      	ldr	r1, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fdf2 	bl	80012dc <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fdee 	bl	80012dc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e37c      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	f7fe fe0f 	bl	800133c <HAL_GetREVID>
 800271e:	4603      	mov	r3, r0
 8002720:	f241 0203 	movw	r2, #4099	; 0x1003
 8002724:	4293      	cmp	r3, r2
 8002726:	d817      	bhi.n	8002758 <HAL_RCC_OscConfig+0x1f4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d108      	bne.n	8002742 <HAL_RCC_OscConfig+0x1de>
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002738:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	e07a      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	031b      	lsls	r3, r3, #12
 8002750:	4926      	ldr	r1, [pc, #152]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002756:	e06f      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	4921      	ldr	r1, [pc, #132]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276c:	e064      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d047      	beq.n	8002806 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0219 	bic.w	r2, r3, #25
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	491a      	ldr	r1, [pc, #104]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fda8 	bl	80012dc <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe fda4 	bl	80012dc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e332      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	f7fe fdc5 	bl	800133c <HAL_GetREVID>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d819      	bhi.n	80027f0 <HAL_RCC_OscConfig+0x28c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d108      	bne.n	80027d6 <HAL_RCC_OscConfig+0x272>
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d2:	6053      	str	r3, [r2, #4]
 80027d4:	e030      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	031b      	lsls	r3, r3, #12
 80027e4:	4901      	ldr	r1, [pc, #4]	; (80027ec <HAL_RCC_OscConfig+0x288>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e025      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
 80027ec:	58024400 	.word	0x58024400
 80027f0:	4b9a      	ldr	r3, [pc, #616]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	4997      	ldr	r1, [pc, #604]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	e018      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002806:	4b95      	ldr	r3, [pc, #596]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a94      	ldr	r2, [pc, #592]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fd63 	bl	80012dc <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281a:	f7fe fd5f 	bl	80012dc <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e2ed      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800282c:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a9 	beq.w	8002998 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002846:	4b85      	ldr	r3, [pc, #532]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002850:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d007      	beq.n	800286c <HAL_RCC_OscConfig+0x308>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b18      	cmp	r3, #24
 8002860:	d13a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x374>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d135      	bne.n	80028d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800286c:	4b7b      	ldr	r3, [pc, #492]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_OscConfig+0x320>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e2c1      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002884:	f7fe fd5a 	bl	800133c <HAL_GetREVID>
 8002888:	4603      	mov	r3, r0
 800288a:	f241 0203 	movw	r2, #4099	; 0x1003
 800288e:	4293      	cmp	r3, r2
 8002890:	d817      	bhi.n	80028c2 <HAL_RCC_OscConfig+0x35e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b20      	cmp	r3, #32
 8002898:	d108      	bne.n	80028ac <HAL_RCC_OscConfig+0x348>
 800289a:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028a2:	4a6e      	ldr	r2, [pc, #440]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028aa:	e075      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ac:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	069b      	lsls	r3, r3, #26
 80028ba:	4968      	ldr	r1, [pc, #416]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c0:	e06a      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c2:	4b66      	ldr	r3, [pc, #408]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	4962      	ldr	r1, [pc, #392]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d6:	e05f      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d042      	beq.n	8002966 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028e0:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fcf6 	bl	80012dc <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028f4:	f7fe fcf2 	bl	80012dc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e280      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002906:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002912:	f7fe fd13 	bl	800133c <HAL_GetREVID>
 8002916:	4603      	mov	r3, r0
 8002918:	f241 0203 	movw	r2, #4099	; 0x1003
 800291c:	4293      	cmp	r3, r2
 800291e:	d817      	bhi.n	8002950 <HAL_RCC_OscConfig+0x3ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	2b20      	cmp	r3, #32
 8002926:	d108      	bne.n	800293a <HAL_RCC_OscConfig+0x3d6>
 8002928:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002930:	4a4a      	ldr	r2, [pc, #296]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002936:	6053      	str	r3, [r2, #4]
 8002938:	e02e      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
 800293a:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	069b      	lsls	r3, r3, #26
 8002948:	4944      	ldr	r1, [pc, #272]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
 800294e:	e023      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	493f      	ldr	r1, [pc, #252]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e018      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3c      	ldr	r2, [pc, #240]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800296c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fcb3 	bl	80012dc <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800297a:	f7fe fcaf 	bl	80012dc <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e23d      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d036      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d019      	beq.n	80029e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fc90 	bl	80012dc <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe fc8c 	bl	80012dc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e21a      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x45c>
 80029de:	e018      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe fc76 	bl	80012dc <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fe fc72 	bl	80012dc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e200      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d039      	beq.n	8002a92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fc53 	bl	80012dc <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3a:	f7fe fc4f 	bl	80012dc <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1dd      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4d6>
 8002a58:	e01b      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
 8002a5a:	bf00      	nop
 8002a5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a60:	4b9b      	ldr	r3, [pc, #620]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a9a      	ldr	r2, [pc, #616]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fc36 	bl	80012dc <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a74:	f7fe fc32 	bl	80012dc <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1c0      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a86:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8081 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002aa0:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <HAL_RCC_OscConfig+0x770>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a8b      	ldr	r2, [pc, #556]	; (8002cd4 <HAL_RCC_OscConfig+0x770>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aac:	f7fe fc16 	bl	80012dc <HAL_GetTick>
 8002ab0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fc12 	bl	80012dc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1a0      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac6:	4b83      	ldr	r3, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x770>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x584>
 8002ada:	4b7d      	ldr	r3, [pc, #500]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a7c      	ldr	r2, [pc, #496]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e02d      	b.n	8002b44 <HAL_RCC_OscConfig+0x5e0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5a6>
 8002af0:	4b77      	ldr	r3, [pc, #476]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a76      	ldr	r2, [pc, #472]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a73      	ldr	r2, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x5e0>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x5c8>
 8002b12:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a6b      	ldr	r2, [pc, #428]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x5e0>
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a67      	ldr	r2, [pc, #412]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a64      	ldr	r2, [pc, #400]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fbc6 	bl	80012dc <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fe fbc2 	bl	80012dc <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e14e      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6a:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ee      	beq.n	8002b54 <HAL_RCC_OscConfig+0x5f0>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fbb0 	bl	80012dc <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fbac 	bl	80012dc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e138      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b96:	4b4e      	ldr	r3, [pc, #312]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 812d 	beq.w	8002e06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bac:	4b48      	ldr	r3, [pc, #288]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bb4:	2b18      	cmp	r3, #24
 8002bb6:	f000 80bd 	beq.w	8002d34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	f040 809e 	bne.w	8002d00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a41      	ldr	r2, [pc, #260]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fb84 	bl	80012dc <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fb80 	bl	80012dc <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e10e      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_OscConfig+0x774>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	4931      	ldr	r1, [pc, #196]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	628b      	str	r3, [r1, #40]	; 0x28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	3b01      	subs	r3, #1
 8002c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	025b      	lsls	r3, r3, #9
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	061b      	lsls	r3, r3, #24
 8002c3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c40:	4923      	ldr	r1, [pc, #140]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCC_OscConfig+0x778>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c5e:	00d2      	lsls	r2, r2, #3
 8002c60:	491b      	ldr	r1, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f023 020c 	bic.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4917      	ldr	r1, [pc, #92]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f023 0202 	bic.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	4912      	ldr	r1, [pc, #72]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fb09 	bl	80012dc <HAL_GetTick>
 8002cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ccc:	e011      	b.n	8002cf2 <HAL_RCC_OscConfig+0x78e>
 8002cce:	bf00      	nop
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	58024800 	.word	0x58024800
 8002cd8:	fffffc0c 	.word	0xfffffc0c
 8002cdc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe fafc 	bl	80012dc <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e08a      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x77c>
 8002cfe:	e082      	b.n	8002e06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a42      	ldr	r2, [pc, #264]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fae6 	bl	80012dc <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fae2 	bl	80012dc <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e070      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x7b0>
 8002d32:	e068      	b.n	8002e06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d031      	beq.n	8002dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d12a      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d122      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d11a      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0a5b      	lsrs	r3, r3, #9
 8002d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d111      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	0c1b      	lsrs	r3, r3, #16
 8002d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0e1b      	lsrs	r3, r3, #24
 8002d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e02b      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d01f      	beq.n	8002e06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd2:	f7fe fa83 	bl	80012dc <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002dd8:	bf00      	nop
 8002dda:	f7fe fa7f 	bl	80012dc <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d0f9      	beq.n	8002dda <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_OscConfig+0x8b0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df2:	00d2      	lsls	r2, r2, #3
 8002df4:	4906      	ldr	r1, [pc, #24]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3730      	adds	r7, #48	; 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58024400 	.word	0x58024400
 8002e14:	ffff0007 	.word	0xffff0007

08002e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e19c      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d910      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b87      	ldr	r3, [pc, #540]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4985      	ldr	r1, [pc, #532]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e184      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b7b      	ldr	r3, [pc, #492]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d908      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e78:	4b78      	ldr	r3, [pc, #480]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4975      	ldr	r1, [pc, #468]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b70      	ldr	r3, [pc, #448]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d908      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	496a      	ldr	r1, [pc, #424]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	495e      	ldr	r1, [pc, #376]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d908      	bls.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4953      	ldr	r1, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d908      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f023 020f 	bic.w	r2, r3, #15
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4947      	ldr	r1, [pc, #284]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d055      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4940      	ldr	r1, [pc, #256]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f68:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0f6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0ea      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0de      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f023 0207 	bic.w	r2, r3, #7
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4925      	ldr	r1, [pc, #148]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fca:	f7fe f987 	bl	80012dc <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fe f983 	bl	80012dc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0be      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d1eb      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	429a      	cmp	r2, r3
 8003014:	d208      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f023 020f 	bic.w	r2, r3, #15
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	490e      	ldr	r1, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8003024:	4313      	orrs	r3, r2
 8003026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d214      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 020f 	bic.w	r2, r3, #15
 800303e:	4906      	ldr	r1, [pc, #24]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e086      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
 8003058:	52002000 	.word	0x52002000
 800305c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003078:	429a      	cmp	r2, r3
 800307a:	d208      	bcs.n	800308e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800307c:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4939      	ldr	r1, [pc, #228]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 800308a:	4313      	orrs	r3, r2
 800308c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d208      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	492e      	ldr	r1, [pc, #184]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d208      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4922      	ldr	r1, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d208      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003114:	4313      	orrs	r3, r2
 8003116:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003118:	f000 f834 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	4912      	ldr	r1, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x35c>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <HAL_RCC_ClockConfig+0x35c>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x360>)
 800314e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x364>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_ClockConfig+0x368>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd ff06 	bl	8000f6c <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400
 8003174:	0800820c 	.word	0x0800820c
 8003178:	24000004 	.word	0x24000004
 800317c:	24000000 	.word	0x24000000
 8003180:	24000008 	.word	0x24000008

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318a:	4bb3      	ldr	r3, [pc, #716]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003192:	2b18      	cmp	r3, #24
 8003194:	f200 8155 	bhi.w	8003442 <HAL_RCC_GetSysClockFreq+0x2be>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	08003205 	.word	0x08003205
 80031a4:	08003443 	.word	0x08003443
 80031a8:	08003443 	.word	0x08003443
 80031ac:	08003443 	.word	0x08003443
 80031b0:	08003443 	.word	0x08003443
 80031b4:	08003443 	.word	0x08003443
 80031b8:	08003443 	.word	0x08003443
 80031bc:	08003443 	.word	0x08003443
 80031c0:	0800322b 	.word	0x0800322b
 80031c4:	08003443 	.word	0x08003443
 80031c8:	08003443 	.word	0x08003443
 80031cc:	08003443 	.word	0x08003443
 80031d0:	08003443 	.word	0x08003443
 80031d4:	08003443 	.word	0x08003443
 80031d8:	08003443 	.word	0x08003443
 80031dc:	08003443 	.word	0x08003443
 80031e0:	08003231 	.word	0x08003231
 80031e4:	08003443 	.word	0x08003443
 80031e8:	08003443 	.word	0x08003443
 80031ec:	08003443 	.word	0x08003443
 80031f0:	08003443 	.word	0x08003443
 80031f4:	08003443 	.word	0x08003443
 80031f8:	08003443 	.word	0x08003443
 80031fc:	08003443 	.word	0x08003443
 8003200:	08003237 	.word	0x08003237
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003204:	4b94      	ldr	r3, [pc, #592]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003210:	4b91      	ldr	r3, [pc, #580]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	4a90      	ldr	r2, [pc, #576]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003222:	e111      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003224:	4b8d      	ldr	r3, [pc, #564]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003226:	61bb      	str	r3, [r7, #24]
      break;
 8003228:	e10e      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800322a:	4b8d      	ldr	r3, [pc, #564]	; (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800322c:	61bb      	str	r3, [r7, #24]
      break;
 800322e:	e10b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003230:	4b8c      	ldr	r3, [pc, #560]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003232:	61bb      	str	r3, [r7, #24]
      break;
 8003234:	e108      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003236:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003240:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800324c:	4b82      	ldr	r3, [pc, #520]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003256:	4b80      	ldr	r3, [pc, #512]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80e1 	beq.w	800343c <HAL_RCC_GetSysClockFreq+0x2b8>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b02      	cmp	r3, #2
 800327e:	f000 8083 	beq.w	8003388 <HAL_RCC_GetSysClockFreq+0x204>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	f200 80a1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x248>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x114>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d056      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003296:	e099      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003298:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d02d      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	08db      	lsrs	r3, r3, #3
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	4a6b      	ldr	r2, [pc, #428]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032fe:	e087      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800346c <HAL_RCC_GetSysClockFreq+0x2e8>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003342:	e065      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003386:	e043      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ca:	e021      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800340e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	0a5b      	lsrs	r3, r3, #9
 8003416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800341a:	3301      	adds	r3, #1
 800341c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003428:	edd7 6a07 	vldr	s13, [r7, #28]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003434:	ee17 3a90 	vmov	r3, s15
 8003438:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800343a:	e005      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
      break;
 8003440:	e002      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003444:	61bb      	str	r3, [r7, #24]
      break;
 8003446:	bf00      	nop
  }

  return sysclockfreq;
 8003448:	69bb      	ldr	r3, [r7, #24]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	58024400 	.word	0x58024400
 800345c:	03d09000 	.word	0x03d09000
 8003460:	003d0900 	.word	0x003d0900
 8003464:	007a1200 	.word	0x007a1200
 8003468:	46000000 	.word	0x46000000
 800346c:	4c742400 	.word	0x4c742400
 8003470:	4a742400 	.word	0x4a742400
 8003474:	4af42400 	.word	0x4af42400

08003478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800347e:	f7ff fe81 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	490f      	ldr	r1, [pc, #60]	; (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003490:	5ccb      	ldrb	r3, [r1, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034b6:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	58024400 	.word	0x58024400
 80034cc:	0800820c 	.word	0x0800820c
 80034d0:	24000004 	.word	0x24000004
 80034d4:	24000000 	.word	0x24000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034dc:	f7ff ffcc 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58024400 	.word	0x58024400
 8003500:	0800820c 	.word	0x0800820c

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003508:	f7ff ffb6 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4904      	ldr	r1, [pc, #16]	; (800352c <HAL_RCC_GetPCLK2Freq+0x28>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024400 	.word	0x58024400
 800352c:	0800820c 	.word	0x0800820c

08003530 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	223f      	movs	r2, #63	; 0x3f
 800353e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_GetClockConfig+0x7c>)
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0207 	and.w	r2, r3, #7
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_RCC_GetClockConfig+0x7c>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <HAL_RCC_GetClockConfig+0x7c>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_RCC_GetClockConfig+0x7c>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_RCC_GetClockConfig+0x7c>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetClockConfig+0x7c>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCC_GetClockConfig+0x7c>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_GetClockConfig+0x80>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	58024400 	.word	0x58024400
 80035b0:	52002000 	.word	0x52002000

080035b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b0ca      	sub	sp, #296	; 0x128
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80035d8:	2500      	movs	r5, #0
 80035da:	ea54 0305 	orrs.w	r3, r4, r5
 80035de:	d049      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ea:	d02f      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035f0:	d828      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f6:	d01a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fc:	d822      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003606:	d007      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003608:	e01c      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360a:	4bb8      	ldr	r3, [pc, #736]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4ab7      	ldr	r2, [pc, #732]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003616:	e01a      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800361c:	3308      	adds	r3, #8
 800361e:	2102      	movs	r1, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fc8f 	bl	8004f44 <RCCEx_PLL2_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800362c:	e00f      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003632:	3328      	adds	r3, #40	; 0x28
 8003634:	2102      	movs	r1, #2
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fd36 	bl	80050a8 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003642:	e004      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800364c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003656:	4ba5      	ldr	r3, [pc, #660]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003664:	4aa1      	ldr	r2, [pc, #644]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003666:	430b      	orrs	r3, r1
 8003668:	6513      	str	r3, [r2, #80]	; 0x50
 800366a:	e003      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003680:	f04f 0900 	mov.w	r9, #0
 8003684:	ea58 0309 	orrs.w	r3, r8, r9
 8003688:	d047      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	2b04      	cmp	r3, #4
 8003692:	d82a      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036b1 	.word	0x080036b1
 80036a0:	080036bf 	.word	0x080036bf
 80036a4:	080036d5 	.word	0x080036d5
 80036a8:	080036f3 	.word	0x080036f3
 80036ac:	080036f3 	.word	0x080036f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b8e      	ldr	r3, [pc, #568]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a8d      	ldr	r2, [pc, #564]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036bc:	e01a      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c2:	3308      	adds	r3, #8
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fc3c 	bl	8004f44 <RCCEx_PLL2_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d2:	e00f      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d8:	3328      	adds	r3, #40	; 0x28
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fce3 	bl	80050a8 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e8:	e004      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036fc:	4b7b      	ldr	r3, [pc, #492]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	f023 0107 	bic.w	r1, r3, #7
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	4a78      	ldr	r2, [pc, #480]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800370c:	430b      	orrs	r3, r1
 800370e:	6513      	str	r3, [r2, #80]	; 0x50
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003726:	f04f 0b00 	mov.w	fp, #0
 800372a:	ea5a 030b 	orrs.w	r3, sl, fp
 800372e:	d04c      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373a:	d030      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800373c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003740:	d829      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003742:	2bc0      	cmp	r3, #192	; 0xc0
 8003744:	d02d      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003746:	2bc0      	cmp	r3, #192	; 0xc0
 8003748:	d825      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d018      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d821      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d007      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800375a:	e01c      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800375c:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	4a62      	ldr	r2, [pc, #392]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003768:	e01c      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	3308      	adds	r3, #8
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fbe6 	bl	8004f44 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003784:	3328      	adds	r3, #40	; 0x28
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f001 fc8d 	bl	80050a8 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003794:	e006      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037ac:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	4a4c      	ldr	r2, [pc, #304]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	6513      	str	r3, [r2, #80]	; 0x50
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80037e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80037e4:	460b      	mov	r3, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	d053      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f6:	d035      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fc:	d82e      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003802:	d031      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003804:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003808:	d828      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800380a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380e:	d01a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003814:	d822      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800381a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381e:	d007      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003820:	e01c      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003822:	4b32      	ldr	r3, [pc, #200]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4a31      	ldr	r2, [pc, #196]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800382e:	e01c      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003834:	3308      	adds	r3, #8
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f001 fb83 	bl	8004f44 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003844:	e011      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	3328      	adds	r3, #40	; 0x28
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fc2a 	bl	80050a8 <RCCEx_PLL3_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385a:	e006      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003862:	e002      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003872:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6593      	str	r3, [r2, #88]	; 0x58
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800388e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800389e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d056      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038be:	d038      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c4:	d831      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038ca:	d034      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038d0:	d82b      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038d6:	d01d      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038dc:	d825      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038e8:	e01f      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ea:	bf00      	nop
 80038ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4ba2      	ldr	r3, [pc, #648]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4aa1      	ldr	r2, [pc, #644]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038fc:	e01c      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	3308      	adds	r3, #8
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fb1c 	bl	8004f44 <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003912:	e011      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003918:	3328      	adds	r3, #40	; 0x28
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f001 fbc3 	bl	80050a8 <RCCEx_PLL3_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003928:	e006      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003930:	e002      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003940:	4b8e      	ldr	r3, [pc, #568]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003950:	4a8a      	ldr	r2, [pc, #552]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003952:	430b      	orrs	r3, r1
 8003954:	6593      	str	r3, [r2, #88]	; 0x58
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800395c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800396c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003976:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d03a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	2b30      	cmp	r3, #48	; 0x30
 8003988:	d01f      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800398a:	2b30      	cmp	r3, #48	; 0x30
 800398c:	d819      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800398e:	2b20      	cmp	r3, #32
 8003990:	d00c      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003992:	2b20      	cmp	r3, #32
 8003994:	d815      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d019      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800399a:	2b10      	cmp	r3, #16
 800399c:	d111      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399e:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4a76      	ldr	r2, [pc, #472]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039aa:	e011      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b0:	3308      	adds	r3, #8
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fac5 	bl	8004f44 <RCCEx_PLL2_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039c0:	e006      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039c8:	e002      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003a02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4313      	orrs	r3, r2
 8003a14:	d051      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a20:	d035      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a26:	d82e      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a2c:	d031      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a32:	d828      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d01a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3e:	d822      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	d007      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a4a:	e01c      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4c:	4b4b      	ldr	r3, [pc, #300]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4a4a      	ldr	r2, [pc, #296]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a58:	e01c      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5e:	3308      	adds	r3, #8
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fa6e 	bl	8004f44 <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a6e:	e011      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a74:	3328      	adds	r3, #40	; 0x28
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fb15 	bl	80050a8 <RCCEx_PLL3_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a84:	e006      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a8c:	e002      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a9c:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	4a34      	ldr	r2, [pc, #208]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6513      	str	r3, [r2, #80]	; 0x50
 8003ab0:	e003      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ad0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	d056      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae4:	d033      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aea:	d82c      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af0:	d02f      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003af2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af6:	d826      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003af8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003afc:	d02b      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003afe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b02:	d820      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b08:	d012      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b0e:	d81a      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d022      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d115      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1e:	3308      	adds	r3, #8
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 fa0e 	bl	8004f44 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b2e:	e015      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b34:	3328      	adds	r3, #40	; 0x28
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fab5 	bl	80050a8 <RCCEx_PLL3_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b44:	e00a      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b4c:	e006      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e004      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b52:	bf00      	nop
 8003b54:	e002      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10d      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b72:	4a02      	ldr	r2, [pc, #8]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6513      	str	r3, [r2, #80]	; 0x50
 8003b78:	e006      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b7a:	bf00      	nop
 8003b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b9e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	d055      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb4:	d033      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bba:	d82c      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d02f      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d826      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bcc:	d02b      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bd2:	d820      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd8:	d012      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bde:	d81a      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d022      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be8:	d115      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	3308      	adds	r3, #8
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f9a6 	bl	8004f44 <RCCEx_PLL2_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bfe:	e015      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c04:	3328      	adds	r3, #40	; 0x28
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 fa4d 	bl	80050a8 <RCCEx_PLL3_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c14:	e00a      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c1e:	bf00      	nop
 8003c20:	e004      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c34:	4ba3      	ldr	r3, [pc, #652]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c44:	4a9f      	ldr	r2, [pc, #636]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4a:	e003      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d037      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c7e:	d00e      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c84:	d816      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d018      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c8e:	d111      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4b8c      	ldr	r3, [pc, #560]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a8b      	ldr	r2, [pc, #556]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c9c:	e00f      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f94c 	bl	8004f44 <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cb2:	e004      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cc6:	4b7f      	ldr	r3, [pc, #508]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a7b      	ldr	r2, [pc, #492]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6513      	str	r3, [r2, #80]	; 0x50
 8003cda:	e003      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003cfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d039      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d81c      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d51 	.word	0x08003d51
 8003d18:	08003d25 	.word	0x08003d25
 8003d1c:	08003d33 	.word	0x08003d33
 8003d20:	08003d51 	.word	0x08003d51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d24:	4b67      	ldr	r3, [pc, #412]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a66      	ldr	r2, [pc, #408]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d30:	e00f      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d36:	3308      	adds	r3, #8
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 f902 	bl	8004f44 <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d46:	e004      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d5a:	4b5a      	ldr	r3, [pc, #360]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5e:	f023 0103 	bic.w	r1, r3, #3
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d68:	4a56      	ldr	r2, [pc, #344]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f000 809f 	beq.w	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da6:	f7fd fa99 	bl	80012dc <HAL_GetTick>
 8003daa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fd fa94 	bl	80012dc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d903      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dc6:	e005      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ed      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d179      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ddc:	4b39      	ldr	r3, [pc, #228]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de8:	4053      	eors	r3, r2
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d015      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df2:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e16:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2a:	d118      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd fa56 	bl	80012dc <HAL_GetTick>
 8003e30:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e34:	e00d      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fd fa51 	bl	80012dc <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e40:	1ad2      	subs	r2, r2, r3
 8003e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d903      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e52:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0eb      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d129      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e76:	d10e      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e88:	091a      	lsrs	r2, r3, #4
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6113      	str	r3, [r2, #16]
 8003e94:	e005      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ea0:	6113      	str	r3, [r2, #16]
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	e00e      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	58024800 	.word	0x58024800
 8003ecc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f002 0301 	and.w	r3, r2, #1
 8003ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f000 8089 	beq.w	800400c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f00:	2b28      	cmp	r3, #40	; 0x28
 8003f02:	d86b      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f04:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003fe5 	.word	0x08003fe5
 8003f10:	08003fdd 	.word	0x08003fdd
 8003f14:	08003fdd 	.word	0x08003fdd
 8003f18:	08003fdd 	.word	0x08003fdd
 8003f1c:	08003fdd 	.word	0x08003fdd
 8003f20:	08003fdd 	.word	0x08003fdd
 8003f24:	08003fdd 	.word	0x08003fdd
 8003f28:	08003fdd 	.word	0x08003fdd
 8003f2c:	08003fb1 	.word	0x08003fb1
 8003f30:	08003fdd 	.word	0x08003fdd
 8003f34:	08003fdd 	.word	0x08003fdd
 8003f38:	08003fdd 	.word	0x08003fdd
 8003f3c:	08003fdd 	.word	0x08003fdd
 8003f40:	08003fdd 	.word	0x08003fdd
 8003f44:	08003fdd 	.word	0x08003fdd
 8003f48:	08003fdd 	.word	0x08003fdd
 8003f4c:	08003fc7 	.word	0x08003fc7
 8003f50:	08003fdd 	.word	0x08003fdd
 8003f54:	08003fdd 	.word	0x08003fdd
 8003f58:	08003fdd 	.word	0x08003fdd
 8003f5c:	08003fdd 	.word	0x08003fdd
 8003f60:	08003fdd 	.word	0x08003fdd
 8003f64:	08003fdd 	.word	0x08003fdd
 8003f68:	08003fdd 	.word	0x08003fdd
 8003f6c:	08003fe5 	.word	0x08003fe5
 8003f70:	08003fdd 	.word	0x08003fdd
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	08003fdd 	.word	0x08003fdd
 8003f7c:	08003fdd 	.word	0x08003fdd
 8003f80:	08003fdd 	.word	0x08003fdd
 8003f84:	08003fdd 	.word	0x08003fdd
 8003f88:	08003fdd 	.word	0x08003fdd
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003fdd 	.word	0x08003fdd
 8003f94:	08003fdd 	.word	0x08003fdd
 8003f98:	08003fdd 	.word	0x08003fdd
 8003f9c:	08003fdd 	.word	0x08003fdd
 8003fa0:	08003fdd 	.word	0x08003fdd
 8003fa4:	08003fdd 	.word	0x08003fdd
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	08003fe5 	.word	0x08003fe5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 ffc3 	bl	8004f44 <RCCEx_PLL2_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fc4:	e00f      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fca:	3328      	adds	r3, #40	; 0x28
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f86a 	bl	80050a8 <RCCEx_PLL3_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fda:	e004      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fee:	4bbf      	ldr	r3, [pc, #764]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffc:	4abb      	ldr	r2, [pc, #748]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6553      	str	r3, [r2, #84]	; 0x54
 8004002:	e003      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f002 0302 	and.w	r3, r2, #2
 8004018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004022:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004026:	460b      	mov	r3, r1
 8004028:	4313      	orrs	r3, r2
 800402a:	d041      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004032:	2b05      	cmp	r3, #5
 8004034:	d824      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	08004089 	.word	0x08004089
 8004040:	08004055 	.word	0x08004055
 8004044:	0800406b 	.word	0x0800406b
 8004048:	08004089 	.word	0x08004089
 800404c:	08004089 	.word	0x08004089
 8004050:	08004089 	.word	0x08004089
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004058:	3308      	adds	r3, #8
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f000 ff71 	bl	8004f44 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004068:	e00f      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	3328      	adds	r3, #40	; 0x28
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f001 f818 	bl	80050a8 <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800407e:	e004      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004092:	4b96      	ldr	r3, [pc, #600]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f023 0107 	bic.w	r1, r3, #7
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a0:	4a92      	ldr	r2, [pc, #584]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6553      	str	r3, [r2, #84]	; 0x54
 80040a6:	e003      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f002 0304 	and.w	r3, r2, #4
 80040bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4313      	orrs	r3, r2
 80040ce:	d044      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d825      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004131 	.word	0x08004131
 80040e8:	080040fd 	.word	0x080040fd
 80040ec:	08004113 	.word	0x08004113
 80040f0:	08004131 	.word	0x08004131
 80040f4:	08004131 	.word	0x08004131
 80040f8:	08004131 	.word	0x08004131
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004100:	3308      	adds	r3, #8
 8004102:	2101      	movs	r1, #1
 8004104:	4618      	mov	r0, r3
 8004106:	f000 ff1d 	bl	8004f44 <RCCEx_PLL2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004116:	3328      	adds	r3, #40	; 0x28
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f000 ffc4 	bl	80050a8 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004126:	e004      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413a:	4b6c      	ldr	r3, [pc, #432]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	f023 0107 	bic.w	r1, r3, #7
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	4a68      	ldr	r2, [pc, #416]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6593      	str	r3, [r2, #88]	; 0x58
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f002 0320 	and.w	r3, r2, #32
 8004166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d055      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004186:	d033      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800418c:	d82c      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d02f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d826      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800419a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800419e:	d02b      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a4:	d820      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041aa:	d012      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d81a      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d022      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ba:	d115      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c0:	3308      	adds	r3, #8
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 febd 	bl	8004f44 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041d0:	e015      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d6:	3328      	adds	r3, #40	; 0x28
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff64 	bl	80050a8 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041e6:	e00a      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ee:	e006      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f0:	bf00      	nop
 80041f2:	e004      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f4:	bf00      	nop
 80041f6:	e002      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	4a35      	ldr	r2, [pc, #212]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004218:	430b      	orrs	r3, r1
 800421a:	6553      	str	r3, [r2, #84]	; 0x54
 800421c:	e003      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800423c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d058      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004252:	d033      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004258:	d82c      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d02f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004264:	d826      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426a:	d02b      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800426c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004270:	d820      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d012      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427c:	d81a      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d022      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d115      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	3308      	adds	r3, #8
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fe57 	bl	8004f44 <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800429c:	e015      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a2:	3328      	adds	r3, #40	; 0x28
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fefe 	bl	80050a8 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042b2:	e00a      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ba:	e006      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042bc:	bf00      	nop
 80042be:	e004      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c0:	bf00      	nop
 80042c2:	e002      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10e      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042e2:	4a02      	ldr	r2, [pc, #8]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6593      	str	r3, [r2, #88]	; 0x58
 80042e8:	e006      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042ea:	bf00      	nop
 80042ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800430e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d055      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004320:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004324:	d033      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004326:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800432a:	d82c      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	d02f      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004336:	d826      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004338:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800433c:	d02b      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800433e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004342:	d820      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004348:	d012      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800434a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800434e:	d81a      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d022      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d115      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	3308      	adds	r3, #8
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fdee 	bl	8004f44 <RCCEx_PLL2_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800436e:	e015      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004374:	3328      	adds	r3, #40	; 0x28
 8004376:	2102      	movs	r1, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fe95 	bl	80050a8 <RCCEx_PLL3_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004384:	e00a      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800438c:	e006      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800438e:	bf00      	nop
 8004390:	e004      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800439a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043a4:	4ba1      	ldr	r3, [pc, #644]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043b4:	4a9d      	ldr	r2, [pc, #628]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ba:	e003      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f002 0308 	and.w	r3, r2, #8
 80043d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043de:	460b      	mov	r3, r1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d01e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f6:	3328      	adds	r3, #40	; 0x28
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fe54 	bl	80050a8 <RCCEx_PLL3_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800440c:	4b87      	ldr	r3, [pc, #540]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441c:	4a83      	ldr	r2, [pc, #524]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f002 0310 	and.w	r3, r2, #16
 800442e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004432:	2300      	movs	r3, #0
 8004434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004438:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d01e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d10c      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	3328      	adds	r3, #40	; 0x28
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fe25 	bl	80050a8 <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446a:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447a:	4a6c      	ldr	r2, [pc, #432]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800447c:	430b      	orrs	r3, r1
 800447e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800448c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004496:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d03e      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ac:	d022      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b2:	d81b      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044be:	e015      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c4:	3308      	adds	r3, #8
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fd3b 	bl	8004f44 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	3328      	adds	r3, #40	; 0x28
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fde2 	bl	80050a8 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044fe:	4b4b      	ldr	r3, [pc, #300]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800450e:	4a47      	ldr	r2, [pc, #284]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6593      	str	r3, [r2, #88]	; 0x58
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800452a:	67bb      	str	r3, [r7, #120]	; 0x78
 800452c:	2300      	movs	r3, #0
 800452e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004530:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d03b      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004546:	d01f      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004548:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800454c:	d818      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004558:	d007      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800455a:	e011      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455c:	4b33      	ldr	r3, [pc, #204]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	4a32      	ldr	r2, [pc, #200]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004568:	e00f      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456e:	3328      	adds	r3, #40	; 0x28
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd98 	bl	80050a8 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800457e:	e004      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	4a22      	ldr	r2, [pc, #136]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6553      	str	r3, [r2, #84]	; 0x54
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045be:	673b      	str	r3, [r7, #112]	; 0x70
 80045c0:	2300      	movs	r3, #0
 80045c2:	677b      	str	r3, [r7, #116]	; 0x74
 80045c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d034      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d007      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4a11      	ldr	r2, [pc, #68]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045ec:	e00e      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f2:	3308      	adds	r3, #8
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fca4 	bl	8004f44 <RCCEx_PLL2_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800460a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	4a02      	ldr	r2, [pc, #8]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004624:	430b      	orrs	r3, r1
 8004626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800462a:	bf00      	nop
 800462c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004644:	66bb      	str	r3, [r7, #104]	; 0x68
 8004646:	2300      	movs	r3, #0
 8004648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d00c      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004658:	3328      	adds	r3, #40	; 0x28
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fd23 	bl	80050a8 <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800467a:	663b      	str	r3, [r7, #96]	; 0x60
 800467c:	2300      	movs	r3, #0
 800467e:	667b      	str	r3, [r7, #100]	; 0x64
 8004680:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d038      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004696:	d018      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469c:	d811      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800469e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a2:	d014      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d80b      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b2:	d106      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b4:	4bc3      	ldr	r3, [pc, #780]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	4ac2      	ldr	r2, [pc, #776]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046c0:	e008      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046c8:	e004      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046dc:	4bb9      	ldr	r3, [pc, #740]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ec:	4ab5      	ldr	r2, [pc, #724]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6553      	str	r3, [r2, #84]	; 0x54
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004708:	65bb      	str	r3, [r7, #88]	; 0x58
 800470a:	2300      	movs	r3, #0
 800470c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800470e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004718:	4baa      	ldr	r3, [pc, #680]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	4aa7      	ldr	r2, [pc, #668]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004728:	430b      	orrs	r3, r1
 800472a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004738:	653b      	str	r3, [r7, #80]	; 0x50
 800473a:	2300      	movs	r3, #0
 800473c:	657b      	str	r3, [r7, #84]	; 0x54
 800473e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004742:	460b      	mov	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004748:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004754:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004758:	4a9a      	ldr	r2, [pc, #616]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475a:	430b      	orrs	r3, r1
 800475c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
 800476c:	2300      	movs	r3, #0
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004770:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004774:	460b      	mov	r3, r1
 8004776:	4313      	orrs	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800477a:	4b92      	ldr	r3, [pc, #584]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004788:	4a8e      	ldr	r2, [pc, #568]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478a:	430b      	orrs	r3, r1
 800478c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800479a:	643b      	str	r3, [r7, #64]	; 0x40
 800479c:	2300      	movs	r3, #0
 800479e:	647b      	str	r3, [r7, #68]	; 0x44
 80047a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047a4:	460b      	mov	r3, r1
 80047a6:	4313      	orrs	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047aa:	4b86      	ldr	r3, [pc, #536]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	4a85      	ldr	r2, [pc, #532]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047b4:	6113      	str	r3, [r2, #16]
 80047b6:	4b83      	ldr	r3, [pc, #524]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b8:	6919      	ldr	r1, [r3, #16]
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047c2:	4a80      	ldr	r2, [pc, #512]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047d6:	2300      	movs	r3, #0
 80047d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047de:	460b      	mov	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047e4:	4b77      	ldr	r3, [pc, #476]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	4a74      	ldr	r2, [pc, #464]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f4:	430b      	orrs	r3, r1
 80047f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
 8004806:	2300      	movs	r3, #0
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
 800480a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004814:	4b6b      	ldr	r3, [pc, #428]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004824:	4a67      	ldr	r2, [pc, #412]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004826:	430b      	orrs	r3, r1
 8004828:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	2100      	movs	r1, #0
 8004834:	62b9      	str	r1, [r7, #40]	; 0x28
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004840:	460b      	mov	r3, r1
 8004842:	4313      	orrs	r3, r2
 8004844:	d011      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484a:	3308      	adds	r3, #8
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fb78 	bl	8004f44 <RCCEx_PLL2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	2100      	movs	r1, #0
 8004874:	6239      	str	r1, [r7, #32]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
 800487c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004880:	460b      	mov	r3, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	d011      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488a:	3308      	adds	r3, #8
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fb58 	bl	8004f44 <RCCEx_PLL2_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	2100      	movs	r1, #0
 80048b4:	61b9      	str	r1, [r7, #24]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048c0:	460b      	mov	r3, r1
 80048c2:	4313      	orrs	r3, r2
 80048c4:	d011      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ca:	3308      	adds	r3, #8
 80048cc:	2102      	movs	r1, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb38 	bl	8004f44 <RCCEx_PLL2_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	2100      	movs	r1, #0
 80048f4:	6139      	str	r1, [r7, #16]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d011      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490a:	3328      	adds	r3, #40	; 0x28
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fbca 	bl	80050a8 <RCCEx_PLL3_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	2100      	movs	r1, #0
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004940:	460b      	mov	r3, r1
 8004942:	4313      	orrs	r3, r2
 8004944:	d011      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494a:	3328      	adds	r3, #40	; 0x28
 800494c:	2101      	movs	r1, #1
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fbaa 	bl	80050a8 <RCCEx_PLL3_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	2100      	movs	r1, #0
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004980:	460b      	mov	r3, r1
 8004982:	4313      	orrs	r3, r2
 8004984:	d011      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498a:	3328      	adds	r3, #40	; 0x28
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fb8a 	bl	80050a8 <RCCEx_PLL3_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800499a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80049aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80049be:	46bd      	mov	sp, r7
 80049c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c4:	58024400 	.word	0x58024400

080049c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049cc:	f7fe fd54 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4904      	ldr	r1, [pc, #16]	; (80049f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	58024400 	.word	0x58024400
 80049f0:	0800820c 	.word	0x0800820c

080049f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049fc:	4ba1      	ldr	r3, [pc, #644]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a06:	4b9f      	ldr	r3, [pc, #636]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	0b1b      	lsrs	r3, r3, #12
 8004a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a12:	4b9c      	ldr	r3, [pc, #624]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a1e:	4b99      	ldr	r3, [pc, #612]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	08db      	lsrs	r3, r3, #3
 8004a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8111 	beq.w	8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	f000 8083 	beq.w	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	f200 80a1 	bhi.w	8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d056      	beq.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a5e:	e099      	b.n	8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a60:	4b88      	ldr	r3, [pc, #544]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02d      	beq.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a6c:	4b85      	ldr	r3, [pc, #532]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	08db      	lsrs	r3, r3, #3
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	4a84      	ldr	r2, [pc, #528]	; (8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b7b      	ldr	r3, [pc, #492]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ac6:	e087      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0a:	e065      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4e:	e043      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b62:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b92:	e021      	b.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	0a5b      	lsrs	r3, r3, #9
 8004bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfe:	ee17 2a90 	vmov	r2, s15
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c06:	4b1f      	ldr	r3, [pc, #124]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	ee07 3a90 	vmov	s15, r3
 8004c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2c:	ee17 2a90 	vmov	r2, s15
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	0e1b      	lsrs	r3, r3, #24
 8004c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5a:	ee17 2a90 	vmov	r2, s15
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
}
 8004c76:	bf00      	nop
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
 8004c88:	03d09000 	.word	0x03d09000
 8004c8c:	46000000 	.word	0x46000000
 8004c90:	4c742400 	.word	0x4c742400
 8004c94:	4a742400 	.word	0x4a742400
 8004c98:	4af42400 	.word	0x4af42400

08004c9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	; 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca4:	4ba1      	ldr	r3, [pc, #644]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cae:	4b9f      	ldr	r3, [pc, #636]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	0d1b      	lsrs	r3, r3, #20
 8004cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cba:	4b9c      	ldr	r3, [pc, #624]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cc6:	4b99      	ldr	r3, [pc, #612]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8111 	beq.w	8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f000 8083 	beq.w	8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	f200 80a1 	bhi.w	8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d056      	beq.n	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d06:	e099      	b.n	8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d08:	4b88      	ldr	r3, [pc, #544]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d02d      	beq.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d14:	4b85      	ldr	r3, [pc, #532]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	4a84      	ldr	r2, [pc, #528]	; (8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b7b      	ldr	r3, [pc, #492]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d6e:	e087      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d82:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db2:	e065      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b59      	ldr	r3, [pc, #356]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df6:	e043      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3a:	e021      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e80:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	0a5b      	lsrs	r3, r3, #9
 8004e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea6:	ee17 2a90 	vmov	r2, s15
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed4:	ee17 2a90 	vmov	r2, s15
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	0e1b      	lsrs	r3, r3, #24
 8004ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f02:	ee17 2a90 	vmov	r2, s15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f0a:	e008      	b.n	8004f1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	3724      	adds	r7, #36	; 0x24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	03d09000 	.word	0x03d09000
 8004f34:	46000000 	.word	0x46000000
 8004f38:	4c742400 	.word	0x4c742400
 8004f3c:	4a742400 	.word	0x4a742400
 8004f40:	4af42400 	.word	0x4af42400

08004f44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f52:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d101      	bne.n	8004f62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e099      	b.n	8005096 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f62:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a4e      	ldr	r2, [pc, #312]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6e:	f7fc f9b5 	bl	80012dc <HAL_GetTick>
 8004f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f74:	e008      	b.n	8004f88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f76:	f7fc f9b1 	bl	80012dc <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e086      	b.n	8005096 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f88:	4b45      	ldr	r3, [pc, #276]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f94:	4b42      	ldr	r3, [pc, #264]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	493f      	ldr	r1, [pc, #252]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	025b      	lsls	r3, r3, #9
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fd8:	4931      	ldr	r1, [pc, #196]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fde:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	492d      	ldr	r1, [pc, #180]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	f023 0220 	bic.w	r2, r3, #32
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4928      	ldr	r1, [pc, #160]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005002:	4b27      	ldr	r3, [pc, #156]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005008:	f023 0310 	bic.w	r3, r3, #16
 800500c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <RCCEx_PLL2_Config+0x160>)
 8005014:	4013      	ands	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	69d2      	ldr	r2, [r2, #28]
 800501a:	00d2      	lsls	r2, r2, #3
 800501c:	4920      	ldr	r1, [pc, #128]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005022:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005028:	f043 0310 	orr.w	r3, r3, #16
 800502c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005034:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800503a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800503e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005040:	e00f      	b.n	8005062 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800504e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005054:	e005      	b.n	8005062 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800505c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 8005068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800506c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506e:	f7fc f935 	bl	80012dc <HAL_GetTick>
 8005072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005074:	e008      	b.n	8005088 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005076:	f7fc f931 	bl	80012dc <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e006      	b.n	8005096 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <RCCEx_PLL2_Config+0x15c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	58024400 	.word	0x58024400
 80050a4:	ffff0007 	.word	0xffff0007

080050a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b6:	4b53      	ldr	r3, [pc, #332]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d101      	bne.n	80050c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e099      	b.n	80051fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050c6:	4b4f      	ldr	r3, [pc, #316]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a4e      	ldr	r2, [pc, #312]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d2:	f7fc f903 	bl	80012dc <HAL_GetTick>
 80050d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050d8:	e008      	b.n	80050ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050da:	f7fc f8ff 	bl	80012dc <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e086      	b.n	80051fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050ec:	4b45      	ldr	r3, [pc, #276]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f0      	bne.n	80050da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	493f      	ldr	r1, [pc, #252]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	628b      	str	r3, [r1, #40]	; 0x28
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	3b01      	subs	r3, #1
 8005112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	3b01      	subs	r3, #1
 800511c:	025b      	lsls	r3, r3, #9
 800511e:	b29b      	uxth	r3, r3
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	3b01      	subs	r3, #1
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	3b01      	subs	r3, #1
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800513c:	4931      	ldr	r1, [pc, #196]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005142:	4b30      	ldr	r3, [pc, #192]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	492d      	ldr	r1, [pc, #180]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005154:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	4928      	ldr	r1, [pc, #160]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005166:	4b27      	ldr	r3, [pc, #156]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	4a26      	ldr	r2, [pc, #152]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800516c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <RCCEx_PLL3_Config+0x160>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	69d2      	ldr	r2, [r2, #28]
 800517e:	00d2      	lsls	r2, r2, #3
 8005180:	4920      	ldr	r1, [pc, #128]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005186:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 800519e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051a4:	e00f      	b.n	80051c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d106      	bne.n	80051ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051ac:	4b15      	ldr	r3, [pc, #84]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051b8:	e005      	b.n	80051c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	4a11      	ldr	r2, [pc, #68]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d2:	f7fc f883 	bl	80012dc <HAL_GetTick>
 80051d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051d8:	e008      	b.n	80051ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051da:	f7fc f87f 	bl	80012dc <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e006      	b.n	80051fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	58024400 	.word	0x58024400
 8005208:	ffff0007 	.word	0xffff0007

0800520c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e049      	b.n	80052b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f841 	bl	80052ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f000 f9e8 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d001      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e054      	b.n	8005392 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d022      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d01d      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d018      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d013      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1f      	ldr	r2, [pc, #124]	; (80053ac <HAL_TIM_Base_Start_IT+0xdc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d115      	bne.n	800537c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_TIM_Base_Start_IT+0xec>)
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b06      	cmp	r3, #6
 8005360:	d015      	beq.n	800538e <HAL_TIM_Base_Start_IT+0xbe>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005368:	d011      	beq.n	800538e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	e008      	b.n	800538e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e000      	b.n	8005390 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40001800 	.word	0x40001800
 80053b8:	40014000 	.word	0x40014000
 80053bc:	00010007 	.word	0x00010007

080053c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d020      	beq.n	8005424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01b      	beq.n	8005424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0202 	mvn.w	r2, #2
 80053f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f8e9 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8db 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f8ec 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d020      	beq.n	8005470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01b      	beq.n	8005470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0204 	mvn.w	r2, #4
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8c3 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8b5 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8c6 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d020      	beq.n	80054bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0208 	mvn.w	r2, #8
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2204      	movs	r2, #4
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f89d 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f88f 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f8a0 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0210 	mvn.w	r2, #16
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2208      	movs	r2, #8
 80054de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f877 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f869 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f87a 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0201 	mvn.w	r2, #1
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fbc8 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f913 	bl	8005780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00c      	beq.n	800557e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f90b 	bl	8005794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00c      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800559a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f834 	bl	800560a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00c      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0220 	mvn.w	r2, #32
 80055be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f8d3 	bl	800576c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a46      	ldr	r2, [pc, #280]	; (800574c <TIM_Base_SetConfig+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d00f      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a43      	ldr	r2, [pc, #268]	; (8005750 <TIM_Base_SetConfig+0x130>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a42      	ldr	r2, [pc, #264]	; (8005754 <TIM_Base_SetConfig+0x134>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a41      	ldr	r2, [pc, #260]	; (8005758 <TIM_Base_SetConfig+0x138>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a40      	ldr	r2, [pc, #256]	; (800575c <TIM_Base_SetConfig+0x13c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a35      	ldr	r2, [pc, #212]	; (800574c <TIM_Base_SetConfig+0x12c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01f      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d01b      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a32      	ldr	r2, [pc, #200]	; (8005750 <TIM_Base_SetConfig+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d017      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a31      	ldr	r2, [pc, #196]	; (8005754 <TIM_Base_SetConfig+0x134>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a30      	ldr	r2, [pc, #192]	; (8005758 <TIM_Base_SetConfig+0x138>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2f      	ldr	r2, [pc, #188]	; (800575c <TIM_Base_SetConfig+0x13c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2e      	ldr	r2, [pc, #184]	; (8005760 <TIM_Base_SetConfig+0x140>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <TIM_Base_SetConfig+0x144>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	; (8005768 <TIM_Base_SetConfig+0x148>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <TIM_Base_SetConfig+0x12c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00f      	beq.n	8005718 <TIM_Base_SetConfig+0xf8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a18      	ldr	r2, [pc, #96]	; (800575c <TIM_Base_SetConfig+0x13c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00b      	beq.n	8005718 <TIM_Base_SetConfig+0xf8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a17      	ldr	r2, [pc, #92]	; (8005760 <TIM_Base_SetConfig+0x140>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d007      	beq.n	8005718 <TIM_Base_SetConfig+0xf8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a16      	ldr	r2, [pc, #88]	; (8005764 <TIM_Base_SetConfig+0x144>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0xf8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <TIM_Base_SetConfig+0x148>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d103      	bne.n	8005720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b01      	cmp	r3, #1
 8005730:	d105      	bne.n	800573e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]
  }
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e042      	b.n	8005840 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fb fb15 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2224      	movs	r2, #36	; 0x24
 80057d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fd90 	bl	8006318 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f825 	bl	8005848 <UART_SetConfig>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e01b      	b.n	8005840 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fe0f 	bl	800645c <UART_CheckIdleState>
 800583e:	4603      	mov	r3, r0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800584c:	b092      	sub	sp, #72	; 0x48
 800584e:	af00      	add	r7, sp, #0
 8005850:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	431a      	orrs	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	431a      	orrs	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	4313      	orrs	r3, r2
 800586e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4bbe      	ldr	r3, [pc, #760]	; (8005b70 <UART_SetConfig+0x328>)
 8005878:	4013      	ands	r3, r2
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005880:	430b      	orrs	r3, r1
 8005882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4ab3      	ldr	r2, [pc, #716]	; (8005b74 <UART_SetConfig+0x32c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b0:	4313      	orrs	r3, r2
 80058b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	4baf      	ldr	r3, [pc, #700]	; (8005b78 <UART_SetConfig+0x330>)
 80058bc:	4013      	ands	r3, r2
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	f023 010f 	bic.w	r1, r3, #15
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4aa6      	ldr	r2, [pc, #664]	; (8005b7c <UART_SetConfig+0x334>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d177      	bne.n	80059d8 <UART_SetConfig+0x190>
 80058e8:	4ba5      	ldr	r3, [pc, #660]	; (8005b80 <UART_SetConfig+0x338>)
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058f0:	2b28      	cmp	r3, #40	; 0x28
 80058f2:	d86d      	bhi.n	80059d0 <UART_SetConfig+0x188>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0xb4>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	080059a1 	.word	0x080059a1
 8005900:	080059d1 	.word	0x080059d1
 8005904:	080059d1 	.word	0x080059d1
 8005908:	080059d1 	.word	0x080059d1
 800590c:	080059d1 	.word	0x080059d1
 8005910:	080059d1 	.word	0x080059d1
 8005914:	080059d1 	.word	0x080059d1
 8005918:	080059d1 	.word	0x080059d1
 800591c:	080059a9 	.word	0x080059a9
 8005920:	080059d1 	.word	0x080059d1
 8005924:	080059d1 	.word	0x080059d1
 8005928:	080059d1 	.word	0x080059d1
 800592c:	080059d1 	.word	0x080059d1
 8005930:	080059d1 	.word	0x080059d1
 8005934:	080059d1 	.word	0x080059d1
 8005938:	080059d1 	.word	0x080059d1
 800593c:	080059b1 	.word	0x080059b1
 8005940:	080059d1 	.word	0x080059d1
 8005944:	080059d1 	.word	0x080059d1
 8005948:	080059d1 	.word	0x080059d1
 800594c:	080059d1 	.word	0x080059d1
 8005950:	080059d1 	.word	0x080059d1
 8005954:	080059d1 	.word	0x080059d1
 8005958:	080059d1 	.word	0x080059d1
 800595c:	080059b9 	.word	0x080059b9
 8005960:	080059d1 	.word	0x080059d1
 8005964:	080059d1 	.word	0x080059d1
 8005968:	080059d1 	.word	0x080059d1
 800596c:	080059d1 	.word	0x080059d1
 8005970:	080059d1 	.word	0x080059d1
 8005974:	080059d1 	.word	0x080059d1
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059c1 	.word	0x080059c1
 8005980:	080059d1 	.word	0x080059d1
 8005984:	080059d1 	.word	0x080059d1
 8005988:	080059d1 	.word	0x080059d1
 800598c:	080059d1 	.word	0x080059d1
 8005990:	080059d1 	.word	0x080059d1
 8005994:	080059d1 	.word	0x080059d1
 8005998:	080059d1 	.word	0x080059d1
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e222      	b.n	8005dee <UART_SetConfig+0x5a6>
 80059a8:	2304      	movs	r3, #4
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e21e      	b.n	8005dee <UART_SetConfig+0x5a6>
 80059b0:	2308      	movs	r3, #8
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e21a      	b.n	8005dee <UART_SetConfig+0x5a6>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e216      	b.n	8005dee <UART_SetConfig+0x5a6>
 80059c0:	2320      	movs	r3, #32
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e212      	b.n	8005dee <UART_SetConfig+0x5a6>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e20e      	b.n	8005dee <UART_SetConfig+0x5a6>
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d6:	e20a      	b.n	8005dee <UART_SetConfig+0x5a6>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a69      	ldr	r2, [pc, #420]	; (8005b84 <UART_SetConfig+0x33c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d130      	bne.n	8005a44 <UART_SetConfig+0x1fc>
 80059e2:	4b67      	ldr	r3, [pc, #412]	; (8005b80 <UART_SetConfig+0x338>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	d826      	bhi.n	8005a3c <UART_SetConfig+0x1f4>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x1ac>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a1d 	.word	0x08005a1d
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a35 	.word	0x08005a35
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e1ec      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e1e8      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e1e4      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e1e0      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e1dc      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3a:	e1d8      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e1d4      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a4f      	ldr	r2, [pc, #316]	; (8005b88 <UART_SetConfig+0x340>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d130      	bne.n	8005ab0 <UART_SetConfig+0x268>
 8005a4e:	4b4c      	ldr	r3, [pc, #304]	; (8005b80 <UART_SetConfig+0x338>)
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d826      	bhi.n	8005aa8 <UART_SetConfig+0x260>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x218>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a79 	.word	0x08005a79
 8005a64:	08005a81 	.word	0x08005a81
 8005a68:	08005a89 	.word	0x08005a89
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a99 	.word	0x08005a99
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e1b6      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a86:	e1b2      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e1ae      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e1aa      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005a98:	2320      	movs	r3, #32
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e1a6      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa6:	e1a2      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e19e      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a35      	ldr	r2, [pc, #212]	; (8005b8c <UART_SetConfig+0x344>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d130      	bne.n	8005b1c <UART_SetConfig+0x2d4>
 8005aba:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <UART_SetConfig+0x338>)
 8005abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d826      	bhi.n	8005b14 <UART_SetConfig+0x2cc>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0x284>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005ae5 	.word	0x08005ae5
 8005ad0:	08005aed 	.word	0x08005aed
 8005ad4:	08005af5 	.word	0x08005af5
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b05 	.word	0x08005b05
 8005ae0:	08005b0d 	.word	0x08005b0d
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aea:	e180      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005aec:	2304      	movs	r3, #4
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af2:	e17c      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005af4:	2308      	movs	r3, #8
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afa:	e178      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005afc:	2310      	movs	r3, #16
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b02:	e174      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b04:	2320      	movs	r3, #32
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0a:	e170      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b0c:	2340      	movs	r3, #64	; 0x40
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b12:	e16c      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b14:	2380      	movs	r3, #128	; 0x80
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e168      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <UART_SetConfig+0x348>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d142      	bne.n	8005bac <UART_SetConfig+0x364>
 8005b26:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <UART_SetConfig+0x338>)
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d838      	bhi.n	8005ba4 <UART_SetConfig+0x35c>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0x2f0>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b51 	.word	0x08005b51
 8005b3c:	08005b59 	.word	0x08005b59
 8005b40:	08005b61 	.word	0x08005b61
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005b95 	.word	0x08005b95
 8005b4c:	08005b9d 	.word	0x08005b9d
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e14a      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5e:	e146      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b60:	2308      	movs	r3, #8
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b66:	e142      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6e:	e13e      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b70:	cfff69f3 	.word	0xcfff69f3
 8005b74:	58000c00 	.word	0x58000c00
 8005b78:	11fff4ff 	.word	0x11fff4ff
 8005b7c:	40011000 	.word	0x40011000
 8005b80:	58024400 	.word	0x58024400
 8005b84:	40004400 	.word	0x40004400
 8005b88:	40004800 	.word	0x40004800
 8005b8c:	40004c00 	.word	0x40004c00
 8005b90:	40005000 	.word	0x40005000
 8005b94:	2320      	movs	r3, #32
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e128      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005b9c:	2340      	movs	r3, #64	; 0x40
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e124      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e120      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4acb      	ldr	r2, [pc, #812]	; (8005ee0 <UART_SetConfig+0x698>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d176      	bne.n	8005ca4 <UART_SetConfig+0x45c>
 8005bb6:	4bcb      	ldr	r3, [pc, #812]	; (8005ee4 <UART_SetConfig+0x69c>)
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bbe:	2b28      	cmp	r3, #40	; 0x28
 8005bc0:	d86c      	bhi.n	8005c9c <UART_SetConfig+0x454>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <UART_SetConfig+0x380>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005c6d 	.word	0x08005c6d
 8005bcc:	08005c9d 	.word	0x08005c9d
 8005bd0:	08005c9d 	.word	0x08005c9d
 8005bd4:	08005c9d 	.word	0x08005c9d
 8005bd8:	08005c9d 	.word	0x08005c9d
 8005bdc:	08005c9d 	.word	0x08005c9d
 8005be0:	08005c9d 	.word	0x08005c9d
 8005be4:	08005c9d 	.word	0x08005c9d
 8005be8:	08005c75 	.word	0x08005c75
 8005bec:	08005c9d 	.word	0x08005c9d
 8005bf0:	08005c9d 	.word	0x08005c9d
 8005bf4:	08005c9d 	.word	0x08005c9d
 8005bf8:	08005c9d 	.word	0x08005c9d
 8005bfc:	08005c9d 	.word	0x08005c9d
 8005c00:	08005c9d 	.word	0x08005c9d
 8005c04:	08005c9d 	.word	0x08005c9d
 8005c08:	08005c7d 	.word	0x08005c7d
 8005c0c:	08005c9d 	.word	0x08005c9d
 8005c10:	08005c9d 	.word	0x08005c9d
 8005c14:	08005c9d 	.word	0x08005c9d
 8005c18:	08005c9d 	.word	0x08005c9d
 8005c1c:	08005c9d 	.word	0x08005c9d
 8005c20:	08005c9d 	.word	0x08005c9d
 8005c24:	08005c9d 	.word	0x08005c9d
 8005c28:	08005c85 	.word	0x08005c85
 8005c2c:	08005c9d 	.word	0x08005c9d
 8005c30:	08005c9d 	.word	0x08005c9d
 8005c34:	08005c9d 	.word	0x08005c9d
 8005c38:	08005c9d 	.word	0x08005c9d
 8005c3c:	08005c9d 	.word	0x08005c9d
 8005c40:	08005c9d 	.word	0x08005c9d
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005c8d 	.word	0x08005c8d
 8005c4c:	08005c9d 	.word	0x08005c9d
 8005c50:	08005c9d 	.word	0x08005c9d
 8005c54:	08005c9d 	.word	0x08005c9d
 8005c58:	08005c9d 	.word	0x08005c9d
 8005c5c:	08005c9d 	.word	0x08005c9d
 8005c60:	08005c9d 	.word	0x08005c9d
 8005c64:	08005c9d 	.word	0x08005c9d
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c72:	e0bc      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005c74:	2304      	movs	r3, #4
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7a:	e0b8      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c82:	e0b4      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8a:	e0b0      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c92:	e0ac      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005c94:	2340      	movs	r3, #64	; 0x40
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9a:	e0a8      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca2:	e0a4      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a8f      	ldr	r2, [pc, #572]	; (8005ee8 <UART_SetConfig+0x6a0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d130      	bne.n	8005d10 <UART_SetConfig+0x4c8>
 8005cae:	4b8d      	ldr	r3, [pc, #564]	; (8005ee4 <UART_SetConfig+0x69c>)
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d826      	bhi.n	8005d08 <UART_SetConfig+0x4c0>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0x478>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd9 	.word	0x08005cd9
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	08005ce9 	.word	0x08005ce9
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cde:	e086      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce6:	e082      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cee:	e07e      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf6:	e07a      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfe:	e076      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d00:	2340      	movs	r3, #64	; 0x40
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d06:	e072      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e06e      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a75      	ldr	r2, [pc, #468]	; (8005eec <UART_SetConfig+0x6a4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d130      	bne.n	8005d7c <UART_SetConfig+0x534>
 8005d1a:	4b72      	ldr	r3, [pc, #456]	; (8005ee4 <UART_SetConfig+0x69c>)
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	d826      	bhi.n	8005d74 <UART_SetConfig+0x52c>
 8005d26:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0x4e4>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005d45 	.word	0x08005d45
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	08005d55 	.word	0x08005d55
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4a:	e050      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d52:	e04c      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d54:	2308      	movs	r3, #8
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5a:	e048      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d62:	e044      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d64:	2320      	movs	r3, #32
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6a:	e040      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d6c:	2340      	movs	r3, #64	; 0x40
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d72:	e03c      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e038      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a5b      	ldr	r2, [pc, #364]	; (8005ef0 <UART_SetConfig+0x6a8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d130      	bne.n	8005de8 <UART_SetConfig+0x5a0>
 8005d86:	4b57      	ldr	r3, [pc, #348]	; (8005ee4 <UART_SetConfig+0x69c>)
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	2b05      	cmp	r3, #5
 8005d90:	d826      	bhi.n	8005de0 <UART_SetConfig+0x598>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0x550>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005db1 	.word	0x08005db1
 8005d9c:	08005db9 	.word	0x08005db9
 8005da0:	08005dc1 	.word	0x08005dc1
 8005da4:	08005dc9 	.word	0x08005dc9
 8005da8:	08005dd1 	.word	0x08005dd1
 8005dac:	08005dd9 	.word	0x08005dd9
 8005db0:	2302      	movs	r3, #2
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db6:	e01a      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005db8:	2304      	movs	r3, #4
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dbe:	e016      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc6:	e012      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dce:	e00e      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e00a      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005dd8:	2340      	movs	r3, #64	; 0x40
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e006      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e002      	b.n	8005dee <UART_SetConfig+0x5a6>
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <UART_SetConfig+0x6a8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	f040 80f8 	bne.w	8005fea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	dc46      	bgt.n	8005e90 <UART_SetConfig+0x648>
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	f2c0 8082 	blt.w	8005f0c <UART_SetConfig+0x6c4>
 8005e08:	3b02      	subs	r3, #2
 8005e0a:	2b1e      	cmp	r3, #30
 8005e0c:	d87e      	bhi.n	8005f0c <UART_SetConfig+0x6c4>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0x5cc>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e97 	.word	0x08005e97
 8005e18:	08005f0d 	.word	0x08005f0d
 8005e1c:	08005e9f 	.word	0x08005e9f
 8005e20:	08005f0d 	.word	0x08005f0d
 8005e24:	08005f0d 	.word	0x08005f0d
 8005e28:	08005f0d 	.word	0x08005f0d
 8005e2c:	08005eaf 	.word	0x08005eaf
 8005e30:	08005f0d 	.word	0x08005f0d
 8005e34:	08005f0d 	.word	0x08005f0d
 8005e38:	08005f0d 	.word	0x08005f0d
 8005e3c:	08005f0d 	.word	0x08005f0d
 8005e40:	08005f0d 	.word	0x08005f0d
 8005e44:	08005f0d 	.word	0x08005f0d
 8005e48:	08005f0d 	.word	0x08005f0d
 8005e4c:	08005ebf 	.word	0x08005ebf
 8005e50:	08005f0d 	.word	0x08005f0d
 8005e54:	08005f0d 	.word	0x08005f0d
 8005e58:	08005f0d 	.word	0x08005f0d
 8005e5c:	08005f0d 	.word	0x08005f0d
 8005e60:	08005f0d 	.word	0x08005f0d
 8005e64:	08005f0d 	.word	0x08005f0d
 8005e68:	08005f0d 	.word	0x08005f0d
 8005e6c:	08005f0d 	.word	0x08005f0d
 8005e70:	08005f0d 	.word	0x08005f0d
 8005e74:	08005f0d 	.word	0x08005f0d
 8005e78:	08005f0d 	.word	0x08005f0d
 8005e7c:	08005f0d 	.word	0x08005f0d
 8005e80:	08005f0d 	.word	0x08005f0d
 8005e84:	08005f0d 	.word	0x08005f0d
 8005e88:	08005f0d 	.word	0x08005f0d
 8005e8c:	08005eff 	.word	0x08005eff
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d037      	beq.n	8005f04 <UART_SetConfig+0x6bc>
 8005e94:	e03a      	b.n	8005f0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e96:	f7fe fd97 	bl	80049c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e9c:	e03c      	b.n	8005f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fda6 	bl	80049f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eac:	e034      	b.n	8005f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eae:	f107 0318 	add.w	r3, r7, #24
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fef2 	bl	8004c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ebc:	e02c      	b.n	8005f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <UART_SetConfig+0x69c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <UART_SetConfig+0x69c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	08db      	lsrs	r3, r3, #3
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	4a07      	ldr	r2, [pc, #28]	; (8005ef4 <UART_SetConfig+0x6ac>)
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005edc:	e01c      	b.n	8005f18 <UART_SetConfig+0x6d0>
 8005ede:	bf00      	nop
 8005ee0:	40011400 	.word	0x40011400
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	40007800 	.word	0x40007800
 8005eec:	40007c00 	.word	0x40007c00
 8005ef0:	58000c00 	.word	0x58000c00
 8005ef4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <UART_SetConfig+0x928>)
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005efc:	e00c      	b.n	8005f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005efe:	4b9d      	ldr	r3, [pc, #628]	; (8006174 <UART_SetConfig+0x92c>)
 8005f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f02:	e009      	b.n	8005f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f0a:	e005      	b.n	8005f18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 81de 	beq.w	80062dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	4a94      	ldr	r2, [pc, #592]	; (8006178 <UART_SetConfig+0x930>)
 8005f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d305      	bcc.n	8005f50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d903      	bls.n	8005f58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f56:	e1c1      	b.n	80062dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	60bb      	str	r3, [r7, #8]
 8005f5e:	60fa      	str	r2, [r7, #12]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	4a84      	ldr	r2, [pc, #528]	; (8006178 <UART_SetConfig+0x930>)
 8005f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f7a:	f7fa f9b1 	bl	80002e0 <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4610      	mov	r0, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	020b      	lsls	r3, r1, #8
 8005f90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f94:	0202      	lsls	r2, r0, #8
 8005f96:	6979      	ldr	r1, [r7, #20]
 8005f98:	6849      	ldr	r1, [r1, #4]
 8005f9a:	0849      	lsrs	r1, r1, #1
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	eb12 0804 	adds.w	r8, r2, r4
 8005fa6:	eb43 0905 	adc.w	r9, r3, r5
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	469a      	mov	sl, r3
 8005fb2:	4693      	mov	fp, r2
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	465b      	mov	r3, fp
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4649      	mov	r1, r9
 8005fbc:	f7fa f990 	bl	80002e0 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fce:	d308      	bcc.n	8005fe2 <UART_SetConfig+0x79a>
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd6:	d204      	bcs.n	8005fe2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fde:	60da      	str	r2, [r3, #12]
 8005fe0:	e17c      	b.n	80062dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005fe8:	e178      	b.n	80062dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff2:	f040 80c5 	bne.w	8006180 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005ff6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	dc48      	bgt.n	8006090 <UART_SetConfig+0x848>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	db7b      	blt.n	80060fa <UART_SetConfig+0x8b2>
 8006002:	2b20      	cmp	r3, #32
 8006004:	d879      	bhi.n	80060fa <UART_SetConfig+0x8b2>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x7c4>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006097 	.word	0x08006097
 8006010:	0800609f 	.word	0x0800609f
 8006014:	080060fb 	.word	0x080060fb
 8006018:	080060fb 	.word	0x080060fb
 800601c:	080060a7 	.word	0x080060a7
 8006020:	080060fb 	.word	0x080060fb
 8006024:	080060fb 	.word	0x080060fb
 8006028:	080060fb 	.word	0x080060fb
 800602c:	080060b7 	.word	0x080060b7
 8006030:	080060fb 	.word	0x080060fb
 8006034:	080060fb 	.word	0x080060fb
 8006038:	080060fb 	.word	0x080060fb
 800603c:	080060fb 	.word	0x080060fb
 8006040:	080060fb 	.word	0x080060fb
 8006044:	080060fb 	.word	0x080060fb
 8006048:	080060fb 	.word	0x080060fb
 800604c:	080060c7 	.word	0x080060c7
 8006050:	080060fb 	.word	0x080060fb
 8006054:	080060fb 	.word	0x080060fb
 8006058:	080060fb 	.word	0x080060fb
 800605c:	080060fb 	.word	0x080060fb
 8006060:	080060fb 	.word	0x080060fb
 8006064:	080060fb 	.word	0x080060fb
 8006068:	080060fb 	.word	0x080060fb
 800606c:	080060fb 	.word	0x080060fb
 8006070:	080060fb 	.word	0x080060fb
 8006074:	080060fb 	.word	0x080060fb
 8006078:	080060fb 	.word	0x080060fb
 800607c:	080060fb 	.word	0x080060fb
 8006080:	080060fb 	.word	0x080060fb
 8006084:	080060fb 	.word	0x080060fb
 8006088:	080060fb 	.word	0x080060fb
 800608c:	080060ed 	.word	0x080060ed
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d02e      	beq.n	80060f2 <UART_SetConfig+0x8aa>
 8006094:	e031      	b.n	80060fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006096:	f7fd fa1f 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 800609a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800609c:	e033      	b.n	8006106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800609e:	f7fd fa31 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 80060a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060a4:	e02f      	b.n	8006106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fca2 	bl	80049f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b4:	e027      	b.n	8006106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060b6:	f107 0318 	add.w	r3, r7, #24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fdee 	bl	8004c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060c4:	e01f      	b.n	8006106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060c6:	4b2d      	ldr	r3, [pc, #180]	; (800617c <UART_SetConfig+0x934>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060d2:	4b2a      	ldr	r3, [pc, #168]	; (800617c <UART_SetConfig+0x934>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	08db      	lsrs	r3, r3, #3
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	4a24      	ldr	r2, [pc, #144]	; (8006170 <UART_SetConfig+0x928>)
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060e4:	e00f      	b.n	8006106 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80060e6:	4b22      	ldr	r3, [pc, #136]	; (8006170 <UART_SetConfig+0x928>)
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ea:	e00c      	b.n	8006106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <UART_SetConfig+0x92c>)
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f0:	e009      	b.n	8006106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f8:	e005      	b.n	8006106 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80e7 	beq.w	80062dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	4a19      	ldr	r2, [pc, #100]	; (8006178 <UART_SetConfig+0x930>)
 8006114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006118:	461a      	mov	r2, r3
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006120:	005a      	lsls	r2, r3, #1
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	441a      	add	r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d916      	bls.n	8006168 <UART_SetConfig+0x920>
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d212      	bcs.n	8006168 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	b29b      	uxth	r3, r3
 8006146:	f023 030f 	bic.w	r3, r3, #15
 800614a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	b29a      	uxth	r2, r3
 8006158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800615a:	4313      	orrs	r3, r2
 800615c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	e0b9      	b.n	80062dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800616e:	e0b5      	b.n	80062dc <UART_SetConfig+0xa94>
 8006170:	03d09000 	.word	0x03d09000
 8006174:	003d0900 	.word	0x003d0900
 8006178:	0800821c 	.word	0x0800821c
 800617c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006180:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006184:	2b20      	cmp	r3, #32
 8006186:	dc49      	bgt.n	800621c <UART_SetConfig+0x9d4>
 8006188:	2b00      	cmp	r3, #0
 800618a:	db7c      	blt.n	8006286 <UART_SetConfig+0xa3e>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d87a      	bhi.n	8006286 <UART_SetConfig+0xa3e>
 8006190:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <UART_SetConfig+0x950>)
 8006192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006196:	bf00      	nop
 8006198:	08006223 	.word	0x08006223
 800619c:	0800622b 	.word	0x0800622b
 80061a0:	08006287 	.word	0x08006287
 80061a4:	08006287 	.word	0x08006287
 80061a8:	08006233 	.word	0x08006233
 80061ac:	08006287 	.word	0x08006287
 80061b0:	08006287 	.word	0x08006287
 80061b4:	08006287 	.word	0x08006287
 80061b8:	08006243 	.word	0x08006243
 80061bc:	08006287 	.word	0x08006287
 80061c0:	08006287 	.word	0x08006287
 80061c4:	08006287 	.word	0x08006287
 80061c8:	08006287 	.word	0x08006287
 80061cc:	08006287 	.word	0x08006287
 80061d0:	08006287 	.word	0x08006287
 80061d4:	08006287 	.word	0x08006287
 80061d8:	08006253 	.word	0x08006253
 80061dc:	08006287 	.word	0x08006287
 80061e0:	08006287 	.word	0x08006287
 80061e4:	08006287 	.word	0x08006287
 80061e8:	08006287 	.word	0x08006287
 80061ec:	08006287 	.word	0x08006287
 80061f0:	08006287 	.word	0x08006287
 80061f4:	08006287 	.word	0x08006287
 80061f8:	08006287 	.word	0x08006287
 80061fc:	08006287 	.word	0x08006287
 8006200:	08006287 	.word	0x08006287
 8006204:	08006287 	.word	0x08006287
 8006208:	08006287 	.word	0x08006287
 800620c:	08006287 	.word	0x08006287
 8006210:	08006287 	.word	0x08006287
 8006214:	08006287 	.word	0x08006287
 8006218:	08006279 	.word	0x08006279
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d02e      	beq.n	800627e <UART_SetConfig+0xa36>
 8006220:	e031      	b.n	8006286 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006222:	f7fd f959 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8006226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006228:	e033      	b.n	8006292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800622a:	f7fd f96b 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 800622e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006230:	e02f      	b.n	8006292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fbdc 	bl	80049f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006240:	e027      	b.n	8006292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006242:	f107 0318 	add.w	r3, r7, #24
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fd28 	bl	8004c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006250:	e01f      	b.n	8006292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006252:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <UART_SetConfig+0xac0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800625e:	4b2a      	ldr	r3, [pc, #168]	; (8006308 <UART_SetConfig+0xac0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	4a28      	ldr	r2, [pc, #160]	; (800630c <UART_SetConfig+0xac4>)
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006270:	e00f      	b.n	8006292 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006272:	4b26      	ldr	r3, [pc, #152]	; (800630c <UART_SetConfig+0xac4>)
 8006274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006276:	e00c      	b.n	8006292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <UART_SetConfig+0xac8>)
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800627c:	e009      	b.n	8006292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006284:	e005      	b.n	8006292 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006290:	bf00      	nop
    }

    if (pclk != 0U)
 8006292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d021      	beq.n	80062dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <UART_SetConfig+0xacc>)
 800629e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	441a      	add	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	2b0f      	cmp	r3, #15
 80062c0:	d909      	bls.n	80062d6 <UART_SetConfig+0xa8e>
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c8:	d205      	bcs.n	80062d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60da      	str	r2, [r3, #12]
 80062d4:	e002      	b.n	80062dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2200      	movs	r2, #0
 80062f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2200      	movs	r2, #0
 80062f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80062f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3748      	adds	r7, #72	; 0x48
 8006300:	46bd      	mov	sp, r7
 8006302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006306:	bf00      	nop
 8006308:	58024400 	.word	0x58024400
 800630c:	03d09000 	.word	0x03d09000
 8006310:	003d0900 	.word	0x003d0900
 8006314:	0800821c 	.word	0x0800821c

08006318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01a      	beq.n	800642e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006416:	d10a      	bne.n	800642e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b098      	sub	sp, #96	; 0x60
 8006460:	af02      	add	r7, sp, #8
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800646c:	f7fa ff36 	bl	80012dc <HAL_GetTick>
 8006470:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b08      	cmp	r3, #8
 800647e:	d12f      	bne.n	80064e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f88e 	bl	80065b0 <UART_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d022      	beq.n	80064e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ae:	653b      	str	r3, [r7, #80]	; 0x50
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
 80064ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e6      	bne.n	800649a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e063      	b.n	80065a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d149      	bne.n	8006582 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064f6:	2200      	movs	r2, #0
 80064f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f857 	bl	80065b0 <UART_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d03c      	beq.n	8006582 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	623b      	str	r3, [r7, #32]
   return(result);
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800651c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006526:	633b      	str	r3, [r7, #48]	; 0x30
 8006528:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800652c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e6      	bne.n	8006508 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	60fb      	str	r3, [r7, #12]
   return(result);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	64bb      	str	r3, [r7, #72]	; 0x48
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800655a:	61fa      	str	r2, [r7, #28]
 800655c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	69b9      	ldr	r1, [r7, #24]
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	617b      	str	r3, [r7, #20]
   return(result);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e5      	bne.n	800653a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e012      	b.n	80065a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2220      	movs	r2, #32
 8006586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3758      	adds	r7, #88	; 0x58
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c0:	e04f      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d04b      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ca:	f7fa fe87 	bl	80012dc <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d302      	bcc.n	80065e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e04e      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d037      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b80      	cmp	r3, #128	; 0x80
 80065f6:	d034      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d031      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d110      	bne.n	800662e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2208      	movs	r2, #8
 8006612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f839 	bl	800668c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2208      	movs	r2, #8
 800661e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e029      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663c:	d111      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f81f 	bl	800668c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e00f      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4013      	ands	r3, r2
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	bf0c      	ite	eq
 8006672:	2301      	moveq	r3, #1
 8006674:	2300      	movne	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	429a      	cmp	r2, r3
 800667e:	d0a0      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b095      	sub	sp, #84	; 0x54
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
 80066b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <UART_EndRxTransfer+0xc8>)
 80066da:	4013      	ands	r3, r2
 80066dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e5      	bne.n	80066c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d118      	bne.n	8006734 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	647b      	str	r3, [r7, #68]	; 0x44
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6979      	ldr	r1, [r7, #20]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	613b      	str	r3, [r7, #16]
   return(result);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e6      	bne.n	8006702 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006748:	bf00      	nop
 800674a:	3754      	adds	r7, #84	; 0x54
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	effffffe 	.word	0xeffffffe

08006758 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_UARTEx_DisableFifoMode+0x16>
 800676a:	2302      	movs	r3, #2
 800676c:	e027      	b.n	80067be <HAL_UARTEx_DisableFifoMode+0x66>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800679c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067de:	2302      	movs	r3, #2
 80067e0:	e02d      	b.n	800683e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2224      	movs	r2, #36	; 0x24
 80067ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f850 	bl	80068c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800685a:	2302      	movs	r3, #2
 800685c:	e02d      	b.n	80068ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2224      	movs	r2, #36	; 0x24
 800686a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f812 	bl	80068c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d108      	bne.n	80068e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068e4:	e031      	b.n	800694a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068e6:	2310      	movs	r3, #16
 80068e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068ea:	2310      	movs	r3, #16
 80068ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	0e5b      	lsrs	r3, r3, #25
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	0f5b      	lsrs	r3, r3, #29
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	7b3a      	ldrb	r2, [r7, #12]
 8006912:	4911      	ldr	r1, [pc, #68]	; (8006958 <UARTEx_SetNbDataToProcess+0x94>)
 8006914:	5c8a      	ldrb	r2, [r1, r2]
 8006916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800691a:	7b3a      	ldrb	r2, [r7, #12]
 800691c:	490f      	ldr	r1, [pc, #60]	; (800695c <UARTEx_SetNbDataToProcess+0x98>)
 800691e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006920:	fb93 f3f2 	sdiv	r3, r3, r2
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	7b7a      	ldrb	r2, [r7, #13]
 8006930:	4909      	ldr	r1, [pc, #36]	; (8006958 <UARTEx_SetNbDataToProcess+0x94>)
 8006932:	5c8a      	ldrb	r2, [r1, r2]
 8006934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006938:	7b7a      	ldrb	r2, [r7, #13]
 800693a:	4908      	ldr	r1, [pc, #32]	; (800695c <UARTEx_SetNbDataToProcess+0x98>)
 800693c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800693e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006942:	b29a      	uxth	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	08008234 	.word	0x08008234
 800695c:	0800823c 	.word	0x0800823c

08006960 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800696e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006972:	2b84      	cmp	r3, #132	; 0x84
 8006974:	d005      	beq.n	8006982 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	3303      	adds	r3, #3
 8006980:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006994:	f000 faf6 	bl	8006f84 <vTaskStartScheduler>
  
  return osOK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	bd80      	pop	{r7, pc}

0800699e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800699e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069a0:	b089      	sub	sp, #36	; 0x24
 80069a2:	af04      	add	r7, sp, #16
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d020      	beq.n	80069f2 <osThreadCreate+0x54>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01c      	beq.n	80069f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685c      	ldr	r4, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681d      	ldr	r5, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691e      	ldr	r6, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff ffc8 	bl	8006960 <makeFreeRtosPriority>
 80069d0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069da:	9202      	str	r2, [sp, #8]
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	9100      	str	r1, [sp, #0]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	4632      	mov	r2, r6
 80069e4:	4629      	mov	r1, r5
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 f8ed 	bl	8006bc6 <xTaskCreateStatic>
 80069ec:	4603      	mov	r3, r0
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e01c      	b.n	8006a2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685c      	ldr	r4, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069fe:	b29e      	uxth	r6, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff ffaa 	bl	8006960 <makeFreeRtosPriority>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	f107 030c 	add.w	r3, r7, #12
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	9200      	str	r2, [sp, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	4632      	mov	r2, r6
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 f92f 	bl	8006c80 <xTaskCreate>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d001      	beq.n	8006a2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <osDelay+0x16>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	e000      	b.n	8006a4e <osDelay+0x18>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fa64 	bl	8006f1c <vTaskDelay>
  
  return osOK;
 8006a54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f103 0208 	add.w	r2, r3, #8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f04f 32ff 	mov.w	r2, #4294967295
 8006a76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f103 0208 	add.w	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f103 0208 	add.w	r2, r3, #8
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d103      	bne.n	8006b20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e00c      	b.n	8006b3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3308      	adds	r3, #8
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e002      	b.n	8006b2e <vListInsert+0x2e>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d2f6      	bcs.n	8006b28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6892      	ldr	r2, [r2, #8]
 8006b88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6852      	ldr	r2, [r2, #4]
 8006b92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d103      	bne.n	8006ba6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	1e5a      	subs	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08e      	sub	sp, #56	; 0x38
 8006bca:	af04      	add	r7, sp, #16
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <xTaskCreateStatic+0x46>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	61fb      	str	r3, [r7, #28]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c0c:	23b4      	movs	r3, #180	; 0xb4
 8006c0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2bb4      	cmp	r3, #180	; 0xb4
 8006c14:	d00a      	beq.n	8006c2c <xTaskCreateStatic+0x66>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	61bb      	str	r3, [r7, #24]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01e      	beq.n	8006c72 <xTaskCreateStatic+0xac>
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01b      	beq.n	8006c72 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f851 	bl	8006d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c6c:	f000 f8ec 	bl	8006e48 <prvAddNewTaskToReadyList>
 8006c70:	e001      	b.n	8006c76 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c76:	697b      	ldr	r3, [r7, #20]
	}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3728      	adds	r7, #40	; 0x28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08c      	sub	sp, #48	; 0x30
 8006c84:	af04      	add	r7, sp, #16
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 feef 	bl	8007a78 <pvPortMalloc>
 8006c9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00e      	beq.n	8006cc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ca2:	20b4      	movs	r0, #180	; 0xb4
 8006ca4:	f000 fee8 	bl	8007a78 <pvPortMalloc>
 8006ca8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb6:	e005      	b.n	8006cc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cb8:	6978      	ldr	r0, [r7, #20]
 8006cba:	f000 ffa9 	bl	8007c10 <vPortFree>
 8006cbe:	e001      	b.n	8006cc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d017      	beq.n	8006cfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9303      	str	r3, [sp, #12]
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f80f 	bl	8006d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cee:	69f8      	ldr	r0, [r7, #28]
 8006cf0:	f000 f8aa 	bl	8006e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	e002      	b.n	8006d00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d00:	69bb      	ldr	r3, [r7, #24]
	}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006d24:	440b      	add	r3, r1
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f023 0307 	bic.w	r3, r3, #7
 8006d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	617b      	str	r3, [r7, #20]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01f      	beq.n	8006d9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e012      	b.n	8006d86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	7819      	ldrb	r1, [r3, #0]
 8006d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3334      	adds	r3, #52	; 0x34
 8006d70:	460a      	mov	r2, r1
 8006d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d006      	beq.n	8006d8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	2b0f      	cmp	r3, #15
 8006d8a:	d9e9      	bls.n	8006d60 <prvInitialiseNewTask+0x54>
 8006d8c:	e000      	b.n	8006d90 <prvInitialiseNewTask+0x84>
			{
				break;
 8006d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d98:	e003      	b.n	8006da2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d901      	bls.n	8006dac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006da8:	2306      	movs	r3, #6
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	2200      	movs	r2, #0
 8006dbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff fe6b 	bl	8006a9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	3318      	adds	r3, #24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fe66 	bl	8006a9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	f1c3 0207 	rsb	r2, r3, #7
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	334c      	adds	r3, #76	; 0x4c
 8006dfc:	2260      	movs	r2, #96	; 0x60
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 f857 	bl	8007eb4 <memset>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	4a0c      	ldr	r2, [pc, #48]	; (8006e3c <prvInitialiseNewTask+0x130>)
 8006e0a:	651a      	str	r2, [r3, #80]	; 0x50
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	4a0c      	ldr	r2, [pc, #48]	; (8006e40 <prvInitialiseNewTask+0x134>)
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	4a0b      	ldr	r2, [pc, #44]	; (8006e44 <prvInitialiseNewTask+0x138>)
 8006e16:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	69b8      	ldr	r0, [r7, #24]
 8006e1e:	f000 fc1f 	bl	8007660 <pxPortInitialiseStack>
 8006e22:	4602      	mov	r2, r0
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e34:	bf00      	nop
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	08008264 	.word	0x08008264
 8006e40:	08008284 	.word	0x08008284
 8006e44:	08008244 	.word	0x08008244

08006e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e50:	f000 fd30 	bl	80078b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e54:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <prvAddNewTaskToReadyList+0xb8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <prvAddNewTaskToReadyList+0xb8>)
 8006e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e5e:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <prvAddNewTaskToReadyList+0xbc>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e66:	4a27      	ldr	r2, [pc, #156]	; (8006f04 <prvAddNewTaskToReadyList+0xbc>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e6c:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <prvAddNewTaskToReadyList+0xb8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d110      	bne.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e74:	f000 facc 	bl	8007410 <prvInitialiseTaskLists>
 8006e78:	e00d      	b.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e7a:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <prvAddNewTaskToReadyList+0xc0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e82:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <prvAddNewTaskToReadyList+0xbc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d802      	bhi.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e90:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <prvAddNewTaskToReadyList+0xbc>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e96:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	409a      	lsls	r2, r3
 8006ea8:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	4a18      	ldr	r2, [pc, #96]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <prvAddNewTaskToReadyList+0xcc>)
 8006ec0:	441a      	add	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f7ff fdf5 	bl	8006ab8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ece:	f000 fd21 	bl	8007914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <prvAddNewTaskToReadyList+0xc0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00e      	beq.n	8006ef8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <prvAddNewTaskToReadyList+0xbc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d207      	bcs.n	8006ef8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <prvAddNewTaskToReadyList+0xd0>)
 8006eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	2400061c 	.word	0x2400061c
 8006f04:	2400051c 	.word	0x2400051c
 8006f08:	24000628 	.word	0x24000628
 8006f0c:	24000638 	.word	0x24000638
 8006f10:	24000624 	.word	0x24000624
 8006f14:	24000520 	.word	0x24000520
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d017      	beq.n	8006f5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <vTaskDelay+0x60>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <vTaskDelay+0x30>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	60bb      	str	r3, [r7, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f4c:	f000 f884 	bl	8007058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f50:	2100      	movs	r1, #0
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fb1e 	bl	8007594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f58:	f000 f88c 	bl	8007074 <xTaskResumeAll>
 8006f5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <vTaskDelay+0x64>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	24000644 	.word	0x24000644
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f92:	463a      	mov	r2, r7
 8006f94:	1d39      	adds	r1, r7, #4
 8006f96:	f107 0308 	add.w	r3, r7, #8
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7f9 fbda 	bl	8000754 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	2300      	movs	r3, #0
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	4921      	ldr	r1, [pc, #132]	; (8007038 <vTaskStartScheduler+0xb4>)
 8006fb4:	4821      	ldr	r0, [pc, #132]	; (800703c <vTaskStartScheduler+0xb8>)
 8006fb6:	f7ff fe06 	bl	8006bc6 <xTaskCreateStatic>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4a20      	ldr	r2, [pc, #128]	; (8007040 <vTaskStartScheduler+0xbc>)
 8006fbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fc0:	4b1f      	ldr	r3, [pc, #124]	; (8007040 <vTaskStartScheduler+0xbc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e001      	b.n	8006fd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d11b      	bne.n	8007010 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	613b      	str	r3, [r7, #16]
}
 8006fea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fec:	4b15      	ldr	r3, [pc, #84]	; (8007044 <vTaskStartScheduler+0xc0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	334c      	adds	r3, #76	; 0x4c
 8006ff2:	4a15      	ldr	r2, [pc, #84]	; (8007048 <vTaskStartScheduler+0xc4>)
 8006ff4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ff6:	4b15      	ldr	r3, [pc, #84]	; (800704c <vTaskStartScheduler+0xc8>)
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ffe:	4b14      	ldr	r3, [pc, #80]	; (8007050 <vTaskStartScheduler+0xcc>)
 8007000:	2201      	movs	r2, #1
 8007002:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007004:	4b13      	ldr	r3, [pc, #76]	; (8007054 <vTaskStartScheduler+0xd0>)
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800700a:	f000 fbb1 	bl	8007770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800700e:	e00e      	b.n	800702e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d10a      	bne.n	800702e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <vTaskStartScheduler+0xa8>
}
 800702e:	bf00      	nop
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	08008204 	.word	0x08008204
 800703c:	080073e1 	.word	0x080073e1
 8007040:	24000640 	.word	0x24000640
 8007044:	2400051c 	.word	0x2400051c
 8007048:	24000014 	.word	0x24000014
 800704c:	2400063c 	.word	0x2400063c
 8007050:	24000628 	.word	0x24000628
 8007054:	24000620 	.word	0x24000620

08007058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007058:	b480      	push	{r7}
 800705a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800705c:	4b04      	ldr	r3, [pc, #16]	; (8007070 <vTaskSuspendAll+0x18>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	4a03      	ldr	r2, [pc, #12]	; (8007070 <vTaskSuspendAll+0x18>)
 8007064:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007066:	bf00      	nop
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	24000644 	.word	0x24000644

08007074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007082:	4b41      	ldr	r3, [pc, #260]	; (8007188 <xTaskResumeAll+0x114>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	603b      	str	r3, [r7, #0]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070a0:	f000 fc08 	bl	80078b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070a4:	4b38      	ldr	r3, [pc, #224]	; (8007188 <xTaskResumeAll+0x114>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	4a37      	ldr	r2, [pc, #220]	; (8007188 <xTaskResumeAll+0x114>)
 80070ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ae:	4b36      	ldr	r3, [pc, #216]	; (8007188 <xTaskResumeAll+0x114>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d161      	bne.n	800717a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070b6:	4b35      	ldr	r3, [pc, #212]	; (800718c <xTaskResumeAll+0x118>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d05d      	beq.n	800717a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070be:	e02e      	b.n	800711e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c0:	4b33      	ldr	r3, [pc, #204]	; (8007190 <xTaskResumeAll+0x11c>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3318      	adds	r3, #24
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fd50 	bl	8006b72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3304      	adds	r3, #4
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fd4b 	bl	8006b72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	2201      	movs	r2, #1
 80070e2:	409a      	lsls	r2, r3
 80070e4:	4b2b      	ldr	r3, [pc, #172]	; (8007194 <xTaskResumeAll+0x120>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <xTaskResumeAll+0x120>)
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4a27      	ldr	r2, [pc, #156]	; (8007198 <xTaskResumeAll+0x124>)
 80070fc:	441a      	add	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3304      	adds	r3, #4
 8007102:	4619      	mov	r1, r3
 8007104:	4610      	mov	r0, r2
 8007106:	f7ff fcd7 	bl	8006ab8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710e:	4b23      	ldr	r3, [pc, #140]	; (800719c <xTaskResumeAll+0x128>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007118:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <xTaskResumeAll+0x12c>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800711e:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <xTaskResumeAll+0x11c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1cc      	bne.n	80070c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800712c:	f000 fa12 	bl	8007554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007130:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <xTaskResumeAll+0x130>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d010      	beq.n	800715e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800713c:	f000 f836 	bl	80071ac <xTaskIncrementTick>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007146:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <xTaskResumeAll+0x12c>)
 8007148:	2201      	movs	r2, #1
 800714a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3b01      	subs	r3, #1
 8007150:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f1      	bne.n	800713c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007158:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <xTaskResumeAll+0x130>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <xTaskResumeAll+0x12c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800716a:	4b0f      	ldr	r3, [pc, #60]	; (80071a8 <xTaskResumeAll+0x134>)
 800716c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800717a:	f000 fbcb 	bl	8007914 <vPortExitCritical>

	return xAlreadyYielded;
 800717e:	68bb      	ldr	r3, [r7, #8]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	24000644 	.word	0x24000644
 800718c:	2400061c 	.word	0x2400061c
 8007190:	240005dc 	.word	0x240005dc
 8007194:	24000624 	.word	0x24000624
 8007198:	24000520 	.word	0x24000520
 800719c:	2400051c 	.word	0x2400051c
 80071a0:	24000630 	.word	0x24000630
 80071a4:	2400062c 	.word	0x2400062c
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b6:	4b4e      	ldr	r3, [pc, #312]	; (80072f0 <xTaskIncrementTick+0x144>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 808e 	bne.w	80072dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071c0:	4b4c      	ldr	r3, [pc, #304]	; (80072f4 <xTaskIncrementTick+0x148>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071c8:	4a4a      	ldr	r2, [pc, #296]	; (80072f4 <xTaskIncrementTick+0x148>)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d120      	bne.n	8007216 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071d4:	4b48      	ldr	r3, [pc, #288]	; (80072f8 <xTaskIncrementTick+0x14c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <xTaskIncrementTick+0x46>
 80071f4:	4b40      	ldr	r3, [pc, #256]	; (80072f8 <xTaskIncrementTick+0x14c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	4b40      	ldr	r3, [pc, #256]	; (80072fc <xTaskIncrementTick+0x150>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3e      	ldr	r2, [pc, #248]	; (80072f8 <xTaskIncrementTick+0x14c>)
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	4a3e      	ldr	r2, [pc, #248]	; (80072fc <xTaskIncrementTick+0x150>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	4b3d      	ldr	r3, [pc, #244]	; (8007300 <xTaskIncrementTick+0x154>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	4a3c      	ldr	r2, [pc, #240]	; (8007300 <xTaskIncrementTick+0x154>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	f000 f99f 	bl	8007554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007216:	4b3b      	ldr	r3, [pc, #236]	; (8007304 <xTaskIncrementTick+0x158>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d348      	bcc.n	80072b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007220:	4b35      	ldr	r3, [pc, #212]	; (80072f8 <xTaskIncrementTick+0x14c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d104      	bne.n	8007234 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800722a:	4b36      	ldr	r3, [pc, #216]	; (8007304 <xTaskIncrementTick+0x158>)
 800722c:	f04f 32ff 	mov.w	r2, #4294967295
 8007230:	601a      	str	r2, [r3, #0]
					break;
 8007232:	e03e      	b.n	80072b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007234:	4b30      	ldr	r3, [pc, #192]	; (80072f8 <xTaskIncrementTick+0x14c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d203      	bcs.n	8007254 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800724c:	4a2d      	ldr	r2, [pc, #180]	; (8007304 <xTaskIncrementTick+0x158>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007252:	e02e      	b.n	80072b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3304      	adds	r3, #4
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fc8a 	bl	8006b72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	3318      	adds	r3, #24
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fc81 	bl	8006b72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	2201      	movs	r2, #1
 8007276:	409a      	lsls	r2, r3
 8007278:	4b23      	ldr	r3, [pc, #140]	; (8007308 <xTaskIncrementTick+0x15c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4313      	orrs	r3, r2
 800727e:	4a22      	ldr	r2, [pc, #136]	; (8007308 <xTaskIncrementTick+0x15c>)
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4a1f      	ldr	r2, [pc, #124]	; (800730c <xTaskIncrementTick+0x160>)
 8007290:	441a      	add	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7ff fc0d 	bl	8006ab8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <xTaskIncrementTick+0x164>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d3b9      	bcc.n	8007220 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072b0:	e7b6      	b.n	8007220 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072b2:	4b17      	ldr	r3, [pc, #92]	; (8007310 <xTaskIncrementTick+0x164>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	4914      	ldr	r1, [pc, #80]	; (800730c <xTaskIncrementTick+0x160>)
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d901      	bls.n	80072ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072ce:	4b11      	ldr	r3, [pc, #68]	; (8007314 <xTaskIncrementTick+0x168>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80072d6:	2301      	movs	r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	e004      	b.n	80072e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072dc:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <xTaskIncrementTick+0x16c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3301      	adds	r3, #1
 80072e2:	4a0d      	ldr	r2, [pc, #52]	; (8007318 <xTaskIncrementTick+0x16c>)
 80072e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072e6:	697b      	ldr	r3, [r7, #20]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	24000644 	.word	0x24000644
 80072f4:	24000620 	.word	0x24000620
 80072f8:	240005d4 	.word	0x240005d4
 80072fc:	240005d8 	.word	0x240005d8
 8007300:	24000634 	.word	0x24000634
 8007304:	2400063c 	.word	0x2400063c
 8007308:	24000624 	.word	0x24000624
 800730c:	24000520 	.word	0x24000520
 8007310:	2400051c 	.word	0x2400051c
 8007314:	24000630 	.word	0x24000630
 8007318:	2400062c 	.word	0x2400062c

0800731c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007322:	4b29      	ldr	r3, [pc, #164]	; (80073c8 <vTaskSwitchContext+0xac>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800732a:	4b28      	ldr	r3, [pc, #160]	; (80073cc <vTaskSwitchContext+0xb0>)
 800732c:	2201      	movs	r2, #1
 800732e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007330:	e044      	b.n	80073bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007332:	4b26      	ldr	r3, [pc, #152]	; (80073cc <vTaskSwitchContext+0xb0>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <vTaskSwitchContext+0xb4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	fab3 f383 	clz	r3, r3
 8007344:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007346:	7afb      	ldrb	r3, [r7, #11]
 8007348:	f1c3 031f 	rsb	r3, r3, #31
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	4921      	ldr	r1, [pc, #132]	; (80073d4 <vTaskSwitchContext+0xb8>)
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	607b      	str	r3, [r7, #4]
}
 8007374:	bf00      	nop
 8007376:	e7fe      	b.n	8007376 <vTaskSwitchContext+0x5a>
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4a14      	ldr	r2, [pc, #80]	; (80073d4 <vTaskSwitchContext+0xb8>)
 8007384:	4413      	add	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	605a      	str	r2, [r3, #4]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3308      	adds	r3, #8
 800739a:	429a      	cmp	r2, r3
 800739c:	d104      	bne.n	80073a8 <vTaskSwitchContext+0x8c>
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <vTaskSwitchContext+0xbc>)
 80073b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <vTaskSwitchContext+0xbc>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	334c      	adds	r3, #76	; 0x4c
 80073b8:	4a08      	ldr	r2, [pc, #32]	; (80073dc <vTaskSwitchContext+0xc0>)
 80073ba:	6013      	str	r3, [r2, #0]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	24000644 	.word	0x24000644
 80073cc:	24000630 	.word	0x24000630
 80073d0:	24000624 	.word	0x24000624
 80073d4:	24000520 	.word	0x24000520
 80073d8:	2400051c 	.word	0x2400051c
 80073dc:	24000014 	.word	0x24000014

080073e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073e8:	f000 f852 	bl	8007490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <prvIdleTask+0x28>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d9f9      	bls.n	80073e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <prvIdleTask+0x2c>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007404:	e7f0      	b.n	80073e8 <prvIdleTask+0x8>
 8007406:	bf00      	nop
 8007408:	24000520 	.word	0x24000520
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	e00c      	b.n	8007436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <prvInitialiseTaskLists+0x60>)
 8007428:	4413      	add	r3, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fb17 	bl	8006a5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3301      	adds	r3, #1
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b06      	cmp	r3, #6
 800743a:	d9ef      	bls.n	800741c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800743c:	480d      	ldr	r0, [pc, #52]	; (8007474 <prvInitialiseTaskLists+0x64>)
 800743e:	f7ff fb0e 	bl	8006a5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007442:	480d      	ldr	r0, [pc, #52]	; (8007478 <prvInitialiseTaskLists+0x68>)
 8007444:	f7ff fb0b 	bl	8006a5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007448:	480c      	ldr	r0, [pc, #48]	; (800747c <prvInitialiseTaskLists+0x6c>)
 800744a:	f7ff fb08 	bl	8006a5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800744e:	480c      	ldr	r0, [pc, #48]	; (8007480 <prvInitialiseTaskLists+0x70>)
 8007450:	f7ff fb05 	bl	8006a5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007454:	480b      	ldr	r0, [pc, #44]	; (8007484 <prvInitialiseTaskLists+0x74>)
 8007456:	f7ff fb02 	bl	8006a5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <prvInitialiseTaskLists+0x78>)
 800745c:	4a05      	ldr	r2, [pc, #20]	; (8007474 <prvInitialiseTaskLists+0x64>)
 800745e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <prvInitialiseTaskLists+0x7c>)
 8007462:	4a05      	ldr	r2, [pc, #20]	; (8007478 <prvInitialiseTaskLists+0x68>)
 8007464:	601a      	str	r2, [r3, #0]
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	24000520 	.word	0x24000520
 8007474:	240005ac 	.word	0x240005ac
 8007478:	240005c0 	.word	0x240005c0
 800747c:	240005dc 	.word	0x240005dc
 8007480:	240005f0 	.word	0x240005f0
 8007484:	24000608 	.word	0x24000608
 8007488:	240005d4 	.word	0x240005d4
 800748c:	240005d8 	.word	0x240005d8

08007490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007496:	e019      	b.n	80074cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007498:	f000 fa0c 	bl	80078b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749c:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <prvCheckTasksWaitingTermination+0x50>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff fb62 	bl	8006b72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <prvCheckTasksWaitingTermination+0x54>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	4a0b      	ldr	r2, [pc, #44]	; (80074e4 <prvCheckTasksWaitingTermination+0x54>)
 80074b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a0a      	ldr	r2, [pc, #40]	; (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074c2:	f000 fa27 	bl	8007914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f810 	bl	80074ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e1      	bne.n	8007498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	240005f0 	.word	0x240005f0
 80074e4:	2400061c 	.word	0x2400061c
 80074e8:	24000604 	.word	0x24000604

080074ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	334c      	adds	r3, #76	; 0x4c
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fdd1 	bl	80080a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d108      	bne.n	800751a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fb7f 	bl	8007c10 <vPortFree>
				vPortFree( pxTCB );
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fb7c 	bl	8007c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007518:	e018      	b.n	800754c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007520:	2b01      	cmp	r3, #1
 8007522:	d103      	bne.n	800752c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fb73 	bl	8007c10 <vPortFree>
	}
 800752a:	e00f      	b.n	800754c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007532:	2b02      	cmp	r3, #2
 8007534:	d00a      	beq.n	800754c <prvDeleteTCB+0x60>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <prvDeleteTCB+0x5e>
	}
 800754c:	bf00      	nop
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <prvResetNextTaskUnblockTime+0x38>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007564:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <prvResetNextTaskUnblockTime+0x3c>)
 8007566:	f04f 32ff 	mov.w	r2, #4294967295
 800756a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800756c:	e008      	b.n	8007580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <prvResetNextTaskUnblockTime+0x38>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4a04      	ldr	r2, [pc, #16]	; (8007590 <prvResetNextTaskUnblockTime+0x3c>)
 800757e:	6013      	str	r3, [r2, #0]
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	240005d4 	.word	0x240005d4
 8007590:	2400063c 	.word	0x2400063c

08007594 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800759e:	4b29      	ldr	r3, [pc, #164]	; (8007644 <prvAddCurrentTaskToDelayedList+0xb0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075a4:	4b28      	ldr	r3, [pc, #160]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3304      	adds	r3, #4
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff fae1 	bl	8006b72 <uxListRemove>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80075b6:	4b24      	ldr	r3, [pc, #144]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	2201      	movs	r2, #1
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	43da      	mvns	r2, r3
 80075c4:	4b21      	ldr	r3, [pc, #132]	; (800764c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4013      	ands	r3, r2
 80075ca:	4a20      	ldr	r2, [pc, #128]	; (800764c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d10a      	bne.n	80075ec <prvAddCurrentTaskToDelayedList+0x58>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075dc:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4619      	mov	r1, r3
 80075e4:	481a      	ldr	r0, [pc, #104]	; (8007650 <prvAddCurrentTaskToDelayedList+0xbc>)
 80075e6:	f7ff fa67 	bl	8006ab8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075ea:	e026      	b.n	800763a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4413      	add	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075f4:	4b14      	ldr	r3, [pc, #80]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	429a      	cmp	r2, r3
 8007602:	d209      	bcs.n	8007618 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007604:	4b13      	ldr	r3, [pc, #76]	; (8007654 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f7ff fa75 	bl	8006b00 <vListInsert>
}
 8007616:	e010      	b.n	800763a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <prvAddCurrentTaskToDelayedList+0xc4>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f7ff fa6b 	bl	8006b00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800762a:	4b0c      	ldr	r3, [pc, #48]	; (800765c <prvAddCurrentTaskToDelayedList+0xc8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	429a      	cmp	r2, r3
 8007632:	d202      	bcs.n	800763a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007634:	4a09      	ldr	r2, [pc, #36]	; (800765c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	6013      	str	r3, [r2, #0]
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	24000620 	.word	0x24000620
 8007648:	2400051c 	.word	0x2400051c
 800764c:	24000624 	.word	0x24000624
 8007650:	24000608 	.word	0x24000608
 8007654:	240005d8 	.word	0x240005d8
 8007658:	240005d4 	.word	0x240005d4
 800765c:	2400063c 	.word	0x2400063c

08007660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3b04      	subs	r3, #4
 8007670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3b04      	subs	r3, #4
 800767e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3b04      	subs	r3, #4
 800768e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007690:	4a0c      	ldr	r2, [pc, #48]	; (80076c4 <pxPortInitialiseStack+0x64>)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3b14      	subs	r3, #20
 800769a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3b04      	subs	r3, #4
 80076a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f06f 0202 	mvn.w	r2, #2
 80076ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3b20      	subs	r3, #32
 80076b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076b6:	68fb      	ldr	r3, [r7, #12]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	080076c9 	.word	0x080076c9

080076c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <prvTaskExitError+0x54>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d00a      	beq.n	80076f2 <prvTaskExitError+0x2a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	60fb      	str	r3, [r7, #12]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <prvTaskExitError+0x28>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
}
 8007704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007706:	bf00      	nop
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0fc      	beq.n	8007708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	24000010 	.word	0x24000010

08007720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <pxCurrentTCBConst2>)
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	f380 8809 	msr	PSP, r0
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	4770      	bx	lr
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst2>:
 8007740:	2400051c 	.word	0x2400051c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007748:	4808      	ldr	r0, [pc, #32]	; (800776c <prvPortStartFirstTask+0x24>)
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f380 8808 	msr	MSP, r0
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8814 	msr	CONTROL, r0
 800775a:	b662      	cpsie	i
 800775c:	b661      	cpsie	f
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	df00      	svc	0
 8007768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800776a:	bf00      	nop
 800776c:	e000ed08 	.word	0xe000ed08

08007770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007776:	4b46      	ldr	r3, [pc, #280]	; (8007890 <xPortStartScheduler+0x120>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a46      	ldr	r2, [pc, #280]	; (8007894 <xPortStartScheduler+0x124>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10a      	bne.n	8007796 <xPortStartScheduler+0x26>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	613b      	str	r3, [r7, #16]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007796:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <xPortStartScheduler+0x120>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a3f      	ldr	r2, [pc, #252]	; (8007898 <xPortStartScheduler+0x128>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10a      	bne.n	80077b6 <xPortStartScheduler+0x46>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	60fb      	str	r3, [r7, #12]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077b6:	4b39      	ldr	r3, [pc, #228]	; (800789c <xPortStartScheduler+0x12c>)
 80077b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b31      	ldr	r3, [pc, #196]	; (80078a0 <xPortStartScheduler+0x130>)
 80077dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077de:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <xPortStartScheduler+0x134>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077e4:	e009      	b.n	80077fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077e6:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <xPortStartScheduler+0x134>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4a2d      	ldr	r2, [pc, #180]	; (80078a4 <xPortStartScheduler+0x134>)
 80077ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b80      	cmp	r3, #128	; 0x80
 8007804:	d0ef      	beq.n	80077e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007806:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <xPortStartScheduler+0x134>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f1c3 0307 	rsb	r3, r3, #7
 800780e:	2b04      	cmp	r3, #4
 8007810:	d00a      	beq.n	8007828 <xPortStartScheduler+0xb8>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60bb      	str	r3, [r7, #8]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007828:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <xPortStartScheduler+0x134>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <xPortStartScheduler+0x134>)
 8007830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <xPortStartScheduler+0x134>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800783a:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <xPortStartScheduler+0x134>)
 800783c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007846:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <xPortStartScheduler+0x138>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <xPortStartScheduler+0x138>)
 800784c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <xPortStartScheduler+0x138>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <xPortStartScheduler+0x138>)
 8007858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800785c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800785e:	f000 f8dd 	bl	8007a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <xPortStartScheduler+0x13c>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007868:	f000 f8fc 	bl	8007a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800786c:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <xPortStartScheduler+0x140>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0f      	ldr	r2, [pc, #60]	; (80078b0 <xPortStartScheduler+0x140>)
 8007872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007878:	f7ff ff66 	bl	8007748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800787c:	f7ff fd4e 	bl	800731c <vTaskSwitchContext>
	prvTaskExitError();
 8007880:	f7ff ff22 	bl	80076c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	e000ed00 	.word	0xe000ed00
 8007894:	410fc271 	.word	0x410fc271
 8007898:	410fc270 	.word	0x410fc270
 800789c:	e000e400 	.word	0xe000e400
 80078a0:	24000648 	.word	0x24000648
 80078a4:	2400064c 	.word	0x2400064c
 80078a8:	e000ed20 	.word	0xe000ed20
 80078ac:	24000010 	.word	0x24000010
 80078b0:	e000ef34 	.word	0xe000ef34

080078b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	607b      	str	r3, [r7, #4]
}
 80078cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <vPortEnterCritical+0x58>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a0d      	ldr	r2, [pc, #52]	; (800790c <vPortEnterCritical+0x58>)
 80078d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <vPortEnterCritical+0x58>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10f      	bne.n	8007900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <vPortEnterCritical+0x5c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <vPortEnterCritical+0x4c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	603b      	str	r3, [r7, #0]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <vPortEnterCritical+0x4a>
	}
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	24000010 	.word	0x24000010
 8007910:	e000ed04 	.word	0xe000ed04

08007914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <vPortExitCritical+0x50>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <vPortExitCritical+0x24>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	607b      	str	r3, [r7, #4]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007938:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <vPortExitCritical+0x50>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3b01      	subs	r3, #1
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <vPortExitCritical+0x50>)
 8007940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <vPortExitCritical+0x50>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <vPortExitCritical+0x42>
 800794a:	2300      	movs	r3, #0
 800794c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	24000010 	.word	0x24000010
	...

08007970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007970:	f3ef 8009 	mrs	r0, PSP
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <pxCurrentTCBConst>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f01e 0f10 	tst.w	lr, #16
 8007980:	bf08      	it	eq
 8007982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	6010      	str	r0, [r2, #0]
 800798c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007994:	f380 8811 	msr	BASEPRI, r0
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f7ff fcbc 	bl	800731c <vTaskSwitchContext>
 80079a4:	f04f 0000 	mov.w	r0, #0
 80079a8:	f380 8811 	msr	BASEPRI, r0
 80079ac:	bc09      	pop	{r0, r3}
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	6808      	ldr	r0, [r1, #0]
 80079b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b6:	f01e 0f10 	tst.w	lr, #16
 80079ba:	bf08      	it	eq
 80079bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079c0:	f380 8809 	msr	PSP, r0
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst>:
 80079d0:	2400051c 	.word	0x2400051c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079f2:	f7ff fbdb 	bl	80071ac <xTaskIncrementTick>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <SysTick_Handler+0x40>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f383 8811 	msr	BASEPRI, r3
}
 8007a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <vPortSetupTimerInterrupt+0x38>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <vPortSetupTimerInterrupt+0x3c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <vPortSetupTimerInterrupt+0x40>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <vPortSetupTimerInterrupt+0x44>)
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a3e:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	e000e010 	.word	0xe000e010
 8007a54:	e000e018 	.word	0xe000e018
 8007a58:	24000000 	.word	0x24000000
 8007a5c:	10624dd3 	.word	0x10624dd3
 8007a60:	e000e014 	.word	0xe000e014

08007a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a74 <vPortEnableVFP+0x10>
 8007a68:	6801      	ldr	r1, [r0, #0]
 8007a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a6e:	6001      	str	r1, [r0, #0]
 8007a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a72:	bf00      	nop
 8007a74:	e000ed88 	.word	0xe000ed88

08007a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	; 0x28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a84:	f7ff fae8 	bl	8007058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a88:	4b5b      	ldr	r3, [pc, #364]	; (8007bf8 <pvPortMalloc+0x180>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a90:	f000 f920 	bl	8007cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a94:	4b59      	ldr	r3, [pc, #356]	; (8007bfc <pvPortMalloc+0x184>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 8093 	bne.w	8007bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01d      	beq.n	8007ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d014      	beq.n	8007ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f023 0307 	bic.w	r3, r3, #7
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	617b      	str	r3, [r7, #20]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d06e      	beq.n	8007bc8 <pvPortMalloc+0x150>
 8007aea:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <pvPortMalloc+0x188>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d869      	bhi.n	8007bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007af4:	4b43      	ldr	r3, [pc, #268]	; (8007c04 <pvPortMalloc+0x18c>)
 8007af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007af8:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <pvPortMalloc+0x18c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007afe:	e004      	b.n	8007b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <pvPortMalloc+0xa4>
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1f1      	bne.n	8007b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <pvPortMalloc+0x180>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d050      	beq.n	8007bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	4413      	add	r3, r2
 8007b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	2308      	movs	r3, #8
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d91f      	bls.n	8007b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <pvPortMalloc+0xf8>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	613b      	str	r3, [r7, #16]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b82:	69b8      	ldr	r0, [r7, #24]
 8007b84:	f000 f908 	bl	8007d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <pvPortMalloc+0x188>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <pvPortMalloc+0x188>)
 8007b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b96:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <pvPortMalloc+0x188>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <pvPortMalloc+0x190>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d203      	bcs.n	8007baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ba2:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <pvPortMalloc+0x188>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <pvPortMalloc+0x190>)
 8007ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <pvPortMalloc+0x184>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <pvPortMalloc+0x194>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <pvPortMalloc+0x194>)
 8007bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bc8:	f7ff fa54 	bl	8007074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <pvPortMalloc+0x174>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60fb      	str	r3, [r7, #12]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <pvPortMalloc+0x172>
	return pvReturn;
 8007bec:	69fb      	ldr	r3, [r7, #28]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	24004258 	.word	0x24004258
 8007bfc:	2400426c 	.word	0x2400426c
 8007c00:	2400425c 	.word	0x2400425c
 8007c04:	24004250 	.word	0x24004250
 8007c08:	24004260 	.word	0x24004260
 8007c0c:	24004264 	.word	0x24004264

08007c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d04d      	beq.n	8007cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c22:	2308      	movs	r3, #8
 8007c24:	425b      	negs	r3, r3
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4b24      	ldr	r3, [pc, #144]	; (8007cc8 <vPortFree+0xb8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <vPortFree+0x44>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	60fb      	str	r3, [r7, #12]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <vPortFree+0x62>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60bb      	str	r3, [r7, #8]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <vPortFree+0xb8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01e      	beq.n	8007cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11a      	bne.n	8007cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <vPortFree+0xb8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c98:	f7ff f9de 	bl	8007058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <vPortFree+0xbc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4a09      	ldr	r2, [pc, #36]	; (8007ccc <vPortFree+0xbc>)
 8007ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007caa:	6938      	ldr	r0, [r7, #16]
 8007cac:	f000 f874 	bl	8007d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <vPortFree+0xc0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	4a06      	ldr	r2, [pc, #24]	; (8007cd0 <vPortFree+0xc0>)
 8007cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cba:	f7ff f9db 	bl	8007074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cbe:	bf00      	nop
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	2400426c 	.word	0x2400426c
 8007ccc:	2400425c 	.word	0x2400425c
 8007cd0:	24004268 	.word	0x24004268

08007cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ce0:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <prvHeapInit+0xac>)
 8007ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3307      	adds	r3, #7
 8007cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	4a1f      	ldr	r2, [pc, #124]	; (8007d80 <prvHeapInit+0xac>)
 8007d04:	4413      	add	r3, r2
 8007d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <prvHeapInit+0xb0>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <prvHeapInit+0xb0>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d20:	2208      	movs	r2, #8
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0307 	bic.w	r3, r3, #7
 8007d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <prvHeapInit+0xb4>)
 8007d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <prvHeapInit+0xb4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <prvHeapInit+0xb4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d54:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <prvHeapInit+0xb4>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <prvHeapInit+0xb8>)
 8007d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <prvHeapInit+0xbc>)
 8007d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d6c:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <prvHeapInit+0xc0>)
 8007d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d72:	601a      	str	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	24000650 	.word	0x24000650
 8007d84:	24004250 	.word	0x24004250
 8007d88:	24004258 	.word	0x24004258
 8007d8c:	24004260 	.word	0x24004260
 8007d90:	2400425c 	.word	0x2400425c
 8007d94:	2400426c 	.word	0x2400426c

08007d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <prvInsertBlockIntoFreeList+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	e002      	b.n	8007dac <prvInsertBlockIntoFreeList+0x14>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d8f7      	bhi.n	8007da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d108      	bne.n	8007dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	441a      	add	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d118      	bne.n	8007e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <prvInsertBlockIntoFreeList+0xb0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d00d      	beq.n	8007e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	441a      	add	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	e008      	b.n	8007e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvInsertBlockIntoFreeList+0xb0>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e003      	b.n	8007e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d002      	beq.n	8007e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e36:	bf00      	nop
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	24004250 	.word	0x24004250
 8007e48:	24004258 	.word	0x24004258

08007e4c <__errno>:
 8007e4c:	4b01      	ldr	r3, [pc, #4]	; (8007e54 <__errno+0x8>)
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	24000014 	.word	0x24000014

08007e58 <__libc_init_array>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	4d0d      	ldr	r5, [pc, #52]	; (8007e90 <__libc_init_array+0x38>)
 8007e5c:	4c0d      	ldr	r4, [pc, #52]	; (8007e94 <__libc_init_array+0x3c>)
 8007e5e:	1b64      	subs	r4, r4, r5
 8007e60:	10a4      	asrs	r4, r4, #2
 8007e62:	2600      	movs	r6, #0
 8007e64:	42a6      	cmp	r6, r4
 8007e66:	d109      	bne.n	8007e7c <__libc_init_array+0x24>
 8007e68:	4d0b      	ldr	r5, [pc, #44]	; (8007e98 <__libc_init_array+0x40>)
 8007e6a:	4c0c      	ldr	r4, [pc, #48]	; (8007e9c <__libc_init_array+0x44>)
 8007e6c:	f000 f990 	bl	8008190 <_init>
 8007e70:	1b64      	subs	r4, r4, r5
 8007e72:	10a4      	asrs	r4, r4, #2
 8007e74:	2600      	movs	r6, #0
 8007e76:	42a6      	cmp	r6, r4
 8007e78:	d105      	bne.n	8007e86 <__libc_init_array+0x2e>
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e80:	4798      	blx	r3
 8007e82:	3601      	adds	r6, #1
 8007e84:	e7ee      	b.n	8007e64 <__libc_init_array+0xc>
 8007e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8a:	4798      	blx	r3
 8007e8c:	3601      	adds	r6, #1
 8007e8e:	e7f2      	b.n	8007e76 <__libc_init_array+0x1e>
 8007e90:	080082ac 	.word	0x080082ac
 8007e94:	080082ac 	.word	0x080082ac
 8007e98:	080082ac 	.word	0x080082ac
 8007e9c:	080082b0 	.word	0x080082b0

08007ea0 <__retarget_lock_acquire_recursive>:
 8007ea0:	4770      	bx	lr

08007ea2 <__retarget_lock_release_recursive>:
 8007ea2:	4770      	bx	lr

08007ea4 <malloc>:
 8007ea4:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <malloc+0xc>)
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	f000 b877 	b.w	8007f9c <_malloc_r>
 8007eae:	bf00      	nop
 8007eb0:	24000014 	.word	0x24000014

08007eb4 <memset>:
 8007eb4:	4402      	add	r2, r0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d100      	bne.n	8007ebe <memset+0xa>
 8007ebc:	4770      	bx	lr
 8007ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ec2:	e7f9      	b.n	8007eb8 <memset+0x4>

08007ec4 <_free_r>:
 8007ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d044      	beq.n	8007f54 <_free_r+0x90>
 8007eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ece:	9001      	str	r0, [sp, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ed6:	bfb8      	it	lt
 8007ed8:	18e4      	addlt	r4, r4, r3
 8007eda:	f000 f94d 	bl	8008178 <__malloc_lock>
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <_free_r+0x94>)
 8007ee0:	9801      	ldr	r0, [sp, #4]
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	b933      	cbnz	r3, 8007ef4 <_free_r+0x30>
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	6014      	str	r4, [r2, #0]
 8007eea:	b003      	add	sp, #12
 8007eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ef0:	f000 b948 	b.w	8008184 <__malloc_unlock>
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	d908      	bls.n	8007f0a <_free_r+0x46>
 8007ef8:	6825      	ldr	r5, [r4, #0]
 8007efa:	1961      	adds	r1, r4, r5
 8007efc:	428b      	cmp	r3, r1
 8007efe:	bf01      	itttt	eq
 8007f00:	6819      	ldreq	r1, [r3, #0]
 8007f02:	685b      	ldreq	r3, [r3, #4]
 8007f04:	1949      	addeq	r1, r1, r5
 8007f06:	6021      	streq	r1, [r4, #0]
 8007f08:	e7ed      	b.n	8007ee6 <_free_r+0x22>
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	b10b      	cbz	r3, 8007f14 <_free_r+0x50>
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	d9fa      	bls.n	8007f0a <_free_r+0x46>
 8007f14:	6811      	ldr	r1, [r2, #0]
 8007f16:	1855      	adds	r5, r2, r1
 8007f18:	42a5      	cmp	r5, r4
 8007f1a:	d10b      	bne.n	8007f34 <_free_r+0x70>
 8007f1c:	6824      	ldr	r4, [r4, #0]
 8007f1e:	4421      	add	r1, r4
 8007f20:	1854      	adds	r4, r2, r1
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	6011      	str	r1, [r2, #0]
 8007f26:	d1e0      	bne.n	8007eea <_free_r+0x26>
 8007f28:	681c      	ldr	r4, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	6053      	str	r3, [r2, #4]
 8007f2e:	4421      	add	r1, r4
 8007f30:	6011      	str	r1, [r2, #0]
 8007f32:	e7da      	b.n	8007eea <_free_r+0x26>
 8007f34:	d902      	bls.n	8007f3c <_free_r+0x78>
 8007f36:	230c      	movs	r3, #12
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	e7d6      	b.n	8007eea <_free_r+0x26>
 8007f3c:	6825      	ldr	r5, [r4, #0]
 8007f3e:	1961      	adds	r1, r4, r5
 8007f40:	428b      	cmp	r3, r1
 8007f42:	bf04      	itt	eq
 8007f44:	6819      	ldreq	r1, [r3, #0]
 8007f46:	685b      	ldreq	r3, [r3, #4]
 8007f48:	6063      	str	r3, [r4, #4]
 8007f4a:	bf04      	itt	eq
 8007f4c:	1949      	addeq	r1, r1, r5
 8007f4e:	6021      	streq	r1, [r4, #0]
 8007f50:	6054      	str	r4, [r2, #4]
 8007f52:	e7ca      	b.n	8007eea <_free_r+0x26>
 8007f54:	b003      	add	sp, #12
 8007f56:	bd30      	pop	{r4, r5, pc}
 8007f58:	24004274 	.word	0x24004274

08007f5c <sbrk_aligned>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4e0e      	ldr	r6, [pc, #56]	; (8007f98 <sbrk_aligned+0x3c>)
 8007f60:	460c      	mov	r4, r1
 8007f62:	6831      	ldr	r1, [r6, #0]
 8007f64:	4605      	mov	r5, r0
 8007f66:	b911      	cbnz	r1, 8007f6e <sbrk_aligned+0x12>
 8007f68:	f000 f8f6 	bl	8008158 <_sbrk_r>
 8007f6c:	6030      	str	r0, [r6, #0]
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 f8f1 	bl	8008158 <_sbrk_r>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	d00a      	beq.n	8007f90 <sbrk_aligned+0x34>
 8007f7a:	1cc4      	adds	r4, r0, #3
 8007f7c:	f024 0403 	bic.w	r4, r4, #3
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d007      	beq.n	8007f94 <sbrk_aligned+0x38>
 8007f84:	1a21      	subs	r1, r4, r0
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 f8e6 	bl	8008158 <_sbrk_r>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d101      	bne.n	8007f94 <sbrk_aligned+0x38>
 8007f90:	f04f 34ff 	mov.w	r4, #4294967295
 8007f94:	4620      	mov	r0, r4
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	24004278 	.word	0x24004278

08007f9c <_malloc_r>:
 8007f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa0:	1ccd      	adds	r5, r1, #3
 8007fa2:	f025 0503 	bic.w	r5, r5, #3
 8007fa6:	3508      	adds	r5, #8
 8007fa8:	2d0c      	cmp	r5, #12
 8007faa:	bf38      	it	cc
 8007fac:	250c      	movcc	r5, #12
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	db01      	blt.n	8007fb8 <_malloc_r+0x1c>
 8007fb4:	42a9      	cmp	r1, r5
 8007fb6:	d905      	bls.n	8007fc4 <_malloc_r+0x28>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc4:	4e2e      	ldr	r6, [pc, #184]	; (8008080 <_malloc_r+0xe4>)
 8007fc6:	f000 f8d7 	bl	8008178 <__malloc_lock>
 8007fca:	6833      	ldr	r3, [r6, #0]
 8007fcc:	461c      	mov	r4, r3
 8007fce:	bb34      	cbnz	r4, 800801e <_malloc_r+0x82>
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f7ff ffc2 	bl	8007f5c <sbrk_aligned>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	4604      	mov	r4, r0
 8007fdc:	d14d      	bne.n	800807a <_malloc_r+0xde>
 8007fde:	6834      	ldr	r4, [r6, #0]
 8007fe0:	4626      	mov	r6, r4
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	d140      	bne.n	8008068 <_malloc_r+0xcc>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4638      	mov	r0, r7
 8007fec:	eb04 0803 	add.w	r8, r4, r3
 8007ff0:	f000 f8b2 	bl	8008158 <_sbrk_r>
 8007ff4:	4580      	cmp	r8, r0
 8007ff6:	d13a      	bne.n	800806e <_malloc_r+0xd2>
 8007ff8:	6821      	ldr	r1, [r4, #0]
 8007ffa:	3503      	adds	r5, #3
 8007ffc:	1a6d      	subs	r5, r5, r1
 8007ffe:	f025 0503 	bic.w	r5, r5, #3
 8008002:	3508      	adds	r5, #8
 8008004:	2d0c      	cmp	r5, #12
 8008006:	bf38      	it	cc
 8008008:	250c      	movcc	r5, #12
 800800a:	4629      	mov	r1, r5
 800800c:	4638      	mov	r0, r7
 800800e:	f7ff ffa5 	bl	8007f5c <sbrk_aligned>
 8008012:	3001      	adds	r0, #1
 8008014:	d02b      	beq.n	800806e <_malloc_r+0xd2>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	442b      	add	r3, r5
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	e00e      	b.n	800803c <_malloc_r+0xa0>
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	1b52      	subs	r2, r2, r5
 8008022:	d41e      	bmi.n	8008062 <_malloc_r+0xc6>
 8008024:	2a0b      	cmp	r2, #11
 8008026:	d916      	bls.n	8008056 <_malloc_r+0xba>
 8008028:	1961      	adds	r1, r4, r5
 800802a:	42a3      	cmp	r3, r4
 800802c:	6025      	str	r5, [r4, #0]
 800802e:	bf18      	it	ne
 8008030:	6059      	strne	r1, [r3, #4]
 8008032:	6863      	ldr	r3, [r4, #4]
 8008034:	bf08      	it	eq
 8008036:	6031      	streq	r1, [r6, #0]
 8008038:	5162      	str	r2, [r4, r5]
 800803a:	604b      	str	r3, [r1, #4]
 800803c:	4638      	mov	r0, r7
 800803e:	f104 060b 	add.w	r6, r4, #11
 8008042:	f000 f89f 	bl	8008184 <__malloc_unlock>
 8008046:	f026 0607 	bic.w	r6, r6, #7
 800804a:	1d23      	adds	r3, r4, #4
 800804c:	1af2      	subs	r2, r6, r3
 800804e:	d0b6      	beq.n	8007fbe <_malloc_r+0x22>
 8008050:	1b9b      	subs	r3, r3, r6
 8008052:	50a3      	str	r3, [r4, r2]
 8008054:	e7b3      	b.n	8007fbe <_malloc_r+0x22>
 8008056:	6862      	ldr	r2, [r4, #4]
 8008058:	42a3      	cmp	r3, r4
 800805a:	bf0c      	ite	eq
 800805c:	6032      	streq	r2, [r6, #0]
 800805e:	605a      	strne	r2, [r3, #4]
 8008060:	e7ec      	b.n	800803c <_malloc_r+0xa0>
 8008062:	4623      	mov	r3, r4
 8008064:	6864      	ldr	r4, [r4, #4]
 8008066:	e7b2      	b.n	8007fce <_malloc_r+0x32>
 8008068:	4634      	mov	r4, r6
 800806a:	6876      	ldr	r6, [r6, #4]
 800806c:	e7b9      	b.n	8007fe2 <_malloc_r+0x46>
 800806e:	230c      	movs	r3, #12
 8008070:	603b      	str	r3, [r7, #0]
 8008072:	4638      	mov	r0, r7
 8008074:	f000 f886 	bl	8008184 <__malloc_unlock>
 8008078:	e7a1      	b.n	8007fbe <_malloc_r+0x22>
 800807a:	6025      	str	r5, [r4, #0]
 800807c:	e7de      	b.n	800803c <_malloc_r+0xa0>
 800807e:	bf00      	nop
 8008080:	24004274 	.word	0x24004274

08008084 <cleanup_glue>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	460c      	mov	r4, r1
 8008088:	6809      	ldr	r1, [r1, #0]
 800808a:	4605      	mov	r5, r0
 800808c:	b109      	cbz	r1, 8008092 <cleanup_glue+0xe>
 800808e:	f7ff fff9 	bl	8008084 <cleanup_glue>
 8008092:	4621      	mov	r1, r4
 8008094:	4628      	mov	r0, r5
 8008096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800809a:	f7ff bf13 	b.w	8007ec4 <_free_r>
	...

080080a0 <_reclaim_reent>:
 80080a0:	4b2c      	ldr	r3, [pc, #176]	; (8008154 <_reclaim_reent+0xb4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4283      	cmp	r3, r0
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	d051      	beq.n	8008150 <_reclaim_reent+0xb0>
 80080ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80080ae:	b143      	cbz	r3, 80080c2 <_reclaim_reent+0x22>
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d14a      	bne.n	800814c <_reclaim_reent+0xac>
 80080b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b8:	6819      	ldr	r1, [r3, #0]
 80080ba:	b111      	cbz	r1, 80080c2 <_reclaim_reent+0x22>
 80080bc:	4620      	mov	r0, r4
 80080be:	f7ff ff01 	bl	8007ec4 <_free_r>
 80080c2:	6961      	ldr	r1, [r4, #20]
 80080c4:	b111      	cbz	r1, 80080cc <_reclaim_reent+0x2c>
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7ff fefc 	bl	8007ec4 <_free_r>
 80080cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080ce:	b111      	cbz	r1, 80080d6 <_reclaim_reent+0x36>
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff fef7 	bl	8007ec4 <_free_r>
 80080d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080d8:	b111      	cbz	r1, 80080e0 <_reclaim_reent+0x40>
 80080da:	4620      	mov	r0, r4
 80080dc:	f7ff fef2 	bl	8007ec4 <_free_r>
 80080e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80080e2:	b111      	cbz	r1, 80080ea <_reclaim_reent+0x4a>
 80080e4:	4620      	mov	r0, r4
 80080e6:	f7ff feed 	bl	8007ec4 <_free_r>
 80080ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080ec:	b111      	cbz	r1, 80080f4 <_reclaim_reent+0x54>
 80080ee:	4620      	mov	r0, r4
 80080f0:	f7ff fee8 	bl	8007ec4 <_free_r>
 80080f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80080f6:	b111      	cbz	r1, 80080fe <_reclaim_reent+0x5e>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7ff fee3 	bl	8007ec4 <_free_r>
 80080fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008100:	b111      	cbz	r1, 8008108 <_reclaim_reent+0x68>
 8008102:	4620      	mov	r0, r4
 8008104:	f7ff fede 	bl	8007ec4 <_free_r>
 8008108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800810a:	b111      	cbz	r1, 8008112 <_reclaim_reent+0x72>
 800810c:	4620      	mov	r0, r4
 800810e:	f7ff fed9 	bl	8007ec4 <_free_r>
 8008112:	69a3      	ldr	r3, [r4, #24]
 8008114:	b1e3      	cbz	r3, 8008150 <_reclaim_reent+0xb0>
 8008116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008118:	4620      	mov	r0, r4
 800811a:	4798      	blx	r3
 800811c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800811e:	b1b9      	cbz	r1, 8008150 <_reclaim_reent+0xb0>
 8008120:	4620      	mov	r0, r4
 8008122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008126:	f7ff bfad 	b.w	8008084 <cleanup_glue>
 800812a:	5949      	ldr	r1, [r1, r5]
 800812c:	b941      	cbnz	r1, 8008140 <_reclaim_reent+0xa0>
 800812e:	3504      	adds	r5, #4
 8008130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008132:	2d80      	cmp	r5, #128	; 0x80
 8008134:	68d9      	ldr	r1, [r3, #12]
 8008136:	d1f8      	bne.n	800812a <_reclaim_reent+0x8a>
 8008138:	4620      	mov	r0, r4
 800813a:	f7ff fec3 	bl	8007ec4 <_free_r>
 800813e:	e7ba      	b.n	80080b6 <_reclaim_reent+0x16>
 8008140:	680e      	ldr	r6, [r1, #0]
 8008142:	4620      	mov	r0, r4
 8008144:	f7ff febe 	bl	8007ec4 <_free_r>
 8008148:	4631      	mov	r1, r6
 800814a:	e7ef      	b.n	800812c <_reclaim_reent+0x8c>
 800814c:	2500      	movs	r5, #0
 800814e:	e7ef      	b.n	8008130 <_reclaim_reent+0x90>
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	bf00      	nop
 8008154:	24000014 	.word	0x24000014

08008158 <_sbrk_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_sbrk_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f8 ff82 	bl	800106c <_sbrk>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_sbrk_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_sbrk_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	2400427c 	.word	0x2400427c

08008178 <__malloc_lock>:
 8008178:	4801      	ldr	r0, [pc, #4]	; (8008180 <__malloc_lock+0x8>)
 800817a:	f7ff be91 	b.w	8007ea0 <__retarget_lock_acquire_recursive>
 800817e:	bf00      	nop
 8008180:	24004270 	.word	0x24004270

08008184 <__malloc_unlock>:
 8008184:	4801      	ldr	r0, [pc, #4]	; (800818c <__malloc_unlock+0x8>)
 8008186:	f7ff be8c 	b.w	8007ea2 <__retarget_lock_release_recursive>
 800818a:	bf00      	nop
 800818c:	24004270 	.word	0x24004270

08008190 <_init>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr

0800819c <_fini>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	bf00      	nop
 80081a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a2:	bc08      	pop	{r3}
 80081a4:	469e      	mov	lr, r3
 80081a6:	4770      	bx	lr
