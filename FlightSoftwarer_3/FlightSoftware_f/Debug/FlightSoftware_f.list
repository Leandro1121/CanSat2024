
FlightSoftware_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006494  08006494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080065c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000417c  24000078  08006640  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240041f4  08006640  000241f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b9b7  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000303f  00000000  00000000  0003ba5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001318  00000000  00000000  0003eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001200  00000000  00000000  0003fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384ea  00000000  00000000  00040fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000181c0  00000000  00000000  000794a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a1f8  00000000  00000000  00091662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fb85a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005380  00000000  00000000  001fb8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800647c 	.word	0x0800647c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800647c 	.word	0x0800647c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	24000094 	.word	0x24000094
 8000614:	24000148 	.word	0x24000148

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fb7d 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f87d 	bl	8000720 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f82f 	bl	8000688 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <main+0x60>)
 800062c:	f107 041c 	add.w	r4, r7, #28
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f004 fbd2 	bl	8004dee <osThreadCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <main+0x64>)
 800064e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Thread */
  osThreadDef(GPS_Thread, GPS_Entry, osPriorityNormal, 0, 128);
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <main+0x68>)
 8000652:	463c      	mov	r4, r7
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_ThreadHandle = osThreadCreate(osThread(GPS_Thread), NULL);
 8000662:	463b      	mov	r3, r7
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fbc1 	bl	8004dee <osThreadCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <main+0x6c>)
 8000670:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000672:	f004 fbb5 	bl	8004de0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x5e>
 8000678:	080064ac 	.word	0x080064ac
 800067c:	24000440 	.word	0x24000440
 8000680:	080064c8 	.word	0x080064c8
 8000684:	24000444 	.word	0x24000444

08000688 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <MX_USART3_UART_Init+0x90>)
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <MX_USART3_UART_Init+0x94>)
 8000690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_USART3_UART_Init+0x90>)
 8000694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_USART3_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006d2:	f003 f93b 	bl	800394c <HAL_UART_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80006dc:	f000 f95e 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006e4:	f004 fa99 	bl	8004c1a <HAL_UARTEx_SetTxFifoThreshold>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80006ee:	f000 f955 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <MX_USART3_UART_Init+0x90>)
 80006f6:	f004 face 	bl	8004c96 <HAL_UARTEx_SetRxFifoThreshold>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 f94c 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_USART3_UART_Init+0x90>)
 8000706:	f004 fa4f 	bl	8004ba8 <HAL_UARTEx_DisableFifoMode>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000710:	f000 f944 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240003ac 	.word	0x240003ac
 800071c:	40004800 	.word	0x40004800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b79      	ldr	r3, [pc, #484]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a77      	ldr	r2, [pc, #476]	; (800091c <MX_GPIO_Init+0x1fc>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b75      	ldr	r3, [pc, #468]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000754:	4b71      	ldr	r3, [pc, #452]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a70      	ldr	r2, [pc, #448]	; (800091c <MX_GPIO_Init+0x1fc>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b6d      	ldr	r3, [pc, #436]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b6a      	ldr	r3, [pc, #424]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a68      	ldr	r2, [pc, #416]	; (800091c <MX_GPIO_Init+0x1fc>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b66      	ldr	r3, [pc, #408]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b62      	ldr	r3, [pc, #392]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	4a61      	ldr	r2, [pc, #388]	; (800091c <MX_GPIO_Init+0x1fc>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a0:	4b5e      	ldr	r3, [pc, #376]	; (800091c <MX_GPIO_Init+0x1fc>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MX_GPIO_Init+0x1fc>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a59      	ldr	r2, [pc, #356]	; (800091c <MX_GPIO_Init+0x1fc>)
 80007b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b57      	ldr	r3, [pc, #348]	; (800091c <MX_GPIO_Init+0x1fc>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	4853      	ldr	r0, [pc, #332]	; (8000920 <MX_GPIO_Init+0x200>)
 80007d2:	f000 fd8f 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	4852      	ldr	r0, [pc, #328]	; (8000924 <MX_GPIO_Init+0x204>)
 80007dc:	f000 fd8a 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	484c      	ldr	r0, [pc, #304]	; (8000928 <MX_GPIO_Init+0x208>)
 80007f8:	f000 fbcc 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007fc:	2332      	movs	r3, #50	; 0x32
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080c:	230b      	movs	r3, #11
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4844      	ldr	r0, [pc, #272]	; (8000928 <MX_GPIO_Init+0x208>)
 8000818:	f000 fbbc 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800081c:	2386      	movs	r3, #134	; 0x86
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082c:	230b      	movs	r3, #11
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	483d      	ldr	r0, [pc, #244]	; (800092c <MX_GPIO_Init+0x20c>)
 8000838:	f000 fbac 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084e:	230b      	movs	r3, #11
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4832      	ldr	r0, [pc, #200]	; (8000924 <MX_GPIO_Init+0x204>)
 800085a:	f000 fb9b 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800085e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000870:	2304      	movs	r3, #4
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	482a      	ldr	r0, [pc, #168]	; (8000924 <MX_GPIO_Init+0x204>)
 800087c:	f000 fb8a 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4822      	ldr	r0, [pc, #136]	; (8000920 <MX_GPIO_Init+0x200>)
 8000898:	f000 fb7c 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	481c      	ldr	r0, [pc, #112]	; (8000920 <MX_GPIO_Init+0x200>)
 80008b0:	f000 fb70 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80008c6:	230a      	movs	r3, #10
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4816      	ldr	r0, [pc, #88]	; (800092c <MX_GPIO_Init+0x20c>)
 80008d2:	f000 fb5f 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e8:	230b      	movs	r3, #11
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x200>)
 80008f4:	f000 fb4e 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_GPIO_Init+0x204>)
 8000910:	f000 fb40 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	58024400 	.word	0x58024400
 8000920:	58021800 	.word	0x58021800
 8000924:	58020400 	.word	0x58020400
 8000928:	58020800 	.word	0x58020800
 800092c:	58020000 	.word	0x58020000

08000930 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f004 faa4 	bl	8004e86 <osDelay>
 800093e:	e7fb      	b.n	8000938 <StartDefaultTask+0x8>

08000940 <GPS_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS_Entry */
void GPS_Entry(void const * argument)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPS_Entry */
  /* Infinite loop */

	// Sending Configuration String to GPS
	HAL_UART_Transmit(&huart3, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAONLY, sizeof(PMTK_SET_NMEA_OUTPUT_GGAONLY), 500);
 8000948:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800094c:	2234      	movs	r2, #52	; 0x34
 800094e:	4907      	ldr	r1, [pc, #28]	; (800096c <GPS_Entry+0x2c>)
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <GPS_Entry+0x30>)
 8000952:	f003 f84b 	bl	80039ec <HAL_UART_Transmit>
  for(;;)
  {
	  HAL_UART_Receive(&huart3, (uint8_t *)GPS_Buffer, sizeof(GPS_Buffer), 1000);
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	2264      	movs	r2, #100	; 0x64
 800095c:	4905      	ldr	r1, [pc, #20]	; (8000974 <GPS_Entry+0x34>)
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <GPS_Entry+0x30>)
 8000960:	f003 f8d2 	bl	8003b08 <HAL_UART_Receive>

	  int _ = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  {
 8000968:	e7f5      	b.n	8000956 <GPS_Entry+0x16>
 800096a:	bf00      	nop
 800096c:	080064e4 	.word	0x080064e4
 8000970:	240003ac 	.word	0x240003ac
 8000974:	24000348 	.word	0x24000348

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098a:	f000 fa03 	bl	8000d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40010000 	.word	0x40010000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x38>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_MspInit+0x38>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x38>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	210f      	movs	r1, #15
 80009d0:	f06f 0001 	mvn.w	r0, #1
 80009d4:	f000 fab6 	bl	8000f44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	58024400 	.word	0x58024400

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0ba      	sub	sp, #232	; 0xe8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	22c0      	movs	r2, #192	; 0xc0
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f005 fc6f 	bl	80062e8 <memset>
  if(huart->Instance==USART3)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a27      	ldr	r2, [pc, #156]	; (8000aac <HAL_UART_MspInit+0xc8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d146      	bne.n	8000aa2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a14:	f04f 0202 	mov.w	r2, #2
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fe94 	bl	8001758 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a36:	f7ff ffb1 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_UART_MspInit+0xcc>)
 8000a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0xcc>)
 8000a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0xcc>)
 8000a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0xcc>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0xcc>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0xcc>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a90:	2307      	movs	r3, #7
 8000a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_UART_MspInit+0xd0>)
 8000a9e:	f000 fa79 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	37e8      	adds	r7, #232	; 0xe8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004800 	.word	0x40004800
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	58020400 	.word	0x58020400

08000ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d842      	bhi.n	8000b4c <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	2019      	movs	r0, #25
 8000acc:	f000 fa3a 	bl	8000f44 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ad0:	2019      	movs	r0, #25
 8000ad2:	f000 fa51 	bl	8000f78 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <HAL_InitTick+0xac>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <HAL_InitTick+0xb0>)
 8000ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ae2:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <HAL_InitTick+0xb0>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_InitTick+0xb0>)
 8000aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fde5 	bl	80016d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b0a:	f000 fdcd 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 8000b0e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <HAL_InitTick+0xb4>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	0c9b      	lsrs	r3, r3, #18
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_InitTick+0xb8>)
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_InitTick+0xbc>)
 8000b22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0xb8>)
 8000b26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_InitTick+0xb8>)
 8000b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b30:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_InitTick+0xb8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_InitTick+0xb8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <HAL_InitTick+0xb8>)
 8000b40:	f002 fc36 	bl	80033b0 <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d107      	bne.n	8000b5a <HAL_InitTick+0xa2>
 8000b4a:	e001      	b.n	8000b50 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e005      	b.n	8000b5c <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <HAL_InitTick+0xb8>)
 8000b52:	f002 fc8f 	bl	8003474 <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	24000008 	.word	0x24000008
 8000b68:	58024400 	.word	0x58024400
 8000b6c:	431bde83 	.word	0x431bde83
 8000b70:	24000448 	.word	0x24000448
 8000b74:	40010000 	.word	0x40010000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM1_UP_IRQHandler+0x10>)
 8000baa:	f002 fcdb 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000448 	.word	0x24000448

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <SystemInit+0xe4>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <SystemInit+0xe4>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <SystemInit+0xe8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d807      	bhi.n	8000be8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bd8:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <SystemInit+0xe8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f023 030f 	bic.w	r3, r3, #15
 8000be0:	4a2f      	ldr	r2, [pc, #188]	; (8000ca0 <SystemInit+0xe8>)
 8000be2:	f043 0307 	orr.w	r3, r3, #7
 8000be6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <SystemInit+0xec>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <SystemInit+0xec>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <SystemInit+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <SystemInit+0xec>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4929      	ldr	r1, [pc, #164]	; (8000ca4 <SystemInit+0xec>)
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <SystemInit+0xf0>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <SystemInit+0xe8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d007      	beq.n	8000c22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <SystemInit+0xe8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f023 030f 	bic.w	r3, r3, #15
 8000c1a:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <SystemInit+0xe8>)
 8000c1c:	f043 0307 	orr.w	r3, r3, #7
 8000c20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <SystemInit+0xec>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <SystemInit+0xec>)
 8000c36:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <SystemInit+0xf4>)
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0xec>)
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <SystemInit+0xf8>)
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <SystemInit+0xec>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <SystemInit+0xfc>)
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <SystemInit+0xec>)
 8000c4e:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <SystemInit+0xfc>)
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <SystemInit+0xec>)
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <SystemInit+0xfc>)
 8000c5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0xec>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <SystemInit+0xec>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <SystemInit+0xec>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <SystemInit+0xec>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <SystemInit+0x100>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <SystemInit+0x104>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c82:	d202      	bcs.n	8000c8a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <SystemInit+0x108>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <SystemInit+0x10c>)
 8000c8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	5c001000 	.word	0x5c001000
 8000cbc:	ffff0000 	.word	0xffff0000
 8000cc0:	51008108 	.word	0x51008108
 8000cc4:	52004000 	.word	0x52004000

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ccc:	f7ff ff74 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f005 fad1 	bl	800629c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc8d 	bl	8000618 <main>
  bx  lr
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d08:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000d0c:	080065c8 	.word	0x080065c8
  ldr r2, =_sbss
 8000d10:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000d14:	240041f4 	.word	0x240041f4

08000d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC3_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f903 	bl	8000f2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d28:	f000 fafe 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_Init+0x68>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	4913      	ldr	r1, [pc, #76]	; (8000d88 <HAL_Init+0x6c>)
 8000d3a:	5ccb      	ldrb	r3, [r1, r3]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	fa22 f303 	lsr.w	r3, r2, r3
 8000d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_Init+0x68>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_Init+0x6c>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_Init+0x70>)
 8000d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_Init+0x74>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d66:	200f      	movs	r0, #15
 8000d68:	f7ff fea6 	bl	8000ab8 <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e002      	b.n	8000d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d76:	f7ff fe17 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58024400 	.word	0x58024400
 8000d88:	08006520 	.word	0x08006520
 8000d8c:	24000004 	.word	0x24000004
 8000d90:	24000000 	.word	0x24000000

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2400000c 	.word	0x2400000c
 8000db8:	24000494 	.word	0x24000494

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	24000494 	.word	0x24000494

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <__NVIC_SetPriorityGrouping+0x40>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x40>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	05fa0000 	.word	0x05fa0000

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff4c 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f52:	f7ff ff63 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f7ff ffb3 	bl	8000ec8 <NVIC_EncodePriority>
 8000f62:	4602      	mov	r2, r0
 8000f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff82 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff56 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fa2:	4b89      	ldr	r3, [pc, #548]	; (80011c8 <HAL_GPIO_Init+0x234>)
 8000fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fa6:	e194      	b.n	80012d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8186 	beq.w	80012cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d005      	beq.n	8000fd8 <HAL_GPIO_Init+0x44>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d130      	bne.n	800103a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100e:	2201      	movs	r2, #1
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	f003 0201 	and.w	r2, r3, #1
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b03      	cmp	r3, #3
 8001044:	d017      	beq.n	8001076 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d123      	bne.n	80010ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	69b9      	ldr	r1, [r7, #24]
 80010c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0203 	and.w	r2, r3, #3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80e0 	beq.w	80012cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x238>)
 800110e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001112:	4a2e      	ldr	r2, [pc, #184]	; (80011cc <HAL_GPIO_Init+0x238>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_GPIO_Init+0x238>)
 800111e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <HAL_GPIO_Init+0x23c>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <HAL_GPIO_Init+0x240>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d052      	beq.n	80011fc <HAL_GPIO_Init+0x268>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_GPIO_Init+0x244>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d031      	beq.n	80011c2 <HAL_GPIO_Init+0x22e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_GPIO_Init+0x248>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x22a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_GPIO_Init+0x24c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x226>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <HAL_GPIO_Init+0x250>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x222>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_GPIO_Init+0x254>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x21e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <HAL_GPIO_Init+0x258>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x21a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_GPIO_Init+0x25c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x216>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_GPIO_Init+0x260>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x212>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_GPIO_Init+0x264>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x20e>
 800119e:	2309      	movs	r3, #9
 80011a0:	e02d      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011a2:	230a      	movs	r3, #10
 80011a4:	e02b      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011a6:	2308      	movs	r3, #8
 80011a8:	e029      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011aa:	2307      	movs	r3, #7
 80011ac:	e027      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011ae:	2306      	movs	r3, #6
 80011b0:	e025      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e023      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e021      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e01f      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011be:	2302      	movs	r3, #2
 80011c0:	e01d      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e01b      	b.n	80011fe <HAL_GPIO_Init+0x26a>
 80011c6:	bf00      	nop
 80011c8:	58000080 	.word	0x58000080
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58000400 	.word	0x58000400
 80011d4:	58020000 	.word	0x58020000
 80011d8:	58020400 	.word	0x58020400
 80011dc:	58020800 	.word	0x58020800
 80011e0:	58020c00 	.word	0x58020c00
 80011e4:	58021000 	.word	0x58021000
 80011e8:	58021400 	.word	0x58021400
 80011ec:	58021800 	.word	0x58021800
 80011f0:	58021c00 	.word	0x58021c00
 80011f4:	58022000 	.word	0x58022000
 80011f8:	58022400 	.word	0x58022400
 80011fc:	2300      	movs	r3, #0
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	f002 0203 	and.w	r2, r2, #3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4093      	lsls	r3, r2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800120e:	4938      	ldr	r1, [pc, #224]	; (80012f0 <HAL_GPIO_Init+0x35c>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800124a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	3301      	adds	r3, #1
 80012d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f47f ae63 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3724      	adds	r7, #36	; 0x24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	58000400 	.word	0x58000400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800132e:	4bb3      	ldr	r3, [pc, #716]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001336:	2b18      	cmp	r3, #24
 8001338:	f200 8155 	bhi.w	80015e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <HAL_RCC_GetSysClockFreq+0x1c>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	080013a9 	.word	0x080013a9
 8001348:	080015e7 	.word	0x080015e7
 800134c:	080015e7 	.word	0x080015e7
 8001350:	080015e7 	.word	0x080015e7
 8001354:	080015e7 	.word	0x080015e7
 8001358:	080015e7 	.word	0x080015e7
 800135c:	080015e7 	.word	0x080015e7
 8001360:	080015e7 	.word	0x080015e7
 8001364:	080013cf 	.word	0x080013cf
 8001368:	080015e7 	.word	0x080015e7
 800136c:	080015e7 	.word	0x080015e7
 8001370:	080015e7 	.word	0x080015e7
 8001374:	080015e7 	.word	0x080015e7
 8001378:	080015e7 	.word	0x080015e7
 800137c:	080015e7 	.word	0x080015e7
 8001380:	080015e7 	.word	0x080015e7
 8001384:	080013d5 	.word	0x080013d5
 8001388:	080015e7 	.word	0x080015e7
 800138c:	080015e7 	.word	0x080015e7
 8001390:	080015e7 	.word	0x080015e7
 8001394:	080015e7 	.word	0x080015e7
 8001398:	080015e7 	.word	0x080015e7
 800139c:	080015e7 	.word	0x080015e7
 80013a0:	080015e7 	.word	0x080015e7
 80013a4:	080013db 	.word	0x080013db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013a8:	4b94      	ldr	r3, [pc, #592]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80013b4:	4b91      	ldr	r3, [pc, #580]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	4a90      	ldr	r2, [pc, #576]	; (8001600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80013c6:	e111      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80013c8:	4b8d      	ldr	r3, [pc, #564]	; (8001600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80013ca:	61bb      	str	r3, [r7, #24]
      break;
 80013cc:	e10e      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80013ce:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80013d0:	61bb      	str	r3, [r7, #24]
      break;
 80013d2:	e10b      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80013d4:	4b8c      	ldr	r3, [pc, #560]	; (8001608 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80013d6:	61bb      	str	r3, [r7, #24]
      break;
 80013d8:	e108      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80013da:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80013e4:	4b85      	ldr	r3, [pc, #532]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80013f0:	4b82      	ldr	r3, [pc, #520]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80013fa:	4b80      	ldr	r3, [pc, #512]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001412:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80e1 	beq.w	80015e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b02      	cmp	r3, #2
 8001422:	f000 8083 	beq.w	800152c <HAL_RCC_GetSysClockFreq+0x204>
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b02      	cmp	r3, #2
 800142a:	f200 80a1 	bhi.w	8001570 <HAL_RCC_GetSysClockFreq+0x248>
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_RCC_GetSysClockFreq+0x114>
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d056      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800143a:	e099      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800143c:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d02d      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001448:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	4a6b      	ldr	r2, [pc, #428]	; (8001600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800146e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001482:	ed97 6a02 	vldr	s12, [r7, #8]
 8001486:	eddf 5a61 	vldr	s11, [pc, #388]	; 800160c <HAL_RCC_GetSysClockFreq+0x2e4>
 800148a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800148e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80014a2:	e087      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001610 <HAL_RCC_GetSysClockFreq+0x2e8>
 80014b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014b6:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80014ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800160c <HAL_RCC_GetSysClockFreq+0x2e4>
 80014ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80014d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80014e6:	e065      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001614 <HAL_RCC_GetSysClockFreq+0x2ec>
 80014f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014fa:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800150a:	ed97 6a02 	vldr	s12, [r7, #8]
 800150e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800160c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800151a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800151e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800152a:	e043      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001536:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001618 <HAL_RCC_GetSysClockFreq+0x2f0>
 800153a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800154e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001552:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800160c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800155a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800155e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800156e:	e021      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001614 <HAL_RCC_GetSysClockFreq+0x2ec>
 800157e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001592:	ed97 6a02 	vldr	s12, [r7, #8]
 8001596:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800160c <HAL_RCC_GetSysClockFreq+0x2e4>
 800159a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800159e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80015b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	0a5b      	lsrs	r3, r3, #9
 80015ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015be:	3301      	adds	r3, #1
 80015c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80015d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d8:	ee17 3a90 	vmov	r3, s15
 80015dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80015de:	e005      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
      break;
 80015e4:	e002      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80015e8:	61bb      	str	r3, [r7, #24]
      break;
 80015ea:	bf00      	nop
  }

  return sysclockfreq;
 80015ec:	69bb      	ldr	r3, [r7, #24]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	58024400 	.word	0x58024400
 8001600:	03d09000 	.word	0x03d09000
 8001604:	003d0900 	.word	0x003d0900
 8001608:	007a1200 	.word	0x007a1200
 800160c:	46000000 	.word	0x46000000
 8001610:	4c742400 	.word	0x4c742400
 8001614:	4a742400 	.word	0x4a742400
 8001618:	4af42400 	.word	0x4af42400

0800161c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001622:	f7ff fe81 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_RCC_GetHCLKFreq+0x50>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	490f      	ldr	r1, [pc, #60]	; (8001670 <HAL_RCC_GetHCLKFreq+0x54>)
 8001634:	5ccb      	ldrb	r3, [r1, r3]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_RCC_GetHCLKFreq+0x50>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_RCC_GetHCLKFreq+0x54>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_RCC_GetHCLKFreq+0x58>)
 8001658:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_RCC_GetHCLKFreq+0x5c>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_RCC_GetHCLKFreq+0x58>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	58024400 	.word	0x58024400
 8001670:	08006520 	.word	0x08006520
 8001674:	24000004 	.word	0x24000004
 8001678:	24000000 	.word	0x24000000

0800167c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001680:	f7ff ffcc 	bl	800161c <HAL_RCC_GetHCLKFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	4904      	ldr	r1, [pc, #16]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001692:	5ccb      	ldrb	r3, [r1, r3]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	58024400 	.word	0x58024400
 80016a4:	08006520 	.word	0x08006520

080016a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80016ac:	f7ff ffb6 	bl	800161c <HAL_RCC_GetHCLKFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58024400 	.word	0x58024400
 80016d0:	08006520 	.word	0x08006520

080016d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	223f      	movs	r2, #63	; 0x3f
 80016e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_RCC_GetClockConfig+0x7c>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0207 	and.w	r2, r3, #7
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_RCC_GetClockConfig+0x7c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_RCC_GetClockConfig+0x7c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 020f 	and.w	r2, r3, #15
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_RCC_GetClockConfig+0x7c>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_RCC_GetClockConfig+0x7c>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_GetClockConfig+0x7c>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_RCC_GetClockConfig+0x7c>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCC_GetClockConfig+0x80>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 020f 	and.w	r2, r3, #15
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	58024400 	.word	0x58024400
 8001754:	52002000 	.word	0x52002000

08001758 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b0ca      	sub	sp, #296	; 0x128
 800175e:	af00      	add	r7, sp, #0
 8001760:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800177c:	2500      	movs	r5, #0
 800177e:	ea54 0305 	orrs.w	r3, r4, r5
 8001782:	d049      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800178a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800178e:	d02f      	beq.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001790:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001794:	d828      	bhi.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800179a:	d01a      	beq.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800179c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017a0:	d822      	bhi.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80017a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017aa:	d007      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80017ac:	e01c      	b.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017ae:	4bb8      	ldr	r3, [pc, #736]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	4ab7      	ldr	r2, [pc, #732]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80017ba:	e01a      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80017bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017c0:	3308      	adds	r3, #8
 80017c2:	2102      	movs	r1, #2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fc8f 	bl	80030e8 <RCCEx_PLL2_Config>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80017d0:	e00f      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80017d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017d6:	3328      	adds	r3, #40	; 0x28
 80017d8:	2102      	movs	r1, #2
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fd36 	bl	800324c <RCCEx_PLL3_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80017e6:	e004      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80017ee:	e000      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80017f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80017f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10a      	bne.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80017fa:	4ba5      	ldr	r3, [pc, #660]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80017fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001808:	4aa1      	ldr	r2, [pc, #644]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800180a:	430b      	orrs	r3, r1
 800180c:	6513      	str	r3, [r2, #80]	; 0x50
 800180e:	e003      	b.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001810:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001814:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8001824:	f04f 0900 	mov.w	r9, #0
 8001828:	ea58 0309 	orrs.w	r3, r8, r9
 800182c:	d047      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800182e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	2b04      	cmp	r3, #4
 8001836:	d82a      	bhi.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001855 	.word	0x08001855
 8001844:	08001863 	.word	0x08001863
 8001848:	08001879 	.word	0x08001879
 800184c:	08001897 	.word	0x08001897
 8001850:	08001897 	.word	0x08001897
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001854:	4b8e      	ldr	r3, [pc, #568]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	4a8d      	ldr	r2, [pc, #564]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001860:	e01a      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001866:	3308      	adds	r3, #8
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f001 fc3c 	bl	80030e8 <RCCEx_PLL2_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001876:	e00f      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800187c:	3328      	adds	r3, #40	; 0x28
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fce3 	bl	800324c <RCCEx_PLL3_Config>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800188c:	e004      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001894:	e000      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8001896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10a      	bne.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018a0:	4b7b      	ldr	r3, [pc, #492]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80018a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a4:	f023 0107 	bic.w	r1, r3, #7
 80018a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a78      	ldr	r2, [pc, #480]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6513      	str	r3, [r2, #80]	; 0x50
 80018b4:	e003      	b.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80018ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80018be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80018ca:	f04f 0b00 	mov.w	fp, #0
 80018ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80018d2:	d04c      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80018d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018de:	d030      	beq.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80018e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e4:	d829      	bhi.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80018e6:	2bc0      	cmp	r3, #192	; 0xc0
 80018e8:	d02d      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80018ea:	2bc0      	cmp	r3, #192	; 0xc0
 80018ec:	d825      	bhi.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80018ee:	2b80      	cmp	r3, #128	; 0x80
 80018f0:	d018      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80018f2:	2b80      	cmp	r3, #128	; 0x80
 80018f4:	d821      	bhi.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80018fa:	2b40      	cmp	r3, #64	; 0x40
 80018fc:	d007      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80018fe:	e01c      	b.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001900:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	4a62      	ldr	r2, [pc, #392]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800190c:	e01c      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800190e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001912:	3308      	adds	r3, #8
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fbe6 	bl	80030e8 <RCCEx_PLL2_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8001922:	e011      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001928:	3328      	adds	r3, #40	; 0x28
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fc8d 	bl	800324c <RCCEx_PLL3_Config>
 8001932:	4603      	mov	r3, r0
 8001934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8001938:	e006      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001940:	e002      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8001942:	bf00      	nop
 8001944:	e000      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8001946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10a      	bne.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001950:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001954:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8001958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	4a4c      	ldr	r2, [pc, #304]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001960:	430b      	orrs	r3, r1
 8001962:	6513      	str	r3, [r2, #80]	; 0x50
 8001964:	e003      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800196a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800196e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800197a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001984:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8001988:	460b      	mov	r3, r1
 800198a:	4313      	orrs	r3, r2
 800198c:	d053      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800198e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001992:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800199a:	d035      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800199c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019a0:	d82e      	bhi.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80019a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80019a6:	d031      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80019a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80019ac:	d828      	bhi.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b2:	d01a      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80019b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b8:	d822      	bhi.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80019be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019c2:	d007      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80019c4:	e01c      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019c6:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80019d2:	e01c      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80019d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019d8:	3308      	adds	r3, #8
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 fb83 	bl	80030e8 <RCCEx_PLL2_Config>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80019e8:	e011      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80019ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ee:	3328      	adds	r3, #40	; 0x28
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fc2a 	bl	800324c <RCCEx_PLL3_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80019fe:	e006      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8001a08:	bf00      	nop
 8001a0a:	e000      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8001a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10b      	bne.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8001a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a26:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	e003      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8001a42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8001a50:	460b      	mov	r3, r1
 8001a52:	4313      	orrs	r3, r2
 8001a54:	d056      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8001a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a62:	d038      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8001a64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a68:	d831      	bhi.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001a6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a6e:	d034      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x382>
 8001a70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a74:	d82b      	bhi.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8001a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a80:	d825      	bhi.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8001a86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8001a8c:	e01f      	b.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001a8e:	bf00      	nop
 8001a90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a94:	4ba2      	ldr	r3, [pc, #648]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	4aa1      	ldr	r2, [pc, #644]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001aa0:	e01c      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fb1c 	bl	80030e8 <RCCEx_PLL2_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8001ab6:	e011      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001abc:	3328      	adds	r3, #40	; 0x28
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fbc3 	bl	800324c <RCCEx_PLL3_Config>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001acc:	e006      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001ad4:	e002      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8001ad6:	bf00      	nop
 8001ad8:	e000      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8001ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10b      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001ae4:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8001aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001af0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001af4:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001af6:	430b      	orrs	r3, r1
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	e003      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8001b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4313      	orrs	r3, r2
 8001b22:	d03a      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8001b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	2b30      	cmp	r3, #48	; 0x30
 8001b2c:	d01f      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8001b2e:	2b30      	cmp	r3, #48	; 0x30
 8001b30:	d819      	bhi.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d00c      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d815      	bhi.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d111      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b42:	4b77      	ldr	r3, [pc, #476]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	4a76      	ldr	r2, [pc, #472]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8001b4e:	e011      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b54:	3308      	adds	r3, #8
 8001b56:	2102      	movs	r1, #2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fac5 	bl	80030e8 <RCCEx_PLL2_Config>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8001b64:	e006      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001b6c:	e002      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8001b6e:	bf00      	nop
 8001b70:	e000      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8001b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8001b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a65      	ldr	r2, [pc, #404]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b90:	e003      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8001ba6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001bb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	d051      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8001bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc4:	d035      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8001bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bca:	d82e      	bhi.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001bd0:	d031      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8001bd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001bd6:	d828      	bhi.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bdc:	d01a      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8001bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be2:	d822      	bhi.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8001be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bec:	d007      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8001bee:	e01c      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c02:	3308      	adds	r3, #8
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 fa6e 	bl	80030e8 <RCCEx_PLL2_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8001c12:	e011      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c18:	3328      	adds	r3, #40	; 0x28
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 fb15 	bl	800324c <RCCEx_PLL3_Config>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8001c28:	e006      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001c30:	e002      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8001c32:	bf00      	nop
 8001c34:	e000      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8001c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001c40:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8001c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	4a34      	ldr	r2, [pc, #208]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6513      	str	r3, [r2, #80]	; 0x50
 8001c54:	e003      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8001c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	d056      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8001c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c88:	d033      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8001c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8e:	d82c      	bhi.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8001c90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c94:	d02f      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8001c96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c9a:	d826      	bhi.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8001c9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ca0:	d02b      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8001ca2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ca6:	d820      	bhi.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8001ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cac:	d012      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8001cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cb2:	d81a      	bhi.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d022      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d115      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fa0e 	bl	80030e8 <RCCEx_PLL2_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8001cd2:	e015      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cd8:	3328      	adds	r3, #40	; 0x28
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 fab5 	bl	800324c <RCCEx_PLL3_Config>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001cf0:	e006      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8001cf2:	bf00      	nop
 8001cf4:	e004      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8001cf6:	bf00      	nop
 8001cf8:	e002      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8001cfa:	bf00      	nop
 8001cfc:	e000      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8001cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10d      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8001d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d16:	4a02      	ldr	r2, [pc, #8]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6513      	str	r3, [r2, #80]	; 0x50
 8001d1c:	e006      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8001d1e:	bf00      	nop
 8001d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001d28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8001d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	d055      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8001d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d58:	d033      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8001d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d5e:	d82c      	bhi.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d02f      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8001d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6a:	d826      	bhi.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8001d6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001d70:	d02b      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8001d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001d76:	d820      	bhi.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8001d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d7c:	d012      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8001d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d82:	d81a      	bhi.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d022      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8001d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d8c:	d115      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d92:	3308      	adds	r3, #8
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 f9a6 	bl	80030e8 <RCCEx_PLL2_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8001da2:	e015      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8001da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001da8:	3328      	adds	r3, #40	; 0x28
 8001daa:	2101      	movs	r1, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f001 fa4d 	bl	800324c <RCCEx_PLL3_Config>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001dc0:	e006      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8001dc2:	bf00      	nop
 8001dc4:	e004      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8001dc6:	bf00      	nop
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8001dca:	bf00      	nop
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8001dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001dd8:	4ba3      	ldr	r3, [pc, #652]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8001de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001de8:	4a9f      	ldr	r2, [pc, #636]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001dea:	430b      	orrs	r3, r1
 8001dec:	6593      	str	r3, [r2, #88]	; 0x58
 8001dee:	e003      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8001e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e12:	460b      	mov	r3, r1
 8001e14:	4313      	orrs	r3, r2
 8001e16:	d037      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8001e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e22:	d00e      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8001e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e28:	d816      	bhi.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d018      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8001e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e32:	d111      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	4a8b      	ldr	r2, [pc, #556]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8001e40:	e00f      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8001e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e46:	3308      	adds	r3, #8
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 f94c 	bl	80030e8 <RCCEx_PLL2_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8001e56:	e004      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001e5e:	e000      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8001e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10a      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8001e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a7b      	ldr	r2, [pc, #492]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	6513      	str	r3, [r2, #80]	; 0x50
 8001e7e:	e003      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8001e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	d039      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8001ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d81c      	bhi.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x794>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ef5 	.word	0x08001ef5
 8001ebc:	08001ec9 	.word	0x08001ec9
 8001ec0:	08001ed7 	.word	0x08001ed7
 8001ec4:	08001ef5 	.word	0x08001ef5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ec8:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	4a66      	ldr	r2, [pc, #408]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8001ed4:	e00f      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eda:	3308      	adds	r3, #8
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 f902 	bl	80030e8 <RCCEx_PLL2_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8001eea:	e004      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8001ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f023 0103 	bic.w	r1, r3, #3
 8001f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0c:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	e003      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001f36:	460b      	mov	r3, r1
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f000 809f 	beq.w	800207c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f4a:	f7fe ff37 	bl	8000dbc <HAL_GetTick>
 8001f4e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f52:	e00b      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe ff32 	bl	8000dbc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d903      	bls.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001f6a:	e005      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ed      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8001f78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d179      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001f8c:	4053      	eors	r3, r2
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f96:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	4a30      	ldr	r2, [pc, #192]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fae:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fce:	d118      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fef4 	bl	8000dbc <HAL_GetTick>
 8001fd4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd8:	e00d      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe feef 	bl	8000dbc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d903      	bls.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8001ff4:	e005      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0eb      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002006:	2b00      	cmp	r3, #0
 8002008:	d129      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800200a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800200e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800201a:	d10e      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002028:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800202c:	091a      	lsrs	r2, r3, #4
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002030:	4013      	ands	r3, r2
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002034:	430b      	orrs	r3, r1
 8002036:	6113      	str	r3, [r2, #16]
 8002038:	e005      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002040:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002044:	6113      	str	r3, [r2, #16]
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002048:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800204a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800204e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002058:	430b      	orrs	r3, r1
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	e00e      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800205e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002062:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002066:	e009      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002068:	58024400 	.word	0x58024400
 800206c:	58024800 	.word	0x58024800
 8002070:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800207c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f002 0301 	and.w	r3, r2, #1
 8002088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002092:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002096:	460b      	mov	r3, r1
 8002098:	4313      	orrs	r3, r2
 800209a:	f000 8089 	beq.w	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800209e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020a4:	2b28      	cmp	r3, #40	; 0x28
 80020a6:	d86b      	bhi.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	08002189 	.word	0x08002189
 80020b4:	08002181 	.word	0x08002181
 80020b8:	08002181 	.word	0x08002181
 80020bc:	08002181 	.word	0x08002181
 80020c0:	08002181 	.word	0x08002181
 80020c4:	08002181 	.word	0x08002181
 80020c8:	08002181 	.word	0x08002181
 80020cc:	08002181 	.word	0x08002181
 80020d0:	08002155 	.word	0x08002155
 80020d4:	08002181 	.word	0x08002181
 80020d8:	08002181 	.word	0x08002181
 80020dc:	08002181 	.word	0x08002181
 80020e0:	08002181 	.word	0x08002181
 80020e4:	08002181 	.word	0x08002181
 80020e8:	08002181 	.word	0x08002181
 80020ec:	08002181 	.word	0x08002181
 80020f0:	0800216b 	.word	0x0800216b
 80020f4:	08002181 	.word	0x08002181
 80020f8:	08002181 	.word	0x08002181
 80020fc:	08002181 	.word	0x08002181
 8002100:	08002181 	.word	0x08002181
 8002104:	08002181 	.word	0x08002181
 8002108:	08002181 	.word	0x08002181
 800210c:	08002181 	.word	0x08002181
 8002110:	08002189 	.word	0x08002189
 8002114:	08002181 	.word	0x08002181
 8002118:	08002181 	.word	0x08002181
 800211c:	08002181 	.word	0x08002181
 8002120:	08002181 	.word	0x08002181
 8002124:	08002181 	.word	0x08002181
 8002128:	08002181 	.word	0x08002181
 800212c:	08002181 	.word	0x08002181
 8002130:	08002189 	.word	0x08002189
 8002134:	08002181 	.word	0x08002181
 8002138:	08002181 	.word	0x08002181
 800213c:	08002181 	.word	0x08002181
 8002140:	08002181 	.word	0x08002181
 8002144:	08002181 	.word	0x08002181
 8002148:	08002181 	.word	0x08002181
 800214c:	08002181 	.word	0x08002181
 8002150:	08002189 	.word	0x08002189
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002158:	3308      	adds	r3, #8
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f000 ffc3 	bl	80030e8 <RCCEx_PLL2_Config>
 8002162:	4603      	mov	r3, r0
 8002164:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002168:	e00f      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800216a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800216e:	3328      	adds	r3, #40	; 0x28
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f001 f86a 	bl	800324c <RCCEx_PLL3_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800217e:	e004      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002186:	e000      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800218a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002192:	4bbf      	ldr	r3, [pc, #764]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800219a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800219e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a0:	4abb      	ldr	r2, [pc, #748]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6553      	str	r3, [r2, #84]	; 0x54
 80021a6:	e003      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80021ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80021b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f002 0302 	and.w	r3, r2, #2
 80021bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80021c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80021ca:	460b      	mov	r3, r1
 80021cc:	4313      	orrs	r3, r2
 80021ce:	d041      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80021d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d824      	bhi.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	0800222d 	.word	0x0800222d
 80021e4:	080021f9 	.word	0x080021f9
 80021e8:	0800220f 	.word	0x0800220f
 80021ec:	0800222d 	.word	0x0800222d
 80021f0:	0800222d 	.word	0x0800222d
 80021f4:	0800222d 	.word	0x0800222d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80021f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021fc:	3308      	adds	r3, #8
 80021fe:	2101      	movs	r1, #1
 8002200:	4618      	mov	r0, r3
 8002202:	f000 ff71 	bl	80030e8 <RCCEx_PLL2_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800220c:	e00f      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800220e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002212:	3328      	adds	r3, #40	; 0x28
 8002214:	2101      	movs	r1, #1
 8002216:	4618      	mov	r0, r3
 8002218:	f001 f818 	bl	800324c <RCCEx_PLL3_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002222:	e004      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800222a:	e000      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800222c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800222e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002236:	4b96      	ldr	r3, [pc, #600]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f023 0107 	bic.w	r1, r3, #7
 800223e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002244:	4a92      	ldr	r2, [pc, #584]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002246:	430b      	orrs	r3, r1
 8002248:	6553      	str	r3, [r2, #84]	; 0x54
 800224a:	e003      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002250:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f002 0304 	and.w	r3, r2, #4
 8002260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800226a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800226e:	460b      	mov	r3, r1
 8002270:	4313      	orrs	r3, r2
 8002272:	d044      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227c:	2b05      	cmp	r3, #5
 800227e:	d825      	bhi.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	080022d5 	.word	0x080022d5
 800228c:	080022a1 	.word	0x080022a1
 8002290:	080022b7 	.word	0x080022b7
 8002294:	080022d5 	.word	0x080022d5
 8002298:	080022d5 	.word	0x080022d5
 800229c:	080022d5 	.word	0x080022d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80022a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022a4:	3308      	adds	r3, #8
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 ff1d 	bl	80030e8 <RCCEx_PLL2_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80022b4:	e00f      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80022b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022ba:	3328      	adds	r3, #40	; 0x28
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 ffc4 	bl	800324c <RCCEx_PLL3_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80022ca:	e004      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80022d2:	e000      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80022d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022de:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f023 0107 	bic.w	r1, r3, #7
 80022e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ee:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
 80022f4:	e003      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80022fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f002 0320 	and.w	r3, r2, #32
 800230a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002318:	460b      	mov	r3, r1
 800231a:	4313      	orrs	r3, r2
 800231c:	d055      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800231e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800232a:	d033      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800232c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002330:	d82c      	bhi.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d02f      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d826      	bhi.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800233e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002342:	d02b      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002344:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002348:	d820      	bhi.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800234a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800234e:	d012      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002354:	d81a      	bhi.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d022      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800235a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800235e:	d115      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002364:	3308      	adds	r3, #8
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f000 febd 	bl	80030e8 <RCCEx_PLL2_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002374:	e015      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800237a:	3328      	adds	r3, #40	; 0x28
 800237c:	2102      	movs	r1, #2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 ff64 	bl	800324c <RCCEx_PLL3_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800238a:	e00a      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002392:	e006      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002394:	bf00      	nop
 8002396:	e004      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002398:	bf00      	nop
 800239a:	e002      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800239c:	bf00      	nop
 800239e:	e000      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80023a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80023b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a35      	ldr	r2, [pc, #212]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80023bc:	430b      	orrs	r3, r1
 80023be:	6553      	str	r3, [r2, #84]	; 0x54
 80023c0:	e003      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80023ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80023d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80023e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4313      	orrs	r3, r2
 80023e8:	d058      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80023ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80023f6:	d033      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80023f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80023fc:	d82c      	bhi.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002402:	d02f      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002408:	d826      	bhi.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800240a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800240e:	d02b      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002414:	d820      	bhi.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800241a:	d012      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800241c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002420:	d81a      	bhi.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002422:	2b00      	cmp	r3, #0
 8002424:	d022      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242a:	d115      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800242c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002430:	3308      	adds	r3, #8
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fe57 	bl	80030e8 <RCCEx_PLL2_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002440:	e015      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002446:	3328      	adds	r3, #40	; 0x28
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fefe 	bl	800324c <RCCEx_PLL3_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002456:	e00a      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800245e:	e006      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002460:	bf00      	nop
 8002462:	e004      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002464:	bf00      	nop
 8002466:	e002      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002468:	bf00      	nop
 800246a:	e000      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800246c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800246e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10e      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800247e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002486:	4a02      	ldr	r2, [pc, #8]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002488:	430b      	orrs	r3, r1
 800248a:	6593      	str	r3, [r2, #88]	; 0x58
 800248c:	e006      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800248e:	bf00      	nop
 8002490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800249c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80024a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80024b6:	460b      	mov	r3, r1
 80024b8:	4313      	orrs	r3, r2
 80024ba:	d055      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80024bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80024c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80024c8:	d033      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80024ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80024ce:	d82c      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80024d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d4:	d02f      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80024d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024da:	d826      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80024dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80024e0:	d02b      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80024e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80024e6:	d820      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80024e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ec:	d012      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80024ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024f2:	d81a      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d022      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80024f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fc:	d115      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002502:	3308      	adds	r3, #8
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fdee 	bl	80030e8 <RCCEx_PLL2_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002512:	e015      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002518:	3328      	adds	r3, #40	; 0x28
 800251a:	2102      	movs	r1, #2
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fe95 	bl	800324c <RCCEx_PLL3_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002528:	e00a      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002530:	e006      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002532:	bf00      	nop
 8002534:	e004      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800253e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002548:	4ba1      	ldr	r3, [pc, #644]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002554:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002558:	4a9d      	ldr	r2, [pc, #628]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800255a:	430b      	orrs	r3, r1
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
 800255e:	e003      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f002 0308 	and.w	r3, r2, #8
 8002574:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800257e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002582:	460b      	mov	r3, r1
 8002584:	4313      	orrs	r3, r2
 8002586:	d01e      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800258c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800259a:	3328      	adds	r3, #40	; 0x28
 800259c:	2102      	movs	r1, #2
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fe54 	bl	800324c <RCCEx_PLL3_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80025b0:	4b87      	ldr	r3, [pc, #540]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c0:	4a83      	ldr	r2, [pc, #524]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80025c2:	430b      	orrs	r3, r1
 80025c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f002 0310 	and.w	r3, r2, #16
 80025d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80025e0:	460b      	mov	r3, r1
 80025e2:	4313      	orrs	r3, r2
 80025e4:	d01e      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80025e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f2:	d10c      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80025f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025f8:	3328      	adds	r3, #40	; 0x28
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fe25 	bl	800324c <RCCEx_PLL3_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800261a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261e:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002620:	430b      	orrs	r3, r1
 8002622:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800263a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800263e:	460b      	mov	r3, r1
 8002640:	4313      	orrs	r3, r2
 8002642:	d03e      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002648:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800264c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002650:	d022      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002656:	d81b      	bhi.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d00b      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002662:	e015      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002668:	3308      	adds	r3, #8
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fd3b 	bl	80030e8 <RCCEx_PLL2_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002678:	e00f      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800267e:	3328      	adds	r3, #40	; 0x28
 8002680:	2102      	movs	r1, #2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fde2 	bl	800324c <RCCEx_PLL3_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800268e:	e004      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002696:	e000      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800269a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a2:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80026aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026b2:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
 80026b8:	e003      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80026ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80026d0:	2300      	movs	r3, #0
 80026d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80026d8:	460b      	mov	r3, r1
 80026da:	4313      	orrs	r3, r2
 80026dc:	d03b      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80026de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026ea:	d01f      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80026ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026f0:	d818      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80026f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f6:	d003      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80026f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026fc:	d007      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80026fe:	e011      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	4a32      	ldr	r2, [pc, #200]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800270c:	e00f      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800270e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002712:	3328      	adds	r3, #40	; 0x28
 8002714:	2101      	movs	r1, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fd98 	bl	800324c <RCCEx_PLL3_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002722:	e004      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800272a:	e000      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800272c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800272e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800273e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002748:	430b      	orrs	r3, r1
 800274a:	6553      	str	r3, [r2, #84]	; 0x54
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002762:	673b      	str	r3, [r7, #112]	; 0x70
 8002764:	2300      	movs	r3, #0
 8002766:	677b      	str	r3, [r7, #116]	; 0x74
 8002768:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800276c:	460b      	mov	r3, r1
 800276e:	4313      	orrs	r3, r2
 8002770:	d034      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d007      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8002782:	e011      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002790:	e00e      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002796:	3308      	adds	r3, #8
 8002798:	2102      	movs	r1, #2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fca4 	bl	80030e8 <RCCEx_PLL2_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80027a6:	e003      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	4a02      	ldr	r2, [pc, #8]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80027c8:	430b      	orrs	r3, r1
 80027ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027cc:	e006      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80027ce:	bf00      	nop
 80027d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80027e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ea:	2300      	movs	r3, #0
 80027ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80027f2:	460b      	mov	r3, r1
 80027f4:	4313      	orrs	r3, r2
 80027f6:	d00c      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80027f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027fc:	3328      	adds	r3, #40	; 0x28
 80027fe:	2102      	movs	r1, #2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fd23 	bl	800324c <RCCEx_PLL3_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800281e:	663b      	str	r3, [r7, #96]	; 0x60
 8002820:	2300      	movs	r3, #0
 8002822:	667b      	str	r3, [r7, #100]	; 0x64
 8002824:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002828:	460b      	mov	r3, r1
 800282a:	4313      	orrs	r3, r2
 800282c:	d038      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800282e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800283a:	d018      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800283c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002840:	d811      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8002842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002846:	d014      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d80b      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d011      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8002852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002856:	d106      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002858:	4bc3      	ldr	r3, [pc, #780]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	4ac2      	ldr	r2, [pc, #776]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800285e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8002864:	e008      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800286c:	e004      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800286e:	bf00      	nop
 8002870:	e002      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8002876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002880:	4bb9      	ldr	r3, [pc, #740]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800288c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002890:	4ab5      	ldr	r2, [pc, #724]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002892:	430b      	orrs	r3, r1
 8002894:	6553      	str	r3, [r2, #84]	; 0x54
 8002896:	e003      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800289c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80028ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80028ae:	2300      	movs	r3, #0
 80028b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80028b6:	460b      	mov	r3, r1
 80028b8:	4313      	orrs	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028bc:	4baa      	ldr	r3, [pc, #680]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80028c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	4aa7      	ldr	r2, [pc, #668]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80028d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80028dc:	653b      	str	r3, [r7, #80]	; 0x50
 80028de:	2300      	movs	r3, #0
 80028e0:	657b      	str	r3, [r7, #84]	; 0x54
 80028e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80028e6:	460b      	mov	r3, r1
 80028e8:	4313      	orrs	r3, r2
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80028ec:	4b9e      	ldr	r3, [pc, #632]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80028f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80028fc:	4a9a      	ldr	r2, [pc, #616]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80028fe:	430b      	orrs	r3, r1
 8002900:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002910:	2300      	movs	r3, #0
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002918:	460b      	mov	r3, r1
 800291a:	4313      	orrs	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800291e:	4b92      	ldr	r3, [pc, #584]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002922:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8002926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800292a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292c:	4a8e      	ldr	r2, [pc, #568]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800292e:	430b      	orrs	r3, r1
 8002930:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800293e:	643b      	str	r3, [r7, #64]	; 0x40
 8002940:	2300      	movs	r3, #0
 8002942:	647b      	str	r3, [r7, #68]	; 0x44
 8002944:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002948:	460b      	mov	r3, r1
 800294a:	4313      	orrs	r3, r2
 800294c:	d00e      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800294e:	4b86      	ldr	r3, [pc, #536]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	4a85      	ldr	r2, [pc, #532]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002954:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002958:	6113      	str	r3, [r2, #16]
 800295a:	4b83      	ldr	r3, [pc, #524]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800295c:	6919      	ldr	r1, [r3, #16]
 800295e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002962:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002966:	4a80      	ldr	r2, [pc, #512]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002968:	430b      	orrs	r3, r1
 800296a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800296c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
 800297a:	2300      	movs	r3, #0
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002982:	460b      	mov	r3, r1
 8002984:	4313      	orrs	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002988:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	4a74      	ldr	r2, [pc, #464]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8002998:	430b      	orrs	r3, r1
 800299a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800299c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
 80029ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80029b2:	460b      	mov	r3, r1
 80029b4:	4313      	orrs	r3, r2
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029b8:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80029c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	4a67      	ldr	r2, [pc, #412]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80029ca:	430b      	orrs	r3, r1
 80029cc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80029ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	2100      	movs	r1, #0
 80029d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80029e4:	460b      	mov	r3, r1
 80029e6:	4313      	orrs	r3, r2
 80029e8:	d011      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ee:	3308      	adds	r3, #8
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fb78 	bl	80030e8 <RCCEx_PLL2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80029fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8002a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	2100      	movs	r1, #0
 8002a18:	6239      	str	r1, [r7, #32]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a24:	460b      	mov	r3, r1
 8002a26:	4313      	orrs	r3, r2
 8002a28:	d011      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a2e:	3308      	adds	r3, #8
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fb58 	bl	80030e8 <RCCEx_PLL2_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8002a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8002a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	2100      	movs	r1, #0
 8002a58:	61b9      	str	r1, [r7, #24]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002a64:	460b      	mov	r3, r1
 8002a66:	4313      	orrs	r3, r2
 8002a68:	d011      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6e:	3308      	adds	r3, #8
 8002a70:	2102      	movs	r1, #2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fb38 	bl	80030e8 <RCCEx_PLL2_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8002a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8002a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	2100      	movs	r1, #0
 8002a98:	6139      	str	r1, [r7, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	d011      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aae:	3328      	adds	r3, #40	; 0x28
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fbca 	bl	800324c <RCCEx_PLL3_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8002abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8002ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	d011      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aee:	3328      	adds	r3, #40	; 0x28
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fbaa 	bl	800324c <RCCEx_PLL3_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8002afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	2100      	movs	r1, #0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002b24:	460b      	mov	r3, r1
 8002b26:	4313      	orrs	r3, r2
 8002b28:	d011      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2e:	3328      	adds	r3, #40	; 0x28
 8002b30:	2102      	movs	r1, #2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fb8a 	bl	800324c <RCCEx_PLL3_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8002b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8002b4e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002b62:	46bd      	mov	sp, r7
 8002b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b68:	58024400 	.word	0x58024400

08002b6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002b70:	f7fe fd54 	bl	800161c <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4904      	ldr	r1, [pc, #16]	; (8002b94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	58024400 	.word	0x58024400
 8002b94:	08006520 	.word	0x08006520

08002b98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ba0:	4ba1      	ldr	r3, [pc, #644]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002baa:	4b9f      	ldr	r3, [pc, #636]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	0b1b      	lsrs	r3, r3, #12
 8002bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002bb6:	4b9c      	ldr	r3, [pc, #624]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002bc2:	4b99      	ldr	r3, [pc, #612]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8111 	beq.w	8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f000 8083 	beq.w	8002cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	f200 80a1 	bhi.w	8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d056      	beq.n	8002cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002c02:	e099      	b.n	8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c04:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02d      	beq.n	8002c6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c10:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	4a84      	ldr	r2, [pc, #528]	; (8002e2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c3a:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8002e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002c6a:	e087      	b.n	8002d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002e34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7e:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8002e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cae:	e065      	b.n	8002d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8002e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc2:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8002e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cf2:	e043      	b.n	8002d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d06:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8002e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d36:	e021      	b.n	8002d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	ee07 3a90 	vmov	s15, r3
 8002d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002e30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	0a5b      	lsrs	r3, r3, #9
 8002d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da2:	ee17 2a90 	vmov	r2, s15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002daa:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db4:	ee07 3a90 	vmov	s15, r3
 8002db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd0:	ee17 2a90 	vmov	r2, s15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	0e1b      	lsrs	r3, r3, #24
 8002dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfe:	ee17 2a90 	vmov	r2, s15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002e06:	e008      	b.n	8002e1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
}
 8002e1a:	bf00      	nop
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	03d09000 	.word	0x03d09000
 8002e30:	46000000 	.word	0x46000000
 8002e34:	4c742400 	.word	0x4c742400
 8002e38:	4a742400 	.word	0x4a742400
 8002e3c:	4af42400 	.word	0x4af42400

08002e40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e48:	4ba1      	ldr	r3, [pc, #644]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002e52:	4b9f      	ldr	r3, [pc, #636]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	0d1b      	lsrs	r3, r3, #20
 8002e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002e5e:	4b9c      	ldr	r3, [pc, #624]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002e6a:	4b99      	ldr	r3, [pc, #612]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	08db      	lsrs	r3, r3, #3
 8002e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8111 	beq.w	80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	f000 8083 	beq.w	8002f9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	f200 80a1 	bhi.w	8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d056      	beq.n	8002f58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002eaa:	e099      	b.n	8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eac:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02d      	beq.n	8002f14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eb8:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	08db      	lsrs	r3, r3, #3
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	4a84      	ldr	r2, [pc, #528]	; (80030d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee2:	4b7b      	ldr	r3, [pc, #492]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ef6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80030d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002f12:	e087      	b.n	8003024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80030dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80030d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f56:	e065      	b.n	8003024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80030e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f6a:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80030d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f9a:	e043      	b.n	8003024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80030e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fae:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80030d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fde:	e021      	b.n	8003024 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80030e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff2:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003002:	ed97 6a03 	vldr	s12, [r7, #12]
 8003006:	eddf 5a34 	vldr	s11, [pc, #208]	; 80030d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800300a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003022:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003024:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	0a5b      	lsrs	r3, r3, #9
 800302a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800303a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800303e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800304a:	ee17 2a90 	vmov	r2, s15
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003052:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003068:	ee37 7a87 	vadd.f32	s14, s15, s14
 800306c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003078:	ee17 2a90 	vmov	r2, s15
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	0e1b      	lsrs	r3, r3, #24
 8003086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800309a:	edd7 6a07 	vldr	s13, [r7, #28]
 800309e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a6:	ee17 2a90 	vmov	r2, s15
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80030ae:	e008      	b.n	80030c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
}
 80030c2:	bf00      	nop
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
 80030d4:	03d09000 	.word	0x03d09000
 80030d8:	46000000 	.word	0x46000000
 80030dc:	4c742400 	.word	0x4c742400
 80030e0:	4a742400 	.word	0x4a742400
 80030e4:	4af42400 	.word	0x4af42400

080030e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d101      	bne.n	8003106 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e099      	b.n	800323a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800310c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003112:	f7fd fe53 	bl	8000dbc <HAL_GetTick>
 8003116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003118:	e008      	b.n	800312c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800311a:	f7fd fe4f 	bl	8000dbc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e086      	b.n	800323a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800312c:	4b45      	ldr	r3, [pc, #276]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003138:	4b42      	ldr	r3, [pc, #264]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	031b      	lsls	r3, r3, #12
 8003146:	493f      	ldr	r1, [pc, #252]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	628b      	str	r3, [r1, #40]	; 0x28
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	3b01      	subs	r3, #1
 8003152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	3b01      	subs	r3, #1
 800315c:	025b      	lsls	r3, r3, #9
 800315e:	b29b      	uxth	r3, r3
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	3b01      	subs	r3, #1
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800317c:	4931      	ldr	r1, [pc, #196]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	492d      	ldr	r1, [pc, #180]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003194:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	f023 0220 	bic.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4928      	ldr	r1, [pc, #160]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <RCCEx_PLL2_Config+0x160>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	69d2      	ldr	r2, [r2, #28]
 80031be:	00d2      	lsls	r2, r2, #3
 80031c0:	4920      	ldr	r1, [pc, #128]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031e4:	e00f      	b.n	8003206 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031f8:	e005      	b.n	8003206 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	4a11      	ldr	r2, [pc, #68]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800320c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003212:	f7fd fdd3 	bl	8000dbc <HAL_GetTick>
 8003216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003218:	e008      	b.n	800322c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800321a:	f7fd fdcf 	bl	8000dbc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400
 8003248:	ffff0007 	.word	0xffff0007

0800324c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800325a:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b03      	cmp	r3, #3
 8003264:	d101      	bne.n	800326a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e099      	b.n	800339e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4e      	ldr	r2, [pc, #312]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003276:	f7fd fda1 	bl	8000dbc <HAL_GetTick>
 800327a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800327c:	e008      	b.n	8003290 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800327e:	f7fd fd9d 	bl	8000dbc <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e086      	b.n	800339e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003290:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800329c:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	051b      	lsls	r3, r3, #20
 80032aa:	493f      	ldr	r1, [pc, #252]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	628b      	str	r3, [r1, #40]	; 0x28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	3b01      	subs	r3, #1
 80032da:	061b      	lsls	r3, r3, #24
 80032dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032e0:	4931      	ldr	r1, [pc, #196]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80032e6:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	492d      	ldr	r1, [pc, #180]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	4928      	ldr	r1, [pc, #160]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <RCCEx_PLL3_Config+0x160>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	69d2      	ldr	r2, [r2, #28]
 8003322:	00d2      	lsls	r2, r2, #3
 8003324:	4920      	ldr	r1, [pc, #128]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003348:	e00f      	b.n	800336a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d106      	bne.n	800335e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003350:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800335a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800335c:	e005      	b.n	800336a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003368:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003376:	f7fd fd21 	bl	8000dbc <HAL_GetTick>
 800337a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800337c:	e008      	b.n	8003390 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800337e:	f7fd fd1d 	bl	8000dbc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e006      	b.n	800339e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400
 80033ac:	ffff0007 	.word	0xffff0007

080033b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e049      	b.n	8003456 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f841 	bl	800345e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f000 f9e8 	bl	80037c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e054      	b.n	8003536 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <HAL_TIM_Base_Start_IT+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d01d      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_TIM_Base_Start_IT+0xd4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_TIM_Base_Start_IT+0xd8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_TIM_Base_Start_IT+0xdc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_TIM_Base_Start_IT+0xe0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_TIM_Base_Start_IT+0xe4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_TIM_Base_Start_IT+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d115      	bne.n	8003520 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_TIM_Base_Start_IT+0xec>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d015      	beq.n	8003532 <HAL_TIM_Base_Start_IT+0xbe>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d011      	beq.n	8003532 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351e:	e008      	b.n	8003532 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e000      	b.n	8003534 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40001800 	.word	0x40001800
 800355c:	40014000 	.word	0x40014000
 8003560:	00010007 	.word	0x00010007

08003564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0202 	mvn.w	r2, #2
 8003598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8e9 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8db 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8ec 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0204 	mvn.w	r2, #4
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8c3 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8b5 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f8c6 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0208 	mvn.w	r2, #8
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f89d 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f88f 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8a0 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0210 	mvn.w	r2, #16
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2208      	movs	r2, #8
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f877 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f869 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f87a 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0201 	mvn.w	r2, #1
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd f954 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f913 	bl	8003924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00c      	beq.n	8003722 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f90b 	bl	8003938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f834 	bl	80037ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0220 	mvn.w	r2, #32
 8003762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8d3 	bl	8003910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a46      	ldr	r2, [pc, #280]	; (80038f0 <TIM_Base_SetConfig+0x12c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d00f      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a43      	ldr	r2, [pc, #268]	; (80038f4 <TIM_Base_SetConfig+0x130>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <TIM_Base_SetConfig+0x134>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a41      	ldr	r2, [pc, #260]	; (80038fc <TIM_Base_SetConfig+0x138>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a40      	ldr	r2, [pc, #256]	; (8003900 <TIM_Base_SetConfig+0x13c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d108      	bne.n	8003816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a35      	ldr	r2, [pc, #212]	; (80038f0 <TIM_Base_SetConfig+0x12c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01f      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d01b      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a32      	ldr	r2, [pc, #200]	; (80038f4 <TIM_Base_SetConfig+0x130>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d017      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a31      	ldr	r2, [pc, #196]	; (80038f8 <TIM_Base_SetConfig+0x134>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a30      	ldr	r2, [pc, #192]	; (80038fc <TIM_Base_SetConfig+0x138>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00f      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <TIM_Base_SetConfig+0x13c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00b      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2e      	ldr	r2, [pc, #184]	; (8003904 <TIM_Base_SetConfig+0x140>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2d      	ldr	r2, [pc, #180]	; (8003908 <TIM_Base_SetConfig+0x144>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d003      	beq.n	800385e <TIM_Base_SetConfig+0x9a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2c      	ldr	r2, [pc, #176]	; (800390c <TIM_Base_SetConfig+0x148>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <TIM_Base_SetConfig+0x12c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00f      	beq.n	80038bc <TIM_Base_SetConfig+0xf8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <TIM_Base_SetConfig+0x13c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00b      	beq.n	80038bc <TIM_Base_SetConfig+0xf8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a17      	ldr	r2, [pc, #92]	; (8003904 <TIM_Base_SetConfig+0x140>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <TIM_Base_SetConfig+0xf8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a16      	ldr	r2, [pc, #88]	; (8003908 <TIM_Base_SetConfig+0x144>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0xf8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <TIM_Base_SetConfig+0x148>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d105      	bne.n	80038e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f023 0201 	bic.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	611a      	str	r2, [r3, #16]
  }
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40010400 	.word	0x40010400
 8003904:	40014000 	.word	0x40014000
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800

08003910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e042      	b.n	80039e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd f837 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2224      	movs	r2, #36	; 0x24
 800397a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fee6 	bl	8004768 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f97b 	bl	8003c98 <UART_SetConfig>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e01b      	b.n	80039e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 ff65 	bl	80048ac <UART_CheckIdleState>
 80039e2:	4603      	mov	r3, r0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d17b      	bne.n	8003afe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_Transmit+0x26>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e074      	b.n	8003b00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a26:	f7fd f9c9 	bl	8000dbc <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a60:	e030      	b.n	8003ac4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 ffc7 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e03d      	b.n	8003b00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1c8      	bne.n	8003a62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 ff90 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e006      	b.n	8003b00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	f040 80b5 	bne.w	8003c8e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Receive+0x28>
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0ad      	b.n	8003c90 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2222      	movs	r2, #34	; 0x22
 8003b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4a:	f7fd f937 	bl	8000dbc <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b68:	d10e      	bne.n	8003b88 <HAL_UART_Receive+0x80>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <HAL_UART_Receive+0x76>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003b7c:	e02d      	b.n	8003bda <HAL_UART_Receive+0xd2>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	22ff      	movs	r2, #255	; 0xff
 8003b82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003b86:	e028      	b.n	8003bda <HAL_UART_Receive+0xd2>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_UART_Receive+0xa4>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_UART_Receive+0x9a>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	22ff      	movs	r2, #255	; 0xff
 8003b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ba0:	e01b      	b.n	8003bda <HAL_UART_Receive+0xd2>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	227f      	movs	r2, #127	; 0x7f
 8003ba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003baa:	e016      	b.n	8003bda <HAL_UART_Receive+0xd2>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_UART_Receive+0xca>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <HAL_UART_Receive+0xc0>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	227f      	movs	r2, #127	; 0x7f
 8003bc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003bc6:	e008      	b.n	8003bda <HAL_UART_Receive+0xd2>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	223f      	movs	r2, #63	; 0x3f
 8003bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003bd0:	e003      	b.n	8003bda <HAL_UART_Receive+0xd2>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003be0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d108      	bne.n	8003bfe <HAL_UART_Receive+0xf6>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e003      	b.n	8003c06 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c06:	e036      	b.n	8003c76 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2120      	movs	r1, #32
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fef4 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e032      	b.n	8003c90 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10c      	bne.n	8003c4a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	8a7b      	ldrh	r3, [r7, #18]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	3302      	adds	r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	e00c      	b.n	8003c64 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	8a7b      	ldrh	r3, [r7, #18]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4013      	ands	r3, r2
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3301      	adds	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1c2      	bne.n	8003c08 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c9c:	b092      	sub	sp, #72	; 0x48
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4bbe      	ldr	r3, [pc, #760]	; (8003fc0 <UART_SetConfig+0x328>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4ab3      	ldr	r2, [pc, #716]	; (8003fc4 <UART_SetConfig+0x32c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d00:	4313      	orrs	r3, r2
 8003d02:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	4baf      	ldr	r3, [pc, #700]	; (8003fc8 <UART_SetConfig+0x330>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f023 010f 	bic.w	r1, r3, #15
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4aa6      	ldr	r2, [pc, #664]	; (8003fcc <UART_SetConfig+0x334>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d177      	bne.n	8003e28 <UART_SetConfig+0x190>
 8003d38:	4ba5      	ldr	r3, [pc, #660]	; (8003fd0 <UART_SetConfig+0x338>)
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d40:	2b28      	cmp	r3, #40	; 0x28
 8003d42:	d86d      	bhi.n	8003e20 <UART_SetConfig+0x188>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <UART_SetConfig+0xb4>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003df1 	.word	0x08003df1
 8003d50:	08003e21 	.word	0x08003e21
 8003d54:	08003e21 	.word	0x08003e21
 8003d58:	08003e21 	.word	0x08003e21
 8003d5c:	08003e21 	.word	0x08003e21
 8003d60:	08003e21 	.word	0x08003e21
 8003d64:	08003e21 	.word	0x08003e21
 8003d68:	08003e21 	.word	0x08003e21
 8003d6c:	08003df9 	.word	0x08003df9
 8003d70:	08003e21 	.word	0x08003e21
 8003d74:	08003e21 	.word	0x08003e21
 8003d78:	08003e21 	.word	0x08003e21
 8003d7c:	08003e21 	.word	0x08003e21
 8003d80:	08003e21 	.word	0x08003e21
 8003d84:	08003e21 	.word	0x08003e21
 8003d88:	08003e21 	.word	0x08003e21
 8003d8c:	08003e01 	.word	0x08003e01
 8003d90:	08003e21 	.word	0x08003e21
 8003d94:	08003e21 	.word	0x08003e21
 8003d98:	08003e21 	.word	0x08003e21
 8003d9c:	08003e21 	.word	0x08003e21
 8003da0:	08003e21 	.word	0x08003e21
 8003da4:	08003e21 	.word	0x08003e21
 8003da8:	08003e21 	.word	0x08003e21
 8003dac:	08003e09 	.word	0x08003e09
 8003db0:	08003e21 	.word	0x08003e21
 8003db4:	08003e21 	.word	0x08003e21
 8003db8:	08003e21 	.word	0x08003e21
 8003dbc:	08003e21 	.word	0x08003e21
 8003dc0:	08003e21 	.word	0x08003e21
 8003dc4:	08003e21 	.word	0x08003e21
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e11 	.word	0x08003e11
 8003dd0:	08003e21 	.word	0x08003e21
 8003dd4:	08003e21 	.word	0x08003e21
 8003dd8:	08003e21 	.word	0x08003e21
 8003ddc:	08003e21 	.word	0x08003e21
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e21 	.word	0x08003e21
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003df6:	e222      	b.n	800423e <UART_SetConfig+0x5a6>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dfe:	e21e      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e00:	2308      	movs	r3, #8
 8003e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e06:	e21a      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e0e:	e216      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e10:	2320      	movs	r3, #32
 8003e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e16:	e212      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e18:	2340      	movs	r3, #64	; 0x40
 8003e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e1e:	e20e      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e26:	e20a      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a69      	ldr	r2, [pc, #420]	; (8003fd4 <UART_SetConfig+0x33c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d130      	bne.n	8003e94 <UART_SetConfig+0x1fc>
 8003e32:	4b67      	ldr	r3, [pc, #412]	; (8003fd0 <UART_SetConfig+0x338>)
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d826      	bhi.n	8003e8c <UART_SetConfig+0x1f4>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0x1ac>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e5d 	.word	0x08003e5d
 8003e48:	08003e65 	.word	0x08003e65
 8003e4c:	08003e6d 	.word	0x08003e6d
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e7d 	.word	0x08003e7d
 8003e58:	08003e85 	.word	0x08003e85
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e62:	e1ec      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e64:	2304      	movs	r3, #4
 8003e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e6a:	e1e8      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e72:	e1e4      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e74:	2310      	movs	r3, #16
 8003e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e7a:	e1e0      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e82:	e1dc      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e84:	2340      	movs	r3, #64	; 0x40
 8003e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e8a:	e1d8      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e92:	e1d4      	b.n	800423e <UART_SetConfig+0x5a6>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a4f      	ldr	r2, [pc, #316]	; (8003fd8 <UART_SetConfig+0x340>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d130      	bne.n	8003f00 <UART_SetConfig+0x268>
 8003e9e:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <UART_SetConfig+0x338>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d826      	bhi.n	8003ef8 <UART_SetConfig+0x260>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <UART_SetConfig+0x218>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ec9 	.word	0x08003ec9
 8003eb4:	08003ed1 	.word	0x08003ed1
 8003eb8:	08003ed9 	.word	0x08003ed9
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ece:	e1b6      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ed6:	e1b2      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ed8:	2308      	movs	r3, #8
 8003eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ede:	e1ae      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee6:	e1aa      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ee8:	2320      	movs	r3, #32
 8003eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eee:	e1a6      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ef0:	2340      	movs	r3, #64	; 0x40
 8003ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ef6:	e1a2      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efe:	e19e      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <UART_SetConfig+0x344>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d130      	bne.n	8003f6c <UART_SetConfig+0x2d4>
 8003f0a:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <UART_SetConfig+0x338>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d826      	bhi.n	8003f64 <UART_SetConfig+0x2cc>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0x284>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f35 	.word	0x08003f35
 8003f20:	08003f3d 	.word	0x08003f3d
 8003f24:	08003f45 	.word	0x08003f45
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f3a:	e180      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f42:	e17c      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f44:	2308      	movs	r3, #8
 8003f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4a:	e178      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f52:	e174      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f54:	2320      	movs	r3, #32
 8003f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f5a:	e170      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f5c:	2340      	movs	r3, #64	; 0x40
 8003f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f62:	e16c      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f6a:	e168      	b.n	800423e <UART_SetConfig+0x5a6>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <UART_SetConfig+0x348>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d142      	bne.n	8003ffc <UART_SetConfig+0x364>
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <UART_SetConfig+0x338>)
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d838      	bhi.n	8003ff4 <UART_SetConfig+0x35c>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0x2f0>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fa1 	.word	0x08003fa1
 8003f8c:	08003fa9 	.word	0x08003fa9
 8003f90:	08003fb1 	.word	0x08003fb1
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fa6:	e14a      	b.n	800423e <UART_SetConfig+0x5a6>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fae:	e146      	b.n	800423e <UART_SetConfig+0x5a6>
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fb6:	e142      	b.n	800423e <UART_SetConfig+0x5a6>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fbe:	e13e      	b.n	800423e <UART_SetConfig+0x5a6>
 8003fc0:	cfff69f3 	.word	0xcfff69f3
 8003fc4:	58000c00 	.word	0x58000c00
 8003fc8:	11fff4ff 	.word	0x11fff4ff
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	40004800 	.word	0x40004800
 8003fdc:	40004c00 	.word	0x40004c00
 8003fe0:	40005000 	.word	0x40005000
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fea:	e128      	b.n	800423e <UART_SetConfig+0x5a6>
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ff2:	e124      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ffa:	e120      	b.n	800423e <UART_SetConfig+0x5a6>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4acb      	ldr	r2, [pc, #812]	; (8004330 <UART_SetConfig+0x698>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d176      	bne.n	80040f4 <UART_SetConfig+0x45c>
 8004006:	4bcb      	ldr	r3, [pc, #812]	; (8004334 <UART_SetConfig+0x69c>)
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400e:	2b28      	cmp	r3, #40	; 0x28
 8004010:	d86c      	bhi.n	80040ec <UART_SetConfig+0x454>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0x380>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	080040bd 	.word	0x080040bd
 800401c:	080040ed 	.word	0x080040ed
 8004020:	080040ed 	.word	0x080040ed
 8004024:	080040ed 	.word	0x080040ed
 8004028:	080040ed 	.word	0x080040ed
 800402c:	080040ed 	.word	0x080040ed
 8004030:	080040ed 	.word	0x080040ed
 8004034:	080040ed 	.word	0x080040ed
 8004038:	080040c5 	.word	0x080040c5
 800403c:	080040ed 	.word	0x080040ed
 8004040:	080040ed 	.word	0x080040ed
 8004044:	080040ed 	.word	0x080040ed
 8004048:	080040ed 	.word	0x080040ed
 800404c:	080040ed 	.word	0x080040ed
 8004050:	080040ed 	.word	0x080040ed
 8004054:	080040ed 	.word	0x080040ed
 8004058:	080040cd 	.word	0x080040cd
 800405c:	080040ed 	.word	0x080040ed
 8004060:	080040ed 	.word	0x080040ed
 8004064:	080040ed 	.word	0x080040ed
 8004068:	080040ed 	.word	0x080040ed
 800406c:	080040ed 	.word	0x080040ed
 8004070:	080040ed 	.word	0x080040ed
 8004074:	080040ed 	.word	0x080040ed
 8004078:	080040d5 	.word	0x080040d5
 800407c:	080040ed 	.word	0x080040ed
 8004080:	080040ed 	.word	0x080040ed
 8004084:	080040ed 	.word	0x080040ed
 8004088:	080040ed 	.word	0x080040ed
 800408c:	080040ed 	.word	0x080040ed
 8004090:	080040ed 	.word	0x080040ed
 8004094:	080040ed 	.word	0x080040ed
 8004098:	080040dd 	.word	0x080040dd
 800409c:	080040ed 	.word	0x080040ed
 80040a0:	080040ed 	.word	0x080040ed
 80040a4:	080040ed 	.word	0x080040ed
 80040a8:	080040ed 	.word	0x080040ed
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040ed 	.word	0x080040ed
 80040b4:	080040ed 	.word	0x080040ed
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c2:	e0bc      	b.n	800423e <UART_SetConfig+0x5a6>
 80040c4:	2304      	movs	r3, #4
 80040c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ca:	e0b8      	b.n	800423e <UART_SetConfig+0x5a6>
 80040cc:	2308      	movs	r3, #8
 80040ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040d2:	e0b4      	b.n	800423e <UART_SetConfig+0x5a6>
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040da:	e0b0      	b.n	800423e <UART_SetConfig+0x5a6>
 80040dc:	2320      	movs	r3, #32
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040e2:	e0ac      	b.n	800423e <UART_SetConfig+0x5a6>
 80040e4:	2340      	movs	r3, #64	; 0x40
 80040e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ea:	e0a8      	b.n	800423e <UART_SetConfig+0x5a6>
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040f2:	e0a4      	b.n	800423e <UART_SetConfig+0x5a6>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a8f      	ldr	r2, [pc, #572]	; (8004338 <UART_SetConfig+0x6a0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d130      	bne.n	8004160 <UART_SetConfig+0x4c8>
 80040fe:	4b8d      	ldr	r3, [pc, #564]	; (8004334 <UART_SetConfig+0x69c>)
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b05      	cmp	r3, #5
 8004108:	d826      	bhi.n	8004158 <UART_SetConfig+0x4c0>
 800410a:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x478>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004129 	.word	0x08004129
 8004114:	08004131 	.word	0x08004131
 8004118:	08004139 	.word	0x08004139
 800411c:	08004141 	.word	0x08004141
 8004120:	08004149 	.word	0x08004149
 8004124:	08004151 	.word	0x08004151
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800412e:	e086      	b.n	800423e <UART_SetConfig+0x5a6>
 8004130:	2304      	movs	r3, #4
 8004132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004136:	e082      	b.n	800423e <UART_SetConfig+0x5a6>
 8004138:	2308      	movs	r3, #8
 800413a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800413e:	e07e      	b.n	800423e <UART_SetConfig+0x5a6>
 8004140:	2310      	movs	r3, #16
 8004142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004146:	e07a      	b.n	800423e <UART_SetConfig+0x5a6>
 8004148:	2320      	movs	r3, #32
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800414e:	e076      	b.n	800423e <UART_SetConfig+0x5a6>
 8004150:	2340      	movs	r3, #64	; 0x40
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004156:	e072      	b.n	800423e <UART_SetConfig+0x5a6>
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800415e:	e06e      	b.n	800423e <UART_SetConfig+0x5a6>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a75      	ldr	r2, [pc, #468]	; (800433c <UART_SetConfig+0x6a4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d130      	bne.n	80041cc <UART_SetConfig+0x534>
 800416a:	4b72      	ldr	r3, [pc, #456]	; (8004334 <UART_SetConfig+0x69c>)
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	2b05      	cmp	r3, #5
 8004174:	d826      	bhi.n	80041c4 <UART_SetConfig+0x52c>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0x4e4>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	08004195 	.word	0x08004195
 8004180:	0800419d 	.word	0x0800419d
 8004184:	080041a5 	.word	0x080041a5
 8004188:	080041ad 	.word	0x080041ad
 800418c:	080041b5 	.word	0x080041b5
 8004190:	080041bd 	.word	0x080041bd
 8004194:	2300      	movs	r3, #0
 8004196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419a:	e050      	b.n	800423e <UART_SetConfig+0x5a6>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a2:	e04c      	b.n	800423e <UART_SetConfig+0x5a6>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041aa:	e048      	b.n	800423e <UART_SetConfig+0x5a6>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b2:	e044      	b.n	800423e <UART_SetConfig+0x5a6>
 80041b4:	2320      	movs	r3, #32
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ba:	e040      	b.n	800423e <UART_SetConfig+0x5a6>
 80041bc:	2340      	movs	r3, #64	; 0x40
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c2:	e03c      	b.n	800423e <UART_SetConfig+0x5a6>
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ca:	e038      	b.n	800423e <UART_SetConfig+0x5a6>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5b      	ldr	r2, [pc, #364]	; (8004340 <UART_SetConfig+0x6a8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d130      	bne.n	8004238 <UART_SetConfig+0x5a0>
 80041d6:	4b57      	ldr	r3, [pc, #348]	; (8004334 <UART_SetConfig+0x69c>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d826      	bhi.n	8004230 <UART_SetConfig+0x598>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0x550>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	08004201 	.word	0x08004201
 80041ec:	08004209 	.word	0x08004209
 80041f0:	08004211 	.word	0x08004211
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004229 	.word	0x08004229
 8004200:	2302      	movs	r3, #2
 8004202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004206:	e01a      	b.n	800423e <UART_SetConfig+0x5a6>
 8004208:	2304      	movs	r3, #4
 800420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420e:	e016      	b.n	800423e <UART_SetConfig+0x5a6>
 8004210:	2308      	movs	r3, #8
 8004212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004216:	e012      	b.n	800423e <UART_SetConfig+0x5a6>
 8004218:	2310      	movs	r3, #16
 800421a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421e:	e00e      	b.n	800423e <UART_SetConfig+0x5a6>
 8004220:	2320      	movs	r3, #32
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004226:	e00a      	b.n	800423e <UART_SetConfig+0x5a6>
 8004228:	2340      	movs	r3, #64	; 0x40
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422e:	e006      	b.n	800423e <UART_SetConfig+0x5a6>
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004236:	e002      	b.n	800423e <UART_SetConfig+0x5a6>
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3f      	ldr	r2, [pc, #252]	; (8004340 <UART_SetConfig+0x6a8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	f040 80f8 	bne.w	800443a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800424a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800424e:	2b20      	cmp	r3, #32
 8004250:	dc46      	bgt.n	80042e0 <UART_SetConfig+0x648>
 8004252:	2b02      	cmp	r3, #2
 8004254:	f2c0 8082 	blt.w	800435c <UART_SetConfig+0x6c4>
 8004258:	3b02      	subs	r3, #2
 800425a:	2b1e      	cmp	r3, #30
 800425c:	d87e      	bhi.n	800435c <UART_SetConfig+0x6c4>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0x5cc>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	080042e7 	.word	0x080042e7
 8004268:	0800435d 	.word	0x0800435d
 800426c:	080042ef 	.word	0x080042ef
 8004270:	0800435d 	.word	0x0800435d
 8004274:	0800435d 	.word	0x0800435d
 8004278:	0800435d 	.word	0x0800435d
 800427c:	080042ff 	.word	0x080042ff
 8004280:	0800435d 	.word	0x0800435d
 8004284:	0800435d 	.word	0x0800435d
 8004288:	0800435d 	.word	0x0800435d
 800428c:	0800435d 	.word	0x0800435d
 8004290:	0800435d 	.word	0x0800435d
 8004294:	0800435d 	.word	0x0800435d
 8004298:	0800435d 	.word	0x0800435d
 800429c:	0800430f 	.word	0x0800430f
 80042a0:	0800435d 	.word	0x0800435d
 80042a4:	0800435d 	.word	0x0800435d
 80042a8:	0800435d 	.word	0x0800435d
 80042ac:	0800435d 	.word	0x0800435d
 80042b0:	0800435d 	.word	0x0800435d
 80042b4:	0800435d 	.word	0x0800435d
 80042b8:	0800435d 	.word	0x0800435d
 80042bc:	0800435d 	.word	0x0800435d
 80042c0:	0800435d 	.word	0x0800435d
 80042c4:	0800435d 	.word	0x0800435d
 80042c8:	0800435d 	.word	0x0800435d
 80042cc:	0800435d 	.word	0x0800435d
 80042d0:	0800435d 	.word	0x0800435d
 80042d4:	0800435d 	.word	0x0800435d
 80042d8:	0800435d 	.word	0x0800435d
 80042dc:	0800434f 	.word	0x0800434f
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d037      	beq.n	8004354 <UART_SetConfig+0x6bc>
 80042e4:	e03a      	b.n	800435c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80042e6:	f7fe fc41 	bl	8002b6c <HAL_RCCEx_GetD3PCLK1Freq>
 80042ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80042ec:	e03c      	b.n	8004368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fc50 	bl	8002b98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042fc:	e034      	b.n	8004368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042fe:	f107 0318 	add.w	r3, r7, #24
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fd9c 	bl	8002e40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800430c:	e02c      	b.n	8004368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <UART_SetConfig+0x69c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <UART_SetConfig+0x69c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	08db      	lsrs	r3, r3, #3
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	4a07      	ldr	r2, [pc, #28]	; (8004344 <UART_SetConfig+0x6ac>)
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800432c:	e01c      	b.n	8004368 <UART_SetConfig+0x6d0>
 800432e:	bf00      	nop
 8004330:	40011400 	.word	0x40011400
 8004334:	58024400 	.word	0x58024400
 8004338:	40007800 	.word	0x40007800
 800433c:	40007c00 	.word	0x40007c00
 8004340:	58000c00 	.word	0x58000c00
 8004344:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004348:	4b9d      	ldr	r3, [pc, #628]	; (80045c0 <UART_SetConfig+0x928>)
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800434c:	e00c      	b.n	8004368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800434e:	4b9d      	ldr	r3, [pc, #628]	; (80045c4 <UART_SetConfig+0x92c>)
 8004350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004352:	e009      	b.n	8004368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800435a:	e005      	b.n	8004368 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004366:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 81de 	beq.w	800472c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	4a94      	ldr	r2, [pc, #592]	; (80045c8 <UART_SetConfig+0x930>)
 8004376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437a:	461a      	mov	r2, r3
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004382:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004390:	429a      	cmp	r2, r3
 8004392:	d305      	bcc.n	80043a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800439a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439c:	429a      	cmp	r2, r3
 800439e:	d903      	bls.n	80043a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80043a6:	e1c1      	b.n	800472c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043aa:	2200      	movs	r2, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	60fa      	str	r2, [r7, #12]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	4a84      	ldr	r2, [pc, #528]	; (80045c8 <UART_SetConfig+0x930>)
 80043b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2200      	movs	r2, #0
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043ca:	f7fb ff89 	bl	80002e0 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	020b      	lsls	r3, r1, #8
 80043e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043e4:	0202      	lsls	r2, r0, #8
 80043e6:	6979      	ldr	r1, [r7, #20]
 80043e8:	6849      	ldr	r1, [r1, #4]
 80043ea:	0849      	lsrs	r1, r1, #1
 80043ec:	2000      	movs	r0, #0
 80043ee:	460c      	mov	r4, r1
 80043f0:	4605      	mov	r5, r0
 80043f2:	eb12 0804 	adds.w	r8, r2, r4
 80043f6:	eb43 0905 	adc.w	r9, r3, r5
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	469a      	mov	sl, r3
 8004402:	4693      	mov	fp, r2
 8004404:	4652      	mov	r2, sl
 8004406:	465b      	mov	r3, fp
 8004408:	4640      	mov	r0, r8
 800440a:	4649      	mov	r1, r9
 800440c:	f7fb ff68 	bl	80002e0 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4613      	mov	r3, r2
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441e:	d308      	bcc.n	8004432 <UART_SetConfig+0x79a>
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004426:	d204      	bcs.n	8004432 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	e17c      	b.n	800472c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004438:	e178      	b.n	800472c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	f040 80c5 	bne.w	80045d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004446:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800444a:	2b20      	cmp	r3, #32
 800444c:	dc48      	bgt.n	80044e0 <UART_SetConfig+0x848>
 800444e:	2b00      	cmp	r3, #0
 8004450:	db7b      	blt.n	800454a <UART_SetConfig+0x8b2>
 8004452:	2b20      	cmp	r3, #32
 8004454:	d879      	bhi.n	800454a <UART_SetConfig+0x8b2>
 8004456:	a201      	add	r2, pc, #4	; (adr r2, 800445c <UART_SetConfig+0x7c4>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	080044e7 	.word	0x080044e7
 8004460:	080044ef 	.word	0x080044ef
 8004464:	0800454b 	.word	0x0800454b
 8004468:	0800454b 	.word	0x0800454b
 800446c:	080044f7 	.word	0x080044f7
 8004470:	0800454b 	.word	0x0800454b
 8004474:	0800454b 	.word	0x0800454b
 8004478:	0800454b 	.word	0x0800454b
 800447c:	08004507 	.word	0x08004507
 8004480:	0800454b 	.word	0x0800454b
 8004484:	0800454b 	.word	0x0800454b
 8004488:	0800454b 	.word	0x0800454b
 800448c:	0800454b 	.word	0x0800454b
 8004490:	0800454b 	.word	0x0800454b
 8004494:	0800454b 	.word	0x0800454b
 8004498:	0800454b 	.word	0x0800454b
 800449c:	08004517 	.word	0x08004517
 80044a0:	0800454b 	.word	0x0800454b
 80044a4:	0800454b 	.word	0x0800454b
 80044a8:	0800454b 	.word	0x0800454b
 80044ac:	0800454b 	.word	0x0800454b
 80044b0:	0800454b 	.word	0x0800454b
 80044b4:	0800454b 	.word	0x0800454b
 80044b8:	0800454b 	.word	0x0800454b
 80044bc:	0800454b 	.word	0x0800454b
 80044c0:	0800454b 	.word	0x0800454b
 80044c4:	0800454b 	.word	0x0800454b
 80044c8:	0800454b 	.word	0x0800454b
 80044cc:	0800454b 	.word	0x0800454b
 80044d0:	0800454b 	.word	0x0800454b
 80044d4:	0800454b 	.word	0x0800454b
 80044d8:	0800454b 	.word	0x0800454b
 80044dc:	0800453d 	.word	0x0800453d
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d02e      	beq.n	8004542 <UART_SetConfig+0x8aa>
 80044e4:	e031      	b.n	800454a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e6:	f7fd f8c9 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 80044ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044ec:	e033      	b.n	8004556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ee:	f7fd f8db 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 80044f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044f4:	e02f      	b.n	8004556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fb4c 	bl	8002b98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004504:	e027      	b.n	8004556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004506:	f107 0318 	add.w	r3, r7, #24
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fc98 	bl	8002e40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004514:	e01f      	b.n	8004556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004516:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <UART_SetConfig+0x934>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <UART_SetConfig+0x934>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	08db      	lsrs	r3, r3, #3
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	4a24      	ldr	r2, [pc, #144]	; (80045c0 <UART_SetConfig+0x928>)
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004534:	e00f      	b.n	8004556 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004536:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <UART_SetConfig+0x928>)
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800453a:	e00c      	b.n	8004556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800453c:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <UART_SetConfig+0x92c>)
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004540:	e009      	b.n	8004556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004548:	e005      	b.n	8004556 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80e7 	beq.w	800472c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <UART_SetConfig+0x930>)
 8004564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004568:	461a      	mov	r2, r3
 800456a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004570:	005a      	lsls	r2, r3, #1
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	441a      	add	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d916      	bls.n	80045b8 <UART_SetConfig+0x920>
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d212      	bcs.n	80045b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	b29b      	uxth	r3, r3
 8004596:	f023 030f 	bic.w	r3, r3, #15
 800459a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045aa:	4313      	orrs	r3, r2
 80045ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e0b9      	b.n	800472c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80045be:	e0b5      	b.n	800472c <UART_SetConfig+0xa94>
 80045c0:	03d09000 	.word	0x03d09000
 80045c4:	003d0900 	.word	0x003d0900
 80045c8:	08006530 	.word	0x08006530
 80045cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	dc49      	bgt.n	800466c <UART_SetConfig+0x9d4>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	db7c      	blt.n	80046d6 <UART_SetConfig+0xa3e>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d87a      	bhi.n	80046d6 <UART_SetConfig+0xa3e>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x950>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	08004673 	.word	0x08004673
 80045ec:	0800467b 	.word	0x0800467b
 80045f0:	080046d7 	.word	0x080046d7
 80045f4:	080046d7 	.word	0x080046d7
 80045f8:	08004683 	.word	0x08004683
 80045fc:	080046d7 	.word	0x080046d7
 8004600:	080046d7 	.word	0x080046d7
 8004604:	080046d7 	.word	0x080046d7
 8004608:	08004693 	.word	0x08004693
 800460c:	080046d7 	.word	0x080046d7
 8004610:	080046d7 	.word	0x080046d7
 8004614:	080046d7 	.word	0x080046d7
 8004618:	080046d7 	.word	0x080046d7
 800461c:	080046d7 	.word	0x080046d7
 8004620:	080046d7 	.word	0x080046d7
 8004624:	080046d7 	.word	0x080046d7
 8004628:	080046a3 	.word	0x080046a3
 800462c:	080046d7 	.word	0x080046d7
 8004630:	080046d7 	.word	0x080046d7
 8004634:	080046d7 	.word	0x080046d7
 8004638:	080046d7 	.word	0x080046d7
 800463c:	080046d7 	.word	0x080046d7
 8004640:	080046d7 	.word	0x080046d7
 8004644:	080046d7 	.word	0x080046d7
 8004648:	080046d7 	.word	0x080046d7
 800464c:	080046d7 	.word	0x080046d7
 8004650:	080046d7 	.word	0x080046d7
 8004654:	080046d7 	.word	0x080046d7
 8004658:	080046d7 	.word	0x080046d7
 800465c:	080046d7 	.word	0x080046d7
 8004660:	080046d7 	.word	0x080046d7
 8004664:	080046d7 	.word	0x080046d7
 8004668:	080046c9 	.word	0x080046c9
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d02e      	beq.n	80046ce <UART_SetConfig+0xa36>
 8004670:	e031      	b.n	80046d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004672:	f7fd f803 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 8004676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004678:	e033      	b.n	80046e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800467a:	f7fd f815 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 800467e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004680:	e02f      	b.n	80046e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fa86 	bl	8002b98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004690:	e027      	b.n	80046e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004692:	f107 0318 	add.w	r3, r7, #24
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fbd2 	bl	8002e40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046a0:	e01f      	b.n	80046e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a2:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <UART_SetConfig+0xac0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <UART_SetConfig+0xac0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	08db      	lsrs	r3, r3, #3
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	4a28      	ldr	r2, [pc, #160]	; (800475c <UART_SetConfig+0xac4>)
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046c0:	e00f      	b.n	80046e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <UART_SetConfig+0xac4>)
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046c6:	e00c      	b.n	80046e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046c8:	4b25      	ldr	r3, [pc, #148]	; (8004760 <UART_SetConfig+0xac8>)
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046cc:	e009      	b.n	80046e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046d4:	e005      	b.n	80046e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80046e0:	bf00      	nop
    }

    if (pclk != 0U)
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d021      	beq.n	800472c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <UART_SetConfig+0xacc>)
 80046ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	441a      	add	r2, r3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	2b0f      	cmp	r3, #15
 8004710:	d909      	bls.n	8004726 <UART_SetConfig+0xa8e>
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d205      	bcs.n	8004726 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	b29a      	uxth	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60da      	str	r2, [r3, #12]
 8004724:	e002      	b.n	800472c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2201      	movs	r2, #1
 8004730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2201      	movs	r2, #1
 8004738:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2200      	movs	r2, #0
 8004740:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004748:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800474c:	4618      	mov	r0, r3
 800474e:	3748      	adds	r7, #72	; 0x48
 8004750:	46bd      	mov	sp, r7
 8004752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
 800475c:	03d09000 	.word	0x03d09000
 8004760:	003d0900 	.word	0x003d0900
 8004764:	08006530 	.word	0x08006530

08004768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01a      	beq.n	800487e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004866:	d10a      	bne.n	800487e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
  }
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b098      	sub	sp, #96	; 0x60
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048bc:	f7fc fa7e 	bl	8000dbc <HAL_GetTick>
 80048c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d12f      	bne.n	8004930 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f88e 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d022      	beq.n	8004930 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004908:	647b      	str	r3, [r7, #68]	; 0x44
 800490a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800490e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e6      	bne.n	80048ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e063      	b.n	80049f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d149      	bne.n	80049d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004946:	2200      	movs	r2, #0
 8004948:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f857 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d03c      	beq.n	80049d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	623b      	str	r3, [r7, #32]
   return(result);
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800496c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
 8004978:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	60fb      	str	r3, [r7, #12]
   return(result);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049aa:	61fa      	str	r2, [r7, #28]
 80049ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	617b      	str	r3, [r7, #20]
   return(result);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e012      	b.n	80049f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3758      	adds	r7, #88	; 0x58
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a10:	e04f      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d04b      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fc f9cf 	bl	8000dbc <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e04e      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d037      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d034      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d031      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d110      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2208      	movs	r2, #8
 8004a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f839 	bl	8004adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e029      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8c:	d111      	bne.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f81f 	bl	8004adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d0a0      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b095      	sub	sp, #84	; 0x54
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b02:	643b      	str	r3, [r7, #64]	; 0x40
 8004b04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e6      	bne.n	8004ae4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <UART_EndRxTransfer+0xc8>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d118      	bne.n	8004b84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0310 	bic.w	r3, r3, #16
 8004b66:	647b      	str	r3, [r7, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e6      	bne.n	8004b52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004b98:	bf00      	nop
 8004b9a:	3754      	adds	r7, #84	; 0x54
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	effffffe 	.word	0xeffffffe

08004ba8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_UARTEx_DisableFifoMode+0x16>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e027      	b.n	8004c0e <HAL_UARTEx_DisableFifoMode+0x66>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2224      	movs	r2, #36	; 0x24
 8004bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e02d      	b.n	8004c8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2224      	movs	r2, #36	; 0x24
 8004c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f850 	bl	8004d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e02d      	b.n	8004d0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2224      	movs	r2, #36	; 0x24
 8004cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f812 	bl	8004d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d34:	e031      	b.n	8004d9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d36:	2310      	movs	r3, #16
 8004d38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	0e5b      	lsrs	r3, r3, #25
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	0f5b      	lsrs	r3, r3, #29
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d5e:	7bbb      	ldrb	r3, [r7, #14]
 8004d60:	7b3a      	ldrb	r2, [r7, #12]
 8004d62:	4911      	ldr	r1, [pc, #68]	; (8004da8 <UARTEx_SetNbDataToProcess+0x94>)
 8004d64:	5c8a      	ldrb	r2, [r1, r2]
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d6a:	7b3a      	ldrb	r2, [r7, #12]
 8004d6c:	490f      	ldr	r1, [pc, #60]	; (8004dac <UARTEx_SetNbDataToProcess+0x98>)
 8004d6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	7b7a      	ldrb	r2, [r7, #13]
 8004d80:	4909      	ldr	r1, [pc, #36]	; (8004da8 <UARTEx_SetNbDataToProcess+0x94>)
 8004d82:	5c8a      	ldrb	r2, [r1, r2]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d88:	7b7a      	ldrb	r2, [r7, #13]
 8004d8a:	4908      	ldr	r1, [pc, #32]	; (8004dac <UARTEx_SetNbDataToProcess+0x98>)
 8004d8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	08006548 	.word	0x08006548
 8004dac:	08006550 	.word	0x08006550

08004db0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc2:	2b84      	cmp	r3, #132	; 0x84
 8004dc4:	d005      	beq.n	8004dd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004dc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	3303      	adds	r3, #3
 8004dd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004de4:	f000 faf6 	bl	80053d4 <vTaskStartScheduler>
  
  return osOK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	bd80      	pop	{r7, pc}

08004dee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df0:	b089      	sub	sp, #36	; 0x24
 8004df2:	af04      	add	r7, sp, #16
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <osThreadCreate+0x54>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01c      	beq.n	8004e42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685c      	ldr	r4, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681d      	ldr	r5, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691e      	ldr	r6, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ffc8 	bl	8004db0 <makeFreeRtosPriority>
 8004e20:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	9100      	str	r1, [sp, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	4632      	mov	r2, r6
 8004e34:	4629      	mov	r1, r5
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 f8ed 	bl	8005016 <xTaskCreateStatic>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e01c      	b.n	8004e7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685c      	ldr	r4, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e4e:	b29e      	uxth	r6, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff ffaa 	bl	8004db0 <makeFreeRtosPriority>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	f107 030c 	add.w	r3, r7, #12
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	9200      	str	r2, [sp, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f000 f92f 	bl	80050d0 <xTaskCreate>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d001      	beq.n	8004e7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <osDelay+0x16>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	e000      	b.n	8004e9e <osDelay+0x18>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fa64 	bl	800536c <vTaskDelay>
  
  return osOK;
 8004ea4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f103 0208 	add.w	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f103 0208 	add.w	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f103 0208 	add.w	r2, r3, #8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d103      	bne.n	8004f70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e00c      	b.n	8004f8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3308      	adds	r3, #8
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	e002      	b.n	8004f7e <vListInsert+0x2e>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d2f6      	bcs.n	8004f78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6892      	ldr	r2, [r2, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6852      	ldr	r2, [r2, #4]
 8004fe2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d103      	bne.n	8004ff6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005016:	b580      	push	{r7, lr}
 8005018:	b08e      	sub	sp, #56	; 0x38
 800501a:	af04      	add	r7, sp, #16
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <xTaskCreateStatic+0x46>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	61fb      	str	r3, [r7, #28]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800505c:	23b4      	movs	r3, #180	; 0xb4
 800505e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2bb4      	cmp	r3, #180	; 0xb4
 8005064:	d00a      	beq.n	800507c <xTaskCreateStatic+0x66>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	61bb      	str	r3, [r7, #24]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800507c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01e      	beq.n	80050c2 <xTaskCreateStatic+0xac>
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01b      	beq.n	80050c2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005092:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	2202      	movs	r2, #2
 8005098:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800509c:	2300      	movs	r3, #0
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f851 	bl	800515c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050bc:	f000 f8ec 	bl	8005298 <prvAddNewTaskToReadyList>
 80050c0:	e001      	b.n	80050c6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050c6:	697b      	ldr	r3, [r7, #20]
	}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3728      	adds	r7, #40	; 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	; 0x30
 80050d4:	af04      	add	r7, sp, #16
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 feef 	bl	8005ec8 <pvPortMalloc>
 80050ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050f2:	20b4      	movs	r0, #180	; 0xb4
 80050f4:	f000 fee8 	bl	8005ec8 <pvPortMalloc>
 80050f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
 8005106:	e005      	b.n	8005114 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005108:	6978      	ldr	r0, [r7, #20]
 800510a:	f000 ffa9 	bl	8006060 <vPortFree>
 800510e:	e001      	b.n	8005114 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d017      	beq.n	800514a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	2300      	movs	r3, #0
 8005126:	9303      	str	r3, [sp, #12]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	9302      	str	r3, [sp, #8]
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f80f 	bl	800515c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800513e:	69f8      	ldr	r0, [r7, #28]
 8005140:	f000 f8aa 	bl	8005298 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005144:	2301      	movs	r3, #1
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e002      	b.n	8005150 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005150:	69bb      	ldr	r3, [r7, #24]
	}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005174:	440b      	add	r3, r1
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f023 0307 	bic.w	r3, r3, #7
 8005182:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	617b      	str	r3, [r7, #20]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01f      	beq.n	80051ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	e012      	b.n	80051d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	7819      	ldrb	r1, [r3, #0]
 80051b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	3334      	adds	r3, #52	; 0x34
 80051c0:	460a      	mov	r2, r1
 80051c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d006      	beq.n	80051de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2b0f      	cmp	r3, #15
 80051da:	d9e9      	bls.n	80051b0 <prvInitialiseNewTask+0x54>
 80051dc:	e000      	b.n	80051e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80051de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e8:	e003      	b.n	80051f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2b06      	cmp	r3, #6
 80051f6:	d901      	bls.n	80051fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051f8:	2306      	movs	r3, #6
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005200:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005206:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	2200      	movs	r2, #0
 800520c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	3304      	adds	r3, #4
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fe6b 	bl	8004eee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	3318      	adds	r3, #24
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fe66 	bl	8004eee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	f1c3 0207 	rsb	r2, r3, #7
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	2200      	movs	r2, #0
 8005244:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	334c      	adds	r3, #76	; 0x4c
 800524c:	2260      	movs	r2, #96	; 0x60
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f001 f849 	bl	80062e8 <memset>
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	4a0c      	ldr	r2, [pc, #48]	; (800528c <prvInitialiseNewTask+0x130>)
 800525a:	651a      	str	r2, [r3, #80]	; 0x50
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	4a0c      	ldr	r2, [pc, #48]	; (8005290 <prvInitialiseNewTask+0x134>)
 8005260:	655a      	str	r2, [r3, #84]	; 0x54
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <prvInitialiseNewTask+0x138>)
 8005266:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	69b8      	ldr	r0, [r7, #24]
 800526e:	f000 fc1f 	bl	8005ab0 <pxPortInitialiseStack>
 8005272:	4602      	mov	r2, r0
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005282:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	08006578 	.word	0x08006578
 8005290:	08006598 	.word	0x08006598
 8005294:	08006558 	.word	0x08006558

08005298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052a0:	f000 fd30 	bl	8005d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052a4:	4b2a      	ldr	r3, [pc, #168]	; (8005350 <prvAddNewTaskToReadyList+0xb8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a29      	ldr	r2, [pc, #164]	; (8005350 <prvAddNewTaskToReadyList+0xb8>)
 80052ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052b6:	4a27      	ldr	r2, [pc, #156]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052bc:	4b24      	ldr	r3, [pc, #144]	; (8005350 <prvAddNewTaskToReadyList+0xb8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d110      	bne.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052c4:	f000 facc 	bl	8005860 <prvInitialiseTaskLists>
 80052c8:	e00d      	b.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ca:	4b23      	ldr	r3, [pc, #140]	; (8005358 <prvAddNewTaskToReadyList+0xc0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052d2:	4b20      	ldr	r3, [pc, #128]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	429a      	cmp	r2, r3
 80052de:	d802      	bhi.n	80052e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052e0:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052e6:	4b1d      	ldr	r3, [pc, #116]	; (800535c <prvAddNewTaskToReadyList+0xc4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3301      	adds	r3, #1
 80052ec:	4a1b      	ldr	r2, [pc, #108]	; (800535c <prvAddNewTaskToReadyList+0xc4>)
 80052ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <prvAddNewTaskToReadyList+0xc8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <prvAddNewTaskToReadyList+0xc8>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4a15      	ldr	r2, [pc, #84]	; (8005364 <prvAddNewTaskToReadyList+0xcc>)
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7ff fdf5 	bl	8004f08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800531e:	f000 fd21 	bl	8005d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <prvAddNewTaskToReadyList+0xc0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <prvAddNewTaskToReadyList+0xbc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	429a      	cmp	r2, r3
 8005336:	d207      	bcs.n	8005348 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvAddNewTaskToReadyList+0xd0>)
 800533a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	24000598 	.word	0x24000598
 8005354:	24000498 	.word	0x24000498
 8005358:	240005a4 	.word	0x240005a4
 800535c:	240005b4 	.word	0x240005b4
 8005360:	240005a0 	.word	0x240005a0
 8005364:	2400049c 	.word	0x2400049c
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d017      	beq.n	80053ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <vTaskDelay+0x60>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <vTaskDelay+0x30>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60bb      	str	r3, [r7, #8]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800539c:	f000 f884 	bl	80054a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053a0:	2100      	movs	r1, #0
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb1e 	bl	80059e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053a8:	f000 f88c 	bl	80054c4 <xTaskResumeAll>
 80053ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d107      	bne.n	80053c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <vTaskDelay+0x64>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	240005c0 	.word	0x240005c0
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053e2:	463a      	mov	r2, r7
 80053e4:	1d39      	adds	r1, r7, #4
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fb f8fa 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	9202      	str	r2, [sp, #8]
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	460a      	mov	r2, r1
 8005402:	4921      	ldr	r1, [pc, #132]	; (8005488 <vTaskStartScheduler+0xb4>)
 8005404:	4821      	ldr	r0, [pc, #132]	; (800548c <vTaskStartScheduler+0xb8>)
 8005406:	f7ff fe06 	bl	8005016 <xTaskCreateStatic>
 800540a:	4603      	mov	r3, r0
 800540c:	4a20      	ldr	r2, [pc, #128]	; (8005490 <vTaskStartScheduler+0xbc>)
 800540e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005410:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <vTaskStartScheduler+0xbc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e001      	b.n	8005422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d11b      	bne.n	8005460 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	613b      	str	r3, [r7, #16]
}
 800543a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800543c:	4b15      	ldr	r3, [pc, #84]	; (8005494 <vTaskStartScheduler+0xc0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	334c      	adds	r3, #76	; 0x4c
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <vTaskStartScheduler+0xc4>)
 8005444:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <vTaskStartScheduler+0xc8>)
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <vTaskStartScheduler+0xcc>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005454:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <vTaskStartScheduler+0xd0>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800545a:	f000 fbb1 	bl	8005bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800545e:	e00e      	b.n	800547e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	d10a      	bne.n	800547e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60fb      	str	r3, [r7, #12]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <vTaskStartScheduler+0xa8>
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	08006518 	.word	0x08006518
 800548c:	08005831 	.word	0x08005831
 8005490:	240005bc 	.word	0x240005bc
 8005494:	24000498 	.word	0x24000498
 8005498:	24000014 	.word	0x24000014
 800549c:	240005b8 	.word	0x240005b8
 80054a0:	240005a4 	.word	0x240005a4
 80054a4:	2400059c 	.word	0x2400059c

080054a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054ac:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <vTaskSuspendAll+0x18>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	4a03      	ldr	r2, [pc, #12]	; (80054c0 <vTaskSuspendAll+0x18>)
 80054b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	240005c0 	.word	0x240005c0

080054c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054d2:	4b41      	ldr	r3, [pc, #260]	; (80055d8 <xTaskResumeAll+0x114>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	603b      	str	r3, [r7, #0]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054f0:	f000 fc08 	bl	8005d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054f4:	4b38      	ldr	r3, [pc, #224]	; (80055d8 <xTaskResumeAll+0x114>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	4a37      	ldr	r2, [pc, #220]	; (80055d8 <xTaskResumeAll+0x114>)
 80054fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054fe:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <xTaskResumeAll+0x114>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d161      	bne.n	80055ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005506:	4b35      	ldr	r3, [pc, #212]	; (80055dc <xTaskResumeAll+0x118>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d05d      	beq.n	80055ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800550e:	e02e      	b.n	800556e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005510:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <xTaskResumeAll+0x11c>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3318      	adds	r3, #24
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fd50 	bl	8004fc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fd4b 	bl	8004fc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <xTaskResumeAll+0x120>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4313      	orrs	r3, r2
 800553a:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <xTaskResumeAll+0x120>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <xTaskResumeAll+0x124>)
 800554c:	441a      	add	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f7ff fcd7 	bl	8004f08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <xTaskResumeAll+0x128>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	429a      	cmp	r2, r3
 8005566:	d302      	bcc.n	800556e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <xTaskResumeAll+0x12c>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800556e:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <xTaskResumeAll+0x11c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1cc      	bne.n	8005510 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800557c:	f000 fa12 	bl	80059a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <xTaskResumeAll+0x130>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800558c:	f000 f836 	bl	80055fc <xTaskIncrementTick>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <xTaskResumeAll+0x12c>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3b01      	subs	r3, #1
 80055a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f1      	bne.n	800558c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80055a8:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <xTaskResumeAll+0x130>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <xTaskResumeAll+0x12c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055b6:	2301      	movs	r3, #1
 80055b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055ba:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <xTaskResumeAll+0x134>)
 80055bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ca:	f000 fbcb 	bl	8005d64 <vPortExitCritical>

	return xAlreadyYielded;
 80055ce:	68bb      	ldr	r3, [r7, #8]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	240005c0 	.word	0x240005c0
 80055dc:	24000598 	.word	0x24000598
 80055e0:	24000558 	.word	0x24000558
 80055e4:	240005a0 	.word	0x240005a0
 80055e8:	2400049c 	.word	0x2400049c
 80055ec:	24000498 	.word	0x24000498
 80055f0:	240005ac 	.word	0x240005ac
 80055f4:	240005a8 	.word	0x240005a8
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005606:	4b4e      	ldr	r3, [pc, #312]	; (8005740 <xTaskIncrementTick+0x144>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 808e 	bne.w	800572c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005610:	4b4c      	ldr	r3, [pc, #304]	; (8005744 <xTaskIncrementTick+0x148>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005618:	4a4a      	ldr	r2, [pc, #296]	; (8005744 <xTaskIncrementTick+0x148>)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d120      	bne.n	8005666 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005624:	4b48      	ldr	r3, [pc, #288]	; (8005748 <xTaskIncrementTick+0x14c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <xTaskIncrementTick+0x48>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	603b      	str	r3, [r7, #0]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <xTaskIncrementTick+0x46>
 8005644:	4b40      	ldr	r3, [pc, #256]	; (8005748 <xTaskIncrementTick+0x14c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	4b40      	ldr	r3, [pc, #256]	; (800574c <xTaskIncrementTick+0x150>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a3e      	ldr	r2, [pc, #248]	; (8005748 <xTaskIncrementTick+0x14c>)
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4a3e      	ldr	r2, [pc, #248]	; (800574c <xTaskIncrementTick+0x150>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b3d      	ldr	r3, [pc, #244]	; (8005750 <xTaskIncrementTick+0x154>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3301      	adds	r3, #1
 800565e:	4a3c      	ldr	r2, [pc, #240]	; (8005750 <xTaskIncrementTick+0x154>)
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	f000 f99f 	bl	80059a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <xTaskIncrementTick+0x158>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d348      	bcc.n	8005702 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005670:	4b35      	ldr	r3, [pc, #212]	; (8005748 <xTaskIncrementTick+0x14c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567a:	4b36      	ldr	r3, [pc, #216]	; (8005754 <xTaskIncrementTick+0x158>)
 800567c:	f04f 32ff 	mov.w	r2, #4294967295
 8005680:	601a      	str	r2, [r3, #0]
					break;
 8005682:	e03e      	b.n	8005702 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005684:	4b30      	ldr	r3, [pc, #192]	; (8005748 <xTaskIncrementTick+0x14c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d203      	bcs.n	80056a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800569c:	4a2d      	ldr	r2, [pc, #180]	; (8005754 <xTaskIncrementTick+0x158>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056a2:	e02e      	b.n	8005702 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fc8a 	bl	8004fc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3318      	adds	r3, #24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fc81 	bl	8004fc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	2201      	movs	r2, #1
 80056c6:	409a      	lsls	r2, r3
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <xTaskIncrementTick+0x15c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	4a22      	ldr	r2, [pc, #136]	; (8005758 <xTaskIncrementTick+0x15c>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4a1f      	ldr	r2, [pc, #124]	; (800575c <xTaskIncrementTick+0x160>)
 80056e0:	441a      	add	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7ff fc0d 	bl	8004f08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <xTaskIncrementTick+0x164>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d3b9      	bcc.n	8005670 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005700:	e7b6      	b.n	8005670 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <xTaskIncrementTick+0x164>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	4914      	ldr	r1, [pc, #80]	; (800575c <xTaskIncrementTick+0x160>)
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d901      	bls.n	800571e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800571a:	2301      	movs	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <xTaskIncrementTick+0x168>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e004      	b.n	8005736 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <xTaskIncrementTick+0x16c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	4a0d      	ldr	r2, [pc, #52]	; (8005768 <xTaskIncrementTick+0x16c>)
 8005734:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005736:	697b      	ldr	r3, [r7, #20]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	240005c0 	.word	0x240005c0
 8005744:	2400059c 	.word	0x2400059c
 8005748:	24000550 	.word	0x24000550
 800574c:	24000554 	.word	0x24000554
 8005750:	240005b0 	.word	0x240005b0
 8005754:	240005b8 	.word	0x240005b8
 8005758:	240005a0 	.word	0x240005a0
 800575c:	2400049c 	.word	0x2400049c
 8005760:	24000498 	.word	0x24000498
 8005764:	240005ac 	.word	0x240005ac
 8005768:	240005a8 	.word	0x240005a8

0800576c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005772:	4b29      	ldr	r3, [pc, #164]	; (8005818 <vTaskSwitchContext+0xac>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800577a:	4b28      	ldr	r3, [pc, #160]	; (800581c <vTaskSwitchContext+0xb0>)
 800577c:	2201      	movs	r2, #1
 800577e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005780:	e044      	b.n	800580c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005782:	4b26      	ldr	r3, [pc, #152]	; (800581c <vTaskSwitchContext+0xb0>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <vTaskSwitchContext+0xb4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	f1c3 031f 	rsb	r3, r3, #31
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	4921      	ldr	r1, [pc, #132]	; (8005824 <vTaskSwitchContext+0xb8>)
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	607b      	str	r3, [r7, #4]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <vTaskSwitchContext+0x5a>
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <vTaskSwitchContext+0xb8>)
 80057d4:	4413      	add	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	3308      	adds	r3, #8
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d104      	bne.n	80057f8 <vTaskSwitchContext+0x8c>
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <vTaskSwitchContext+0xbc>)
 8005800:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <vTaskSwitchContext+0xbc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	334c      	adds	r3, #76	; 0x4c
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <vTaskSwitchContext+0xc0>)
 800580a:	6013      	str	r3, [r2, #0]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	240005c0 	.word	0x240005c0
 800581c:	240005ac 	.word	0x240005ac
 8005820:	240005a0 	.word	0x240005a0
 8005824:	2400049c 	.word	0x2400049c
 8005828:	24000498 	.word	0x24000498
 800582c:	24000014 	.word	0x24000014

08005830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005838:	f000 f852 	bl	80058e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <prvIdleTask+0x28>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d9f9      	bls.n	8005838 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <prvIdleTask+0x2c>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005854:	e7f0      	b.n	8005838 <prvIdleTask+0x8>
 8005856:	bf00      	nop
 8005858:	2400049c 	.word	0x2400049c
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005866:	2300      	movs	r3, #0
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	e00c      	b.n	8005886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <prvInitialiseTaskLists+0x60>)
 8005878:	4413      	add	r3, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fb17 	bl	8004eae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3301      	adds	r3, #1
 8005884:	607b      	str	r3, [r7, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b06      	cmp	r3, #6
 800588a:	d9ef      	bls.n	800586c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800588c:	480d      	ldr	r0, [pc, #52]	; (80058c4 <prvInitialiseTaskLists+0x64>)
 800588e:	f7ff fb0e 	bl	8004eae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005892:	480d      	ldr	r0, [pc, #52]	; (80058c8 <prvInitialiseTaskLists+0x68>)
 8005894:	f7ff fb0b 	bl	8004eae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005898:	480c      	ldr	r0, [pc, #48]	; (80058cc <prvInitialiseTaskLists+0x6c>)
 800589a:	f7ff fb08 	bl	8004eae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800589e:	480c      	ldr	r0, [pc, #48]	; (80058d0 <prvInitialiseTaskLists+0x70>)
 80058a0:	f7ff fb05 	bl	8004eae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058a4:	480b      	ldr	r0, [pc, #44]	; (80058d4 <prvInitialiseTaskLists+0x74>)
 80058a6:	f7ff fb02 	bl	8004eae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <prvInitialiseTaskLists+0x78>)
 80058ac:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <prvInitialiseTaskLists+0x64>)
 80058ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058b0:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <prvInitialiseTaskLists+0x7c>)
 80058b2:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <prvInitialiseTaskLists+0x68>)
 80058b4:	601a      	str	r2, [r3, #0]
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	2400049c 	.word	0x2400049c
 80058c4:	24000528 	.word	0x24000528
 80058c8:	2400053c 	.word	0x2400053c
 80058cc:	24000558 	.word	0x24000558
 80058d0:	2400056c 	.word	0x2400056c
 80058d4:	24000584 	.word	0x24000584
 80058d8:	24000550 	.word	0x24000550
 80058dc:	24000554 	.word	0x24000554

080058e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058e6:	e019      	b.n	800591c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058e8:	f000 fa0c 	bl	8005d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <prvCheckTasksWaitingTermination+0x50>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fb62 	bl	8004fc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058fe:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <prvCheckTasksWaitingTermination+0x54>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3b01      	subs	r3, #1
 8005904:	4a0b      	ldr	r2, [pc, #44]	; (8005934 <prvCheckTasksWaitingTermination+0x54>)
 8005906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <prvCheckTasksWaitingTermination+0x58>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <prvCheckTasksWaitingTermination+0x58>)
 8005910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005912:	f000 fa27 	bl	8005d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f810 	bl	800593c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <prvCheckTasksWaitingTermination+0x58>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e1      	bne.n	80058e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	2400056c 	.word	0x2400056c
 8005934:	24000598 	.word	0x24000598
 8005938:	24000580 	.word	0x24000580

0800593c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	334c      	adds	r3, #76	; 0x4c
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fce3 	bl	8006314 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fb7f 	bl	8006060 <vPortFree>
				vPortFree( pxTCB );
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fb7c 	bl	8006060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005968:	e018      	b.n	800599c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d103      	bne.n	800597c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb73 	bl	8006060 <vPortFree>
	}
 800597a:	e00f      	b.n	800599c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005982:	2b02      	cmp	r3, #2
 8005984:	d00a      	beq.n	800599c <prvDeleteTCB+0x60>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <prvDeleteTCB+0x5e>
	}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <prvResetNextTaskUnblockTime+0x38>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <prvResetNextTaskUnblockTime+0x3c>)
 80059b6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059bc:	e008      	b.n	80059d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <prvResetNextTaskUnblockTime+0x38>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a04      	ldr	r2, [pc, #16]	; (80059e0 <prvResetNextTaskUnblockTime+0x3c>)
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	24000550 	.word	0x24000550
 80059e0:	240005b8 	.word	0x240005b8

080059e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ee:	4b29      	ldr	r3, [pc, #164]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xb0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fae1 	bl	8004fc2 <uxListRemove>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43da      	mvns	r2, r3
 8005a14:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d10a      	bne.n	8005a3c <prvAddCurrentTaskToDelayedList+0x58>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	481a      	ldr	r0, [pc, #104]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a36:	f7ff fa67 	bl	8004f08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a3a:	e026      	b.n	8005a8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a44:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d209      	bcs.n	8005a68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a54:	4b13      	ldr	r3, [pc, #76]	; (8005aa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7ff fa75 	bl	8004f50 <vListInsert>
}
 8005a66:	e010      	b.n	8005a8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f7ff fa6b 	bl	8004f50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d202      	bcs.n	8005a8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a84:	4a09      	ldr	r2, [pc, #36]	; (8005aac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6013      	str	r3, [r2, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	2400059c 	.word	0x2400059c
 8005a98:	24000498 	.word	0x24000498
 8005a9c:	240005a0 	.word	0x240005a0
 8005aa0:	24000584 	.word	0x24000584
 8005aa4:	24000554 	.word	0x24000554
 8005aa8:	24000550 	.word	0x24000550
 8005aac:	240005b8 	.word	0x240005b8

08005ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3b04      	subs	r3, #4
 8005ac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3b04      	subs	r3, #4
 8005ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3b04      	subs	r3, #4
 8005ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ae0:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <pxPortInitialiseStack+0x64>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3b14      	subs	r3, #20
 8005aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3b04      	subs	r3, #4
 8005af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f06f 0202 	mvn.w	r2, #2
 8005afe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3b20      	subs	r3, #32
 8005b04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b06:	68fb      	ldr	r3, [r7, #12]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	08005b19 	.word	0x08005b19

08005b18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <prvTaskExitError+0x54>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d00a      	beq.n	8005b42 <prvTaskExitError+0x2a>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60fb      	str	r3, [r7, #12]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <prvTaskExitError+0x28>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	60bb      	str	r3, [r7, #8]
}
 8005b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b56:	bf00      	nop
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0fc      	beq.n	8005b58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	24000010 	.word	0x24000010

08005b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <pxCurrentTCBConst2>)
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	6808      	ldr	r0, [r1, #0]
 8005b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	f380 8809 	msr	PSP, r0
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8811 	msr	BASEPRI, r0
 8005b8a:	4770      	bx	lr
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst2>:
 8005b90:	24000498 	.word	0x24000498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b98:	4808      	ldr	r0, [pc, #32]	; (8005bbc <prvPortStartFirstTask+0x24>)
 8005b9a:	6800      	ldr	r0, [r0, #0]
 8005b9c:	6800      	ldr	r0, [r0, #0]
 8005b9e:	f380 8808 	msr	MSP, r0
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8814 	msr	CONTROL, r0
 8005baa:	b662      	cpsie	i
 8005bac:	b661      	cpsie	f
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	df00      	svc	0
 8005bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bba:	bf00      	nop
 8005bbc:	e000ed08 	.word	0xe000ed08

08005bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bc6:	4b46      	ldr	r3, [pc, #280]	; (8005ce0 <xPortStartScheduler+0x120>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a46      	ldr	r2, [pc, #280]	; (8005ce4 <xPortStartScheduler+0x124>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d10a      	bne.n	8005be6 <xPortStartScheduler+0x26>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005be6:	4b3e      	ldr	r3, [pc, #248]	; (8005ce0 <xPortStartScheduler+0x120>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <xPortStartScheduler+0x128>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10a      	bne.n	8005c06 <xPortStartScheduler+0x46>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	60fb      	str	r3, [r7, #12]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c06:	4b39      	ldr	r3, [pc, #228]	; (8005cec <xPortStartScheduler+0x12c>)
 8005c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	22ff      	movs	r2, #255	; 0xff
 8005c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b31      	ldr	r3, [pc, #196]	; (8005cf0 <xPortStartScheduler+0x130>)
 8005c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c2e:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c30:	2207      	movs	r2, #7
 8005c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c34:	e009      	b.n	8005c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c36:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	4a2d      	ldr	r2, [pc, #180]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b80      	cmp	r3, #128	; 0x80
 8005c54:	d0ef      	beq.n	8005c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c56:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f1c3 0307 	rsb	r3, r3, #7
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d00a      	beq.n	8005c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60bb      	str	r3, [r7, #8]
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c78:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c8a:	4a1a      	ldr	r2, [pc, #104]	; (8005cf4 <xPortStartScheduler+0x134>)
 8005c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c96:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <xPortStartScheduler+0x138>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <xPortStartScheduler+0x138>)
 8005c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ca2:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <xPortStartScheduler+0x138>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <xPortStartScheduler+0x138>)
 8005ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cae:	f000 f8dd 	bl	8005e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <xPortStartScheduler+0x13c>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cb8:	f000 f8fc 	bl	8005eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <xPortStartScheduler+0x140>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0f      	ldr	r2, [pc, #60]	; (8005d00 <xPortStartScheduler+0x140>)
 8005cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cc8:	f7ff ff66 	bl	8005b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ccc:	f7ff fd4e 	bl	800576c <vTaskSwitchContext>
	prvTaskExitError();
 8005cd0:	f7ff ff22 	bl	8005b18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	e000ed00 	.word	0xe000ed00
 8005ce4:	410fc271 	.word	0x410fc271
 8005ce8:	410fc270 	.word	0x410fc270
 8005cec:	e000e400 	.word	0xe000e400
 8005cf0:	240005c4 	.word	0x240005c4
 8005cf4:	240005c8 	.word	0x240005c8
 8005cf8:	e000ed20 	.word	0xe000ed20
 8005cfc:	24000010 	.word	0x24000010
 8005d00:	e000ef34 	.word	0xe000ef34

08005d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	607b      	str	r3, [r7, #4]
}
 8005d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <vPortEnterCritical+0x58>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <vPortEnterCritical+0x58>)
 8005d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <vPortEnterCritical+0x58>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10f      	bne.n	8005d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <vPortEnterCritical+0x5c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	603b      	str	r3, [r7, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <vPortEnterCritical+0x4a>
	}
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	24000010 	.word	0x24000010
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d6a:	4b12      	ldr	r3, [pc, #72]	; (8005db4 <vPortExitCritical+0x50>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <vPortExitCritical+0x24>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	607b      	str	r3, [r7, #4]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <vPortExitCritical+0x50>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <vPortExitCritical+0x50>)
 8005d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d92:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <vPortExitCritical+0x50>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d105      	bne.n	8005da6 <vPortExitCritical+0x42>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	24000010 	.word	0x24000010
	...

08005dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005dc0:	f3ef 8009 	mrs	r0, PSP
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <pxCurrentTCBConst>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f01e 0f10 	tst.w	lr, #16
 8005dd0:	bf08      	it	eq
 8005dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005de4:	f380 8811 	msr	BASEPRI, r0
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f7ff fcbc 	bl	800576c <vTaskSwitchContext>
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	f380 8811 	msr	BASEPRI, r0
 8005dfc:	bc09      	pop	{r0, r3}
 8005dfe:	6819      	ldr	r1, [r3, #0]
 8005e00:	6808      	ldr	r0, [r1, #0]
 8005e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e06:	f01e 0f10 	tst.w	lr, #16
 8005e0a:	bf08      	it	eq
 8005e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e10:	f380 8809 	msr	PSP, r0
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst>:
 8005e20:	24000498 	.word	0x24000498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	607b      	str	r3, [r7, #4]
}
 8005e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e42:	f7ff fbdb 	bl	80055fc <xTaskIncrementTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e4c:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <SysTick_Handler+0x40>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f383 8811 	msr	BASEPRI, r3
}
 8005e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <vPortSetupTimerInterrupt+0x34>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <vPortSetupTimerInterrupt+0x38>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <vPortSetupTimerInterrupt+0x3c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <vPortSetupTimerInterrupt+0x40>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <vPortSetupTimerInterrupt+0x44>)
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e8e:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <vPortSetupTimerInterrupt+0x34>)
 8005e90:	2207      	movs	r2, #7
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	e000e010 	.word	0xe000e010
 8005ea4:	e000e018 	.word	0xe000e018
 8005ea8:	24000000 	.word	0x24000000
 8005eac:	10624dd3 	.word	0x10624dd3
 8005eb0:	e000e014 	.word	0xe000e014

08005eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ec4 <vPortEnableVFP+0x10>
 8005eb8:	6801      	ldr	r1, [r0, #0]
 8005eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ebe:	6001      	str	r1, [r0, #0]
 8005ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ec2:	bf00      	nop
 8005ec4:	e000ed88 	.word	0xe000ed88

08005ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ed4:	f7ff fae8 	bl	80054a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ed8:	4b5b      	ldr	r3, [pc, #364]	; (8006048 <pvPortMalloc+0x180>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ee0:	f000 f920 	bl	8006124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ee4:	4b59      	ldr	r3, [pc, #356]	; (800604c <pvPortMalloc+0x184>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 8093 	bne.w	8006018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01d      	beq.n	8005f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ef8:	2208      	movs	r2, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d014      	beq.n	8005f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f023 0307 	bic.w	r3, r3, #7
 8005f10:	3308      	adds	r3, #8
 8005f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <pvPortMalloc+0x6c>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	617b      	str	r3, [r7, #20]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d06e      	beq.n	8006018 <pvPortMalloc+0x150>
 8005f3a:	4b45      	ldr	r3, [pc, #276]	; (8006050 <pvPortMalloc+0x188>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d869      	bhi.n	8006018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f44:	4b43      	ldr	r3, [pc, #268]	; (8006054 <pvPortMalloc+0x18c>)
 8005f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <pvPortMalloc+0x18c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4e:	e004      	b.n	8005f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d903      	bls.n	8005f6c <pvPortMalloc+0xa4>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f1      	bne.n	8005f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f6c:	4b36      	ldr	r3, [pc, #216]	; (8006048 <pvPortMalloc+0x180>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d050      	beq.n	8006018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	2308      	movs	r3, #8
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d91f      	bls.n	8005fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	613b      	str	r3, [r7, #16]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fd2:	69b8      	ldr	r0, [r7, #24]
 8005fd4:	f000 f908 	bl	80061e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <pvPortMalloc+0x188>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <pvPortMalloc+0x188>)
 8005fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <pvPortMalloc+0x188>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <pvPortMalloc+0x190>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d203      	bcs.n	8005ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <pvPortMalloc+0x188>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <pvPortMalloc+0x190>)
 8005ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <pvPortMalloc+0x184>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	431a      	orrs	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <pvPortMalloc+0x194>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <pvPortMalloc+0x194>)
 8006016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006018:	f7ff fa54 	bl	80054c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <pvPortMalloc+0x174>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60fb      	str	r3, [r7, #12]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <pvPortMalloc+0x172>
	return pvReturn;
 800603c:	69fb      	ldr	r3, [r7, #28]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3728      	adds	r7, #40	; 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	240041d4 	.word	0x240041d4
 800604c:	240041e8 	.word	0x240041e8
 8006050:	240041d8 	.word	0x240041d8
 8006054:	240041cc 	.word	0x240041cc
 8006058:	240041dc 	.word	0x240041dc
 800605c:	240041e0 	.word	0x240041e0

08006060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04d      	beq.n	800610e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006072:	2308      	movs	r3, #8
 8006074:	425b      	negs	r3, r3
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	4b24      	ldr	r3, [pc, #144]	; (8006118 <vPortFree+0xb8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vPortFree+0x44>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <vPortFree+0x62>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <vPortFree+0xb8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11a      	bne.n	800610e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <vPortFree+0xb8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	401a      	ands	r2, r3
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060e8:	f7ff f9de 	bl	80054a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <vPortFree+0xbc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <vPortFree+0xbc>)
 80060f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 f874 	bl	80061e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <vPortFree+0xc0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	4a06      	ldr	r2, [pc, #24]	; (8006120 <vPortFree+0xc0>)
 8006108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800610a:	f7ff f9db 	bl	80054c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	240041e8 	.word	0x240041e8
 800611c:	240041d8 	.word	0x240041d8
 8006120:	240041e4 	.word	0x240041e4

08006124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800612a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800612e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <prvHeapInit+0xac>)
 8006132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3307      	adds	r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <prvHeapInit+0xac>)
 8006154:	4413      	add	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <prvHeapInit+0xb0>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <prvHeapInit+0xb0>)
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006170:	2208      	movs	r2, #8
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <prvHeapInit+0xb4>)
 8006184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <prvHeapInit+0xb4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <prvHeapInit+0xb4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvHeapInit+0xb4>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <prvHeapInit+0xb8>)
 80061b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <prvHeapInit+0xbc>)
 80061ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <prvHeapInit+0xc0>)
 80061be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	240005cc 	.word	0x240005cc
 80061d4:	240041cc 	.word	0x240041cc
 80061d8:	240041d4 	.word	0x240041d4
 80061dc:	240041dc 	.word	0x240041dc
 80061e0:	240041d8 	.word	0x240041d8
 80061e4:	240041e8 	.word	0x240041e8

080061e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061f0:	4b28      	ldr	r3, [pc, #160]	; (8006294 <prvInsertBlockIntoFreeList+0xac>)
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e002      	b.n	80061fc <prvInsertBlockIntoFreeList+0x14>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d8f7      	bhi.n	80061f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d108      	bne.n	800622a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	441a      	add	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d118      	bne.n	8006270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d00d      	beq.n	8006266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e008      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e003      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d002      	beq.n	8006286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	240041cc 	.word	0x240041cc
 8006298:	240041d4 	.word	0x240041d4

0800629c <__libc_init_array>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4d0d      	ldr	r5, [pc, #52]	; (80062d4 <__libc_init_array+0x38>)
 80062a0:	4c0d      	ldr	r4, [pc, #52]	; (80062d8 <__libc_init_array+0x3c>)
 80062a2:	1b64      	subs	r4, r4, r5
 80062a4:	10a4      	asrs	r4, r4, #2
 80062a6:	2600      	movs	r6, #0
 80062a8:	42a6      	cmp	r6, r4
 80062aa:	d109      	bne.n	80062c0 <__libc_init_array+0x24>
 80062ac:	4d0b      	ldr	r5, [pc, #44]	; (80062dc <__libc_init_array+0x40>)
 80062ae:	4c0c      	ldr	r4, [pc, #48]	; (80062e0 <__libc_init_array+0x44>)
 80062b0:	f000 f8e4 	bl	800647c <_init>
 80062b4:	1b64      	subs	r4, r4, r5
 80062b6:	10a4      	asrs	r4, r4, #2
 80062b8:	2600      	movs	r6, #0
 80062ba:	42a6      	cmp	r6, r4
 80062bc:	d105      	bne.n	80062ca <__libc_init_array+0x2e>
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c4:	4798      	blx	r3
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7ee      	b.n	80062a8 <__libc_init_array+0xc>
 80062ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ce:	4798      	blx	r3
 80062d0:	3601      	adds	r6, #1
 80062d2:	e7f2      	b.n	80062ba <__libc_init_array+0x1e>
 80062d4:	080065c0 	.word	0x080065c0
 80062d8:	080065c0 	.word	0x080065c0
 80062dc:	080065c0 	.word	0x080065c0
 80062e0:	080065c4 	.word	0x080065c4

080062e4 <__retarget_lock_acquire_recursive>:
 80062e4:	4770      	bx	lr

080062e6 <__retarget_lock_release_recursive>:
 80062e6:	4770      	bx	lr

080062e8 <memset>:
 80062e8:	4402      	add	r2, r0
 80062ea:	4603      	mov	r3, r0
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d100      	bne.n	80062f2 <memset+0xa>
 80062f0:	4770      	bx	lr
 80062f2:	f803 1b01 	strb.w	r1, [r3], #1
 80062f6:	e7f9      	b.n	80062ec <memset+0x4>

080062f8 <cleanup_glue>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	6809      	ldr	r1, [r1, #0]
 80062fe:	4605      	mov	r5, r0
 8006300:	b109      	cbz	r1, 8006306 <cleanup_glue+0xe>
 8006302:	f7ff fff9 	bl	80062f8 <cleanup_glue>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800630e:	f000 b869 	b.w	80063e4 <_free_r>
	...

08006314 <_reclaim_reent>:
 8006314:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <_reclaim_reent+0xb4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4283      	cmp	r3, r0
 800631a:	b570      	push	{r4, r5, r6, lr}
 800631c:	4604      	mov	r4, r0
 800631e:	d051      	beq.n	80063c4 <_reclaim_reent+0xb0>
 8006320:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006322:	b143      	cbz	r3, 8006336 <_reclaim_reent+0x22>
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d14a      	bne.n	80063c0 <_reclaim_reent+0xac>
 800632a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800632c:	6819      	ldr	r1, [r3, #0]
 800632e:	b111      	cbz	r1, 8006336 <_reclaim_reent+0x22>
 8006330:	4620      	mov	r0, r4
 8006332:	f000 f857 	bl	80063e4 <_free_r>
 8006336:	6961      	ldr	r1, [r4, #20]
 8006338:	b111      	cbz	r1, 8006340 <_reclaim_reent+0x2c>
 800633a:	4620      	mov	r0, r4
 800633c:	f000 f852 	bl	80063e4 <_free_r>
 8006340:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006342:	b111      	cbz	r1, 800634a <_reclaim_reent+0x36>
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f84d 	bl	80063e4 <_free_r>
 800634a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800634c:	b111      	cbz	r1, 8006354 <_reclaim_reent+0x40>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f848 	bl	80063e4 <_free_r>
 8006354:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006356:	b111      	cbz	r1, 800635e <_reclaim_reent+0x4a>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f843 	bl	80063e4 <_free_r>
 800635e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006360:	b111      	cbz	r1, 8006368 <_reclaim_reent+0x54>
 8006362:	4620      	mov	r0, r4
 8006364:	f000 f83e 	bl	80063e4 <_free_r>
 8006368:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800636a:	b111      	cbz	r1, 8006372 <_reclaim_reent+0x5e>
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f839 	bl	80063e4 <_free_r>
 8006372:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006374:	b111      	cbz	r1, 800637c <_reclaim_reent+0x68>
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f834 	bl	80063e4 <_free_r>
 800637c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800637e:	b111      	cbz	r1, 8006386 <_reclaim_reent+0x72>
 8006380:	4620      	mov	r0, r4
 8006382:	f000 f82f 	bl	80063e4 <_free_r>
 8006386:	69a3      	ldr	r3, [r4, #24]
 8006388:	b1e3      	cbz	r3, 80063c4 <_reclaim_reent+0xb0>
 800638a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800638c:	4620      	mov	r0, r4
 800638e:	4798      	blx	r3
 8006390:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006392:	b1b9      	cbz	r1, 80063c4 <_reclaim_reent+0xb0>
 8006394:	4620      	mov	r0, r4
 8006396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800639a:	f7ff bfad 	b.w	80062f8 <cleanup_glue>
 800639e:	5949      	ldr	r1, [r1, r5]
 80063a0:	b941      	cbnz	r1, 80063b4 <_reclaim_reent+0xa0>
 80063a2:	3504      	adds	r5, #4
 80063a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a6:	2d80      	cmp	r5, #128	; 0x80
 80063a8:	68d9      	ldr	r1, [r3, #12]
 80063aa:	d1f8      	bne.n	800639e <_reclaim_reent+0x8a>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f819 	bl	80063e4 <_free_r>
 80063b2:	e7ba      	b.n	800632a <_reclaim_reent+0x16>
 80063b4:	680e      	ldr	r6, [r1, #0]
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 f814 	bl	80063e4 <_free_r>
 80063bc:	4631      	mov	r1, r6
 80063be:	e7ef      	b.n	80063a0 <_reclaim_reent+0x8c>
 80063c0:	2500      	movs	r5, #0
 80063c2:	e7ef      	b.n	80063a4 <_reclaim_reent+0x90>
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	bf00      	nop
 80063c8:	24000014 	.word	0x24000014

080063cc <__malloc_lock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__malloc_lock+0x8>)
 80063ce:	f7ff bf89 	b.w	80062e4 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	240041ec 	.word	0x240041ec

080063d8 <__malloc_unlock>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__malloc_unlock+0x8>)
 80063da:	f7ff bf84 	b.w	80062e6 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	240041ec 	.word	0x240041ec

080063e4 <_free_r>:
 80063e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063e6:	2900      	cmp	r1, #0
 80063e8:	d044      	beq.n	8006474 <_free_r+0x90>
 80063ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ee:	9001      	str	r0, [sp, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f1a1 0404 	sub.w	r4, r1, #4
 80063f6:	bfb8      	it	lt
 80063f8:	18e4      	addlt	r4, r4, r3
 80063fa:	f7ff ffe7 	bl	80063cc <__malloc_lock>
 80063fe:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <_free_r+0x94>)
 8006400:	9801      	ldr	r0, [sp, #4]
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	b933      	cbnz	r3, 8006414 <_free_r+0x30>
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	b003      	add	sp, #12
 800640c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006410:	f7ff bfe2 	b.w	80063d8 <__malloc_unlock>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d908      	bls.n	800642a <_free_r+0x46>
 8006418:	6825      	ldr	r5, [r4, #0]
 800641a:	1961      	adds	r1, r4, r5
 800641c:	428b      	cmp	r3, r1
 800641e:	bf01      	itttt	eq
 8006420:	6819      	ldreq	r1, [r3, #0]
 8006422:	685b      	ldreq	r3, [r3, #4]
 8006424:	1949      	addeq	r1, r1, r5
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	e7ed      	b.n	8006406 <_free_r+0x22>
 800642a:	461a      	mov	r2, r3
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b10b      	cbz	r3, 8006434 <_free_r+0x50>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d9fa      	bls.n	800642a <_free_r+0x46>
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	1855      	adds	r5, r2, r1
 8006438:	42a5      	cmp	r5, r4
 800643a:	d10b      	bne.n	8006454 <_free_r+0x70>
 800643c:	6824      	ldr	r4, [r4, #0]
 800643e:	4421      	add	r1, r4
 8006440:	1854      	adds	r4, r2, r1
 8006442:	42a3      	cmp	r3, r4
 8006444:	6011      	str	r1, [r2, #0]
 8006446:	d1e0      	bne.n	800640a <_free_r+0x26>
 8006448:	681c      	ldr	r4, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	6053      	str	r3, [r2, #4]
 800644e:	4421      	add	r1, r4
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	e7da      	b.n	800640a <_free_r+0x26>
 8006454:	d902      	bls.n	800645c <_free_r+0x78>
 8006456:	230c      	movs	r3, #12
 8006458:	6003      	str	r3, [r0, #0]
 800645a:	e7d6      	b.n	800640a <_free_r+0x26>
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	1961      	adds	r1, r4, r5
 8006460:	428b      	cmp	r3, r1
 8006462:	bf04      	itt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	bf04      	itt	eq
 800646c:	1949      	addeq	r1, r1, r5
 800646e:	6021      	streq	r1, [r4, #0]
 8006470:	6054      	str	r4, [r2, #4]
 8006472:	e7ca      	b.n	800640a <_free_r+0x26>
 8006474:	b003      	add	sp, #12
 8006476:	bd30      	pop	{r4, r5, pc}
 8006478:	240041f0 	.word	0x240041f0

0800647c <_init>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	bf00      	nop
 8006480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006482:	bc08      	pop	{r3}
 8006484:	469e      	mov	lr, r3
 8006486:	4770      	bx	lr

08006488 <_fini>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	bf00      	nop
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr
