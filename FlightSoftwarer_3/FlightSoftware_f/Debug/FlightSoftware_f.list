
FlightSoftware_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080092e0  080092e0  000192e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080092e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000435c  24000078  08009360  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240043d4  08009360  000243d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022c82  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d83  00000000  00000000  00042d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001880  00000000  00000000  00046ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016f8  00000000  00000000  00048330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a1c8  00000000  00000000  00049a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000200e5  00000000  00000000  00083bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d351  00000000  00000000  000a3cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00211026  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ae4  00000000  00000000  00211078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080090f8 	.word	0x080090f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080090f8 	.word	0x080090f8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <fill_calibration_params>:


#include "BMP388.h"
#include <math.h>

void fill_calibration_params(struct BMP388_calib_data *calib_data, uint8_t *buffer) {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	// Assign buffer values to NVM_PARAMs
	        calib_data->NVM_PAR_T1 = (uint16_t)((buffer[1] << 8)|buffer[0]);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	b21a      	sxth	r2, r3
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b21b      	sxth	r3, r3
 8000602:	b29a      	uxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	801a      	strh	r2, [r3, #0]
	        calib_data->NVM_PAR_T2 = (uint16_t)((buffer[3] << 8)|buffer[2]);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	3303      	adds	r3, #3
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	b21a      	sxth	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	3302      	adds	r3, #2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29a      	uxth	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	805a      	strh	r2, [r3, #2]
	        calib_data->NVM_PAR_T3 = (int8_t)(buffer[4]);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	3304      	adds	r3, #4
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b25a      	sxtb	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	711a      	strb	r2, [r3, #4]

	        calib_data->NVM_PAR_P1 =    (int16_t)((buffer[6] << 8)|buffer[5]);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	3306      	adds	r3, #6
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	b21a      	sxth	r2, r3
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	3305      	adds	r3, #5
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b21b      	sxth	r3, r3
 8000642:	4313      	orrs	r3, r2
 8000644:	b21a      	sxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	80da      	strh	r2, [r3, #6]
	        calib_data->NVM_PAR_P2 =    (int16_t)((buffer[8] << 8)|buffer[7]);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	3308      	adds	r3, #8
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	3307      	adds	r3, #7
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b21b      	sxth	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b21a      	sxth	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	811a      	strh	r2, [r3, #8]
	        calib_data->NVM_PAR_P3 =    (int8_t)(buffer[9]);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	3309      	adds	r3, #9
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b25a      	sxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	729a      	strb	r2, [r3, #10]
	        calib_data->NVM_PAR_P4 =    (int8_t)(buffer[10]);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	330a      	adds	r3, #10
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b25a      	sxtb	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	72da      	strb	r2, [r3, #11]
	        calib_data->NVM_PAR_P5 =    (uint16_t)((buffer[12] << 8)|buffer[11]);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	330c      	adds	r3, #12
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b21a      	sxth	r2, r3
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	330b      	adds	r3, #11
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21b      	sxth	r3, r3
 8000692:	b29a      	uxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	819a      	strh	r2, [r3, #12]
	        calib_data->NVM_PAR_P6 =    (uint16_t)((buffer[14] << 8)|buffer[13]);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	330e      	adds	r3, #14
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	330d      	adds	r3, #13
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	81da      	strh	r2, [r3, #14]
	        calib_data->NVM_PAR_P7 =    (int8_t)(buffer[15]);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	330f      	adds	r3, #15
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	741a      	strb	r2, [r3, #16]
	        calib_data->NVM_PAR_P8 =    (int8_t)(buffer[16]);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	3310      	adds	r3, #16
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b25a      	sxtb	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	745a      	strb	r2, [r3, #17]
	        calib_data->NVM_PAR_P9 =    (int16_t)((buffer[18] << 8)|buffer[17]);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	3312      	adds	r3, #18
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3311      	adds	r3, #17
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b21b      	sxth	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	825a      	strh	r2, [r3, #18]
	        calib_data->NVM_PAR_P10 =   (int8_t)(buffer[19]);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3313      	adds	r3, #19
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	751a      	strb	r2, [r3, #20]
	        calib_data->NVM_PAR_P11 =   (int8_t)(buffer[20]);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	3314      	adds	r3, #20
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	755a      	strb	r2, [r3, #21]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	0000      	movs	r0, r0
 800070c:	0000      	movs	r0, r0
	...

08000710 <set_coeff>:

void set_coeff(struct BMP388_data *data, BMP388_calib *calib_data) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
			data->PAR_T1 = calib_data->NVM_PAR_T1/pow(2.0,-8.0);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000726:	ed9f 5b72 	vldr	d5, [pc, #456]	; 80008f0 <set_coeff+0x1e0>
 800072a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	edc3 7a00 	vstr	s15, [r3]
			data->PAR_T2 = calib_data->NVM_PAR_T2/pow(2.0,30.0);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	885b      	ldrh	r3, [r3, #2]
 800073c:	ee07 3a90 	vmov	s15, r3
 8000740:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000744:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80008f8 <set_coeff+0x1e8>
 8000748:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800074c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	edc3 7a01 	vstr	s15, [r3, #4]
			data->PAR_T3 = calib_data->NVM_PAR_T3/pow(2.0,48.0);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000764:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8000900 <set_coeff+0x1f0>
 8000768:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800076c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	edc3 7a02 	vstr	s15, [r3, #8]

			data->PAR_P1 = (calib_data->NVM_PAR_P1-pow(2.0, 14.0))/pow(2.0,20.0);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000784:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8000908 <set_coeff+0x1f8>
 8000788:	ee37 6b46 	vsub.f64	d6, d7, d6
 800078c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8000910 <set_coeff+0x200>
 8000790:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000794:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edc3 7a03 	vstr	s15, [r3, #12]
			data->PAR_P2 = (calib_data->NVM_PAR_P2-pow(2.0, 14.0))/pow(2.0,29.0);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007ac:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000908 <set_coeff+0x1f8>
 80007b0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80007b4:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000918 <set_coeff+0x208>
 80007b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	edc3 7a04 	vstr	s15, [r3, #16]
			data->PAR_P3 = (calib_data->NVM_PAR_P3)/pow(2.0,32.0);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007d4:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8000920 <set_coeff+0x210>
 80007d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	edc3 7a05 	vstr	s15, [r3, #20]
			data->PAR_P4 = (calib_data->NVM_PAR_P4)/pow(2.0,37.0);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007f4:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000928 <set_coeff+0x218>
 80007f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	edc3 7a06 	vstr	s15, [r3, #24]
			data->PAR_P5 = (calib_data->NVM_PAR_P5)/pow(2.0,-3.0);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	899b      	ldrh	r3, [r3, #12]
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000812:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8000816:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800081a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	edc3 7a07 	vstr	s15, [r3, #28]
			data->PAR_P6 = (calib_data->NVM_PAR_P6)/pow(2.0,6.0);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	89db      	ldrh	r3, [r3, #14]
 8000828:	ee07 3a90 	vmov	s15, r3
 800082c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000830:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8000930 <set_coeff+0x220>
 8000834:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	edc3 7a08 	vstr	s15, [r3, #32]
			data->PAR_P7 = (calib_data->NVM_PAR_P7)/pow(2.0,8.0);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000848:	ee07 3a90 	vmov	s15, r3
 800084c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000850:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000938 <set_coeff+0x228>
 8000854:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000858:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			data->PAR_P8 = (calib_data->NVM_PAR_P8)/pow(2.0,15.0);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000870:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000940 <set_coeff+0x230>
 8000874:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000878:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			data->PAR_P9 = (calib_data->NVM_PAR_P9)/pow(2.0,48.0);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000890:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000900 <set_coeff+0x1f0>
 8000894:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000898:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			data->PAR_P10 = (calib_data->NVM_PAR_P10)/pow(2.0,48.0);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008b0:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000900 <set_coeff+0x1f0>
 80008b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			data->PAR_P11 = (calib_data->NVM_PAR_P11)/pow(2.0,65.0);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008d0:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8000948 <set_coeff+0x238>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	00000000 	.word	0x00000000
 80008f4:	3f700000 	.word	0x3f700000
 80008f8:	00000000 	.word	0x00000000
 80008fc:	41d00000 	.word	0x41d00000
 8000900:	00000000 	.word	0x00000000
 8000904:	42f00000 	.word	0x42f00000
 8000908:	00000000 	.word	0x00000000
 800090c:	40d00000 	.word	0x40d00000
 8000910:	00000000 	.word	0x00000000
 8000914:	41300000 	.word	0x41300000
 8000918:	00000000 	.word	0x00000000
 800091c:	41c00000 	.word	0x41c00000
 8000920:	00000000 	.word	0x00000000
 8000924:	41f00000 	.word	0x41f00000
 8000928:	00000000 	.word	0x00000000
 800092c:	42400000 	.word	0x42400000
 8000930:	00000000 	.word	0x00000000
 8000934:	40500000 	.word	0x40500000
 8000938:	00000000 	.word	0x00000000
 800093c:	40700000 	.word	0x40700000
 8000940:	00000000 	.word	0x00000000
 8000944:	40e00000 	.word	0x40e00000
 8000948:	00000000 	.word	0x00000000
 800094c:	44000000 	.word	0x44000000

08000950 <get_compensated>:
void get_compensated(struct BMP388_sensor *sensor, I2C_HandleTypeDef* hi2c) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af04      	add	r7, sp, #16
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	 // Collect data  from registers
			uint8_t check = (0b11 << 5);
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	77fb      	strb	r3, [r7, #31]
			uint8_t ready = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
			while ((ready & check) != check){
 8000962:	e00c      	b.n	800097e <get_compensated+0x2e>
				HAL_I2C_Mem_Read((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, STATUS, sizeof(uint8_t), &ready, 1, 100);
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9302      	str	r3, [sp, #8]
 8000968:	2301      	movs	r3, #1
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	f107 030f 	add.w	r3, r7, #15
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	21ee      	movs	r1, #238	; 0xee
 8000978:	6838      	ldr	r0, [r7, #0]
 800097a:	f001 ff7d 	bl	8002878 <HAL_I2C_Mem_Read>
			while ((ready & check) != check){
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	4013      	ands	r3, r2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	7ffa      	ldrb	r2, [r7, #31]
 8000988:	429a      	cmp	r2, r3
 800098a:	d1eb      	bne.n	8000964 <get_compensated+0x14>
			}
			uint8_t temp[6];
			HAL_I2C_Mem_Read((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, PRESSURE_DATA, sizeof(uint8_t), (uint8_t *) temp, sizeof(temp), 100);
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	2306      	movs	r3, #6
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	2204      	movs	r2, #4
 800099e:	21ee      	movs	r1, #238	; 0xee
 80009a0:	6838      	ldr	r0, [r7, #0]
 80009a2:	f001 ff69 	bl	8002878 <HAL_I2C_Mem_Read>
	        uint32_t uncomp_temp = ((temp[5] << 16) | (temp[4] << 8) | temp[3]);
 80009a6:	7b7b      	ldrb	r3, [r7, #13]
 80009a8:	041a      	lsls	r2, r3, #16
 80009aa:	7b3b      	ldrb	r3, [r7, #12]
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	4313      	orrs	r3, r2
 80009b0:	7afa      	ldrb	r2, [r7, #11]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]

	        float partial_data1;
	        float partial_data2;

	        partial_data1 = (float)(uncomp_temp - sensor->data.PAR_T1);
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	ee07 3a90 	vmov	s15, r3
 80009bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80009c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ca:	edc7 7a05 	vstr	s15, [r7, #20]
	        partial_data2 = (float)(partial_data1 * sensor->data.PAR_T2);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80009d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80009d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009dc:	edc7 7a04 	vstr	s15, [r7, #16]
	        /*Update the compensated temperature in data structure since this is needed for
	        pressure calulation*/
	        sensor->data.T_LIN = partial_data2 + (partial_data1 * partial_data1) * sensor->data.PAR_T3;
 80009e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80009e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80009ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	        sensor->get_pressure_compensated(sensor, temp);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a04:	f107 0208 	add.w	r2, r7, #8
 8000a08:	4611      	mov	r1, r2
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	4798      	blx	r3

}
 8000a0e:	bf00      	nop
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <get_pressure_compensated>:

void get_pressure_compensated(struct BMP388_sensor *sensor, uint8_t buffer []) {
 8000a16:	b480      	push	{r7}
 8000a18:	b08b      	sub	sp, #44	; 0x2c
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
	// Collect Raw Value from Sensor
	        uint32_t uncomp_press = ((buffer[2] << 16) | (buffer[1] << 8) | buffer[0]);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	3302      	adds	r3, #2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	041a      	lsls	r2, r3, #16
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	4313      	orrs	r3, r2
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
	        float partial_data4;
	        float partial_out1;
	        float partial_out2;
	        /*Calibration Data */

	        partial_data1 = sensor->data.PAR_P6 * sensor->data.T_LIN;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4a:	edc7 7a08 	vstr	s15, [r7, #32]
	        partial_data2 = sensor->data.PAR_P7 * (sensor->data.T_LIN * sensor->data.T_LIN);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a68:	edc7 7a07 	vstr	s15, [r7, #28]
	        partial_data3 = sensor->data.PAR_P8 * (sensor->data.T_LIN * sensor->data.T_LIN * sensor->data.T_LIN);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000a7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a90:	edc7 7a06 	vstr	s15, [r7, #24]
	        partial_out1  = sensor->data.PAR_P5 + partial_data1 + partial_data2 + partial_data3;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000a9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000aa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab2:	edc7 7a05 	vstr	s15, [r7, #20]

	        partial_data1 = sensor->data.PAR_P2 * sensor->data.T_LIN;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac6:	edc7 7a08 	vstr	s15, [r7, #32]
	        partial_data2 = sensor->data.PAR_P3 * (sensor->data.T_LIN * sensor->data.T_LIN);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae4:	edc7 7a07 	vstr	s15, [r7, #28]
	        partial_data3 = sensor->data.PAR_P4 * (sensor->data.T_LIN * sensor->data.T_LIN * sensor->data.T_LIN);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000afa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0c:	edc7 7a06 	vstr	s15, [r7, #24]
	        partial_out2  = (float)uncomp_press *  (sensor->data.PAR_P1 + partial_data1 + partial_data2 + partial_data3);
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8000b20:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000b28:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000b30:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b3c:	edc7 7a04 	vstr	s15, [r7, #16]

	        partial_data1 = (float)uncomp_press * (float)uncomp_press;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b58:	edc7 7a08 	vstr	s15, [r7, #32]
	        partial_data2 = sensor->data.PAR_P9 + sensor->data.PAR_P10 * sensor->data.T_LIN;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b76:	edc7 7a07 	vstr	s15, [r7, #28]
	        partial_data3 = partial_data1 * partial_data2;
 8000b7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b86:	edc7 7a06 	vstr	s15, [r7, #24]
	        partial_data4 = partial_data3 + ((float)uncomp_press * (float)uncomp_press * (float)uncomp_press) * sensor->data.PAR_P11;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bba:	ed97 7a06 	vldr	s14, [r7, #24]
 8000bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc2:	edc7 7a03 	vstr	s15, [r7, #12]
	        sensor->data.P_LIN = partial_out1 + partial_out2 + partial_data4;
 8000bc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bca:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

}
 8000be0:	bf00      	nop
 8000be2:	372c      	adds	r7, #44	; 0x2c
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <calibrate_sensor>:

void calibrate_sensor(struct BMP388_sensor *sensor, I2C_HandleTypeDef* hi2c) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af04      	add	r7, sp, #16
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	uint8_t buffer [21];
	HAL_I2C_Mem_Read((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, CALIBRATION_REG, sizeof(uint8_t), (uint8_t *) buffer, sizeof(buffer), 1000);
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2315      	movs	r3, #21
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	2231      	movs	r2, #49	; 0x31
 8000c0a:	21ee      	movs	r1, #238	; 0xee
 8000c0c:	6838      	ldr	r0, [r7, #0]
 8000c0e:	f001 fe33 	bl	8002878 <HAL_I2C_Mem_Read>

	sensor->raw_calib.fill_calibration_params(&sensor->raw_calib, (uint8_t *)buffer);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f107 0108 	add.w	r1, r7, #8
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4798      	blx	r3
	sensor->data.set_coeff(&sensor->data, &sensor->raw_calib);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	321c      	adds	r2, #28
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4798      	blx	r3

}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <configure_sensor>:

void configure_sensor(struct BMP388_sensor *sensor, I2C_HandleTypeDef* hi2c) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b088      	sub	sp, #32
 8000c3a:	af04      	add	r7, sp, #16
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
    // Implementation of configure_sensor...
	uint8_t sf  = SOFT_RESET;
 8000c40:	23b6      	movs	r3, #182	; 0xb6
 8000c42:	73fb      	strb	r3, [r7, #15]
	uint8_t osr = OSR_SETTINGS;
 8000c44:	2303      	movs	r3, #3
 8000c46:	73bb      	strb	r3, [r7, #14]
	uint8_t pwr = PWR_SETTINGS;
 8000c48:	2333      	movs	r3, #51	; 0x33
 8000c4a:	737b      	strb	r3, [r7, #13]
	uint8_t iir = IIR_FILTER;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	733b      	strb	r3, [r7, #12]
	uint8_t odr = ODR_SETTING;
 8000c50:	2302      	movs	r3, #2
 8000c52:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, CMD_BMP, sizeof(uint8_t), &sf,sizeof(uint8_t), 100);
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 030f 	add.w	r3, r7, #15
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	227e      	movs	r2, #126	; 0x7e
 8000c66:	21ee      	movs	r1, #238	; 0xee
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f001 fcf1 	bl	8002650 <HAL_I2C_Mem_Write>
	HAL_Delay(250);
 8000c6e:	20fa      	movs	r0, #250	; 0xfa
 8000c70:	f001 f978 	bl	8001f64 <HAL_Delay>

	sensor->calibrate_sensor(sensor, (I2C_HandleTypeDef*)hi2c);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c78:	6839      	ldr	r1, [r7, #0]
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	4798      	blx	r3
	HAL_Delay(250);
 8000c7e:	20fa      	movs	r0, #250	; 0xfa
 8000c80:	f001 f970 	bl	8001f64 <HAL_Delay>

	HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, CONFIG, 1, &iir,1, 100);
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	9301      	str	r3, [sp, #4]
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2301      	movs	r3, #1
 8000c94:	221f      	movs	r2, #31
 8000c96:	21ee      	movs	r1, #238	; 0xee
 8000c98:	6838      	ldr	r0, [r7, #0]
 8000c9a:	f001 fcd9 	bl	8002650 <HAL_I2C_Mem_Write>
	HAL_Delay(250);
 8000c9e:	20fa      	movs	r0, #250	; 0xfa
 8000ca0:	f001 f960 	bl	8001f64 <HAL_Delay>

	HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, ODR, 1, &odr,1, 100);
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	f107 030b 	add.w	r3, r7, #11
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	221d      	movs	r2, #29
 8000cb6:	21ee      	movs	r1, #238	; 0xee
 8000cb8:	6838      	ldr	r0, [r7, #0]
 8000cba:	f001 fcc9 	bl	8002650 <HAL_I2C_Mem_Write>
	HAL_Delay(250);
 8000cbe:	20fa      	movs	r0, #250	; 0xfa
 8000cc0:	f001 f950 	bl	8001f64 <HAL_Delay>


	HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, OSR, 1, &osr,1, 100);
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	f107 030e 	add.w	r3, r7, #14
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	221c      	movs	r2, #28
 8000cd6:	21ee      	movs	r1, #238	; 0xee
 8000cd8:	6838      	ldr	r0, [r7, #0]
 8000cda:	f001 fcb9 	bl	8002650 <HAL_I2C_Mem_Write>
	HAL_Delay(250);
 8000cde:	20fa      	movs	r0, #250	; 0xfa
 8000ce0:	f001 f940 	bl	8001f64 <HAL_Delay>


	HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR, PWR_CTRL, 1, &pwr,1, 100);
 8000ce4:	2364      	movs	r3, #100	; 0x64
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	f107 030d 	add.w	r3, r7, #13
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	221b      	movs	r2, #27
 8000cf6:	21ee      	movs	r1, #238	; 0xee
 8000cf8:	6838      	ldr	r0, [r7, #0]
 8000cfa:	f001 fca9 	bl	8002650 <HAL_I2C_Mem_Write>
	HAL_Delay(250);
 8000cfe:	20fa      	movs	r0, #250	; 0xfa
 8000d00:	f001 f930 	bl	8001f64 <HAL_Delay>


}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <BMP388_sensor_create>:

BMP388_sensor *BMP388_sensor_create() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
    BMP388_sensor *sensor = (BMP388_sensor *)malloc(sizeof(BMP388_sensor));
 8000d12:	2070      	movs	r0, #112	; 0x70
 8000d14:	f008 f856 	bl	8008dc4 <malloc>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	607b      	str	r3, [r7, #4]
    if (sensor) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d011      	beq.n	8000d46 <BMP388_sensor_create+0x3a>
        sensor->raw_calib.fill_calibration_params = fill_calibration_params;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <BMP388_sensor_create+0x44>)
 8000d26:	619a      	str	r2, [r3, #24]
        sensor->data.set_coeff = set_coeff;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <BMP388_sensor_create+0x48>)
 8000d2c:	65da      	str	r2, [r3, #92]	; 0x5c
        sensor->get_compensated = get_compensated;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <BMP388_sensor_create+0x4c>)
 8000d32:	661a      	str	r2, [r3, #96]	; 0x60
        sensor->get_pressure_compensated = get_pressure_compensated;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <BMP388_sensor_create+0x50>)
 8000d38:	665a      	str	r2, [r3, #100]	; 0x64
        sensor->calibrate_sensor = calibrate_sensor;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <BMP388_sensor_create+0x54>)
 8000d3e:	669a      	str	r2, [r3, #104]	; 0x68
        sensor->configure_sensor = configure_sensor;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <BMP388_sensor_create+0x58>)
 8000d44:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    return sensor;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	080005e5 	.word	0x080005e5
 8000d54:	08000711 	.word	0x08000711
 8000d58:	08000951 	.word	0x08000951
 8000d5c:	08000a17 	.word	0x08000a17
 8000d60:	08000bed 	.word	0x08000bed
 8000d64:	08000c37 	.word	0x08000c37

08000d68 <GZP_SET_REG>:
 */


#include "GZP6859D.h"

void GZP_SET_REG(I2C_HandleTypeDef* hi2c, uint8_t reg_addr, uint8_t input){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	70fb      	strb	r3, [r7, #3]
 8000d74:	4613      	mov	r3, r2
 8000d76:	70bb      	strb	r3, [r7, #2]
	//I2c_HandleTypeDef, device addr, addr to write to on device,
	//memaddsize, input, size, timeout

	HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c,GZP_I2C_ADDR,reg_addr,1,&input,1,50);
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	2332      	movs	r3, #50	; 0x32
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	2301      	movs	r3, #1
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	1cbb      	adds	r3, r7, #2
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	21da      	movs	r1, #218	; 0xda
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f001 fc5f 	bl	8002650 <HAL_I2C_Mem_Write>
	//if any issues with HAL or writing, return
//	if(status != HAL_OK){
//		return status;
//	}
//	return HAL_OK;
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <GZP_READ_REG>:

uint8_t GZP_READ_REG(I2C_HandleTypeDef* hi2c, uint8_t reg_addr){
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b088      	sub	sp, #32
 8000d9e:	af04      	add	r7, sp, #16
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
	uint8_t output;
	HAL_I2C_Mem_Read((I2C_HandleTypeDef*)hi2c,GZP_I2C_ADDR,reg_addr,1,&output,1,50);
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	2332      	movs	r3, #50	; 0x32
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2301      	movs	r3, #1
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 030f 	add.w	r3, r7, #15
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21da      	movs	r1, #218	; 0xda
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f001 fd5b 	bl	8002878 <HAL_I2C_Mem_Read>
	return output;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <GZP_READ_DATA>:

void GZP_READ_DATA(I2C_HandleTypeDef* hi2c, uint8_t* combined){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	uint8_t check = (1 << 3);
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	73fb      	strb	r3, [r7, #15]

	GZP_SET_REG(hi2c, CMD, REQUEST_CMD);
 8000dda:	220a      	movs	r2, #10
 8000ddc:	2130      	movs	r1, #48	; 0x30
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffc2 	bl	8000d68 <GZP_SET_REG>

	//wait for Sco bit to go to zero, means conversions are done and can be read
	while((GZP_READ_REG(hi2c, CMD) & check) != check);
 8000de4:	bf00      	nop
 8000de6:	2130      	movs	r1, #48	; 0x30
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffd6 	bl	8000d9a <GZP_READ_REG>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	4013      	ands	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d1f3      	bne.n	8000de6 <GZP_READ_DATA+0x1a>

	//read first 3 pressure, next 2 temp into same array
	//combined = (uint8_t*) malloc(5);
	HAL_I2C_Mem_Read((I2C_HandleTypeDef*)hi2c, GZP_I2C_ADDR, START_ADDR,1,(uint8_t *)combined,5,500);
 8000dfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2305      	movs	r3, #5
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2206      	movs	r2, #6
 8000e10:	21da      	movs	r1, #218	; 0xda
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f001 fd30 	bl	8002878 <HAL_I2C_Mem_Read>


	//return out;
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <GZP_READ_PRESSURE>:

double GZP_READ_PRESSURE(uint8_t* combined){
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	uint32_t pressure_ADC = ((combined[0] << 16) | (combined[1] << 8) | combined[2]);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	4313      	orrs	r3, r2
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	3202      	adds	r2, #2
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
	uint32_t check_sign = 1 << 23;
 8000e42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e46:	60bb      	str	r3, [r7, #8]

	//convert ADC to kPa units:
	//bit 23 is 0, positive
	if((pressure_ADC & check_sign) != check_sign){
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d006      	beq.n	8000e62 <GZP_READ_PRESSURE+0x42>
		return pressure_ADC / K_VAL;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	099b      	lsrs	r3, r3, #6
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e60:	e006      	b.n	8000e70 <GZP_READ_PRESSURE+0x50>
	}

	return (pressure_ADC - (2^24)) / K_VAL;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3b1a      	subs	r3, #26
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
}
 8000e70:	eeb0 0b47 	vmov.f64	d0, d7
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <GZP_READ_TEMP>:

double GZP_READ_TEMP(uint8_t* combined){
 8000e7e:	b480      	push	{r7}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	uint32_t temp_ADC = ((combined[3] << 8) | combined[4]);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3303      	adds	r3, #3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	3204      	adds	r2, #4
 8000e92:	7812      	ldrb	r2, [r2, #0]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
	uint32_t check_sign = 1 << 15;
 8000e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e9c:	60bb      	str	r3, [r7, #8]

	//convert ADC to C units:
	//bit 15 is 0, positive
	if((temp_ADC & check_sign) != check_sign){
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d006      	beq.n	8000eb8 <GZP_READ_TEMP+0x3a>
		return (double)(temp_ADC / 256); //from GZP6859D datasheet
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000eb6:	e006      	b.n	8000ec6 <GZP_READ_TEMP+0x48>
	}else{
		return (double)((temp_ADC - (2^16)) / 256); //""
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3b12      	subs	r3, #18
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	}
}
 8000ec6:	eeb0 0b47 	vmov.f64	d0, d7
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	0000      	movs	r0, r0
	...

08000ed8 <GZP_CALC_SPEED>:

double GZP_CALC_SPEED(I2C_HandleTypeDef* hi2c){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	uint8_t combined[5];
	GZP_READ_DATA((I2C_HandleTypeDef* )hi2c, (uint8_t *)combined);
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff70 	bl	8000dcc <GZP_READ_DATA>
	double R = 287; // J/kg/K
 8000eec:	a31a      	add	r3, pc, #104	; (adr r3, 8000f58 <GZP_CALC_SPEED+0x80>)
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double P = GZP_READ_PRESSURE((uint8_t *)combined);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff90 	bl	8000e20 <GZP_READ_PRESSURE>
 8000f00:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double T = GZP_READ_TEMP((uint8_t *)combined);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ffb8 	bl	8000e7e <GZP_READ_TEMP>
 8000f0e:	ed87 0b08 	vstr	d0, [r7, #32]
	//free (combined);
	//air density = pressure / (temp * specific gas constant)
	// kg/m^3 = (Pa or N/m^2) / (K * J/kg/K)
	double p = P / (T * R);
 8000f12:	ed97 6b08 	vldr	d6, [r7, #32]
 8000f16:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000f1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f1e:	ed97 5b0a 	vldr	d5, [r7, #40]	; 0x28
 8000f22:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f26:	ed87 7b06 	vstr	d7, [r7, #24]
	double velocity = (2 * P) / p;
 8000f2a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000f2e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000f32:	ed97 6b06 	vldr	d6, [r7, #24]
 8000f36:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f3a:	ed87 7b04 	vstr	d7, [r7, #16]
	return sqrt(velocity); //sqrt(2P/p)
 8000f3e:	ed97 0b04 	vldr	d0, [r7, #16]
 8000f42:	f008 f8b5 	bl	80090b0 <sqrt>
 8000f46:	eeb0 7b40 	vmov.f64	d7, d0
}
 8000f4a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f4e:	3738      	adds	r7, #56	; 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	f3af 8000 	nop.w
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	4071f000 	.word	0x4071f000

08000f60 <ICM_sensor_create>:
 */

#include "ICM-42688.h"


ICM_data *ICM_sensor_create() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
    ICM_data *sensor = (ICM_data *)malloc(sizeof(ICM_data));
 8000f66:	2040      	movs	r0, #64	; 0x40
 8000f68:	f007 ff2c 	bl	8008dc4 <malloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	607b      	str	r3, [r7, #4]
    if (sensor) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <ICM_sensor_create+0x1c>
        sensor->collect_data = collect_data;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <ICM_sensor_create+0x28>)
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return sensor;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08001009 	.word	0x08001009

08000f8c <setup_ICM>:

void setup_ICM (I2C_HandleTypeDef* hi2c){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	6078      	str	r0, [r7, #4]
		uint8_t gyro_set  = GYRO_SETTING;
 8000f94:	2306      	movs	r3, #6
 8000f96:	73fb      	strb	r3, [r7, #15]
		uint8_t accel_set = ACCEL_SETTING;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	73bb      	strb	r3, [r7, #14]
		uint8_t pwr_set   = PWR_SET_ICM;
 8000f9c:	231f      	movs	r3, #31
 8000f9e:	737b      	strb	r3, [r7, #13]


		HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR_ICM, ACCEL_CONFIG0, 1, &accel_set,1, 100);
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f107 030e 	add.w	r3, r7, #14
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2250      	movs	r2, #80	; 0x50
 8000fb2:	21d0      	movs	r1, #208	; 0xd0
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f001 fb4b 	bl	8002650 <HAL_I2C_Mem_Write>
		HAL_Delay(250);
 8000fba:	20fa      	movs	r0, #250	; 0xfa
 8000fbc:	f000 ffd2 	bl	8001f64 <HAL_Delay>

		HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR_ICM, GYRO_CONFIG0, 1, &gyro_set,1, 100);
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	f107 030f 	add.w	r3, r7, #15
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	224f      	movs	r2, #79	; 0x4f
 8000fd2:	21d0      	movs	r1, #208	; 0xd0
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f001 fb3b 	bl	8002650 <HAL_I2C_Mem_Write>
		HAL_Delay(250);
 8000fda:	20fa      	movs	r0, #250	; 0xfa
 8000fdc:	f000 ffc2 	bl	8001f64 <HAL_Delay>

		HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, DEVICE_ADDR_ICM, PWR_MGMT0, 1, &pwr_set, 1, 100);
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	f107 030d 	add.w	r3, r7, #13
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	224e      	movs	r2, #78	; 0x4e
 8000ff2:	21d0      	movs	r1, #208	; 0xd0
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f001 fb2b 	bl	8002650 <HAL_I2C_Mem_Write>
		HAL_Delay(250);
 8000ffa:	20fa      	movs	r0, #250	; 0xfa
 8000ffc:	f000 ffb2 	bl	8001f64 <HAL_Delay>

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <collect_data>:

void collect_data (struct ICM_data *sensor, I2C_HandleTypeDef* hi2c){
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]

	uint8_t temp_buffer[14];
	HAL_I2C_Mem_Read((I2C_HandleTypeDef*) hi2c, DEVICE_ADDR_ICM, DATA_START, 1, (uint8_t *)temp_buffer, sizeof(temp_buffer), 1000);
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	230e      	movs	r3, #14
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	221d      	movs	r2, #29
 8001026:	21d0      	movs	r1, #208	; 0xd0
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f001 fc25 	bl	8002878 <HAL_I2C_Mem_Read>

	sensor->TEMP 	= ((temp_buffer[1] << 8)|(temp_buffer[0]));
 800102e:	7a7b      	ldrb	r3, [r7, #9]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	7a3a      	ldrb	r2, [r7, #8]
 8001034:	4313      	orrs	r3, r2
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	sensor->ACCEL_X = ((temp_buffer[3] << 8)|(temp_buffer[2]));
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	7aba      	ldrb	r2, [r7, #10]
 800104a:	4313      	orrs	r3, r2
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	ed83 7b06 	vstr	d7, [r3, #24]
	sensor->ACCEL_Y = ((temp_buffer[5] << 8)|(temp_buffer[4]));
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	7b3a      	ldrb	r2, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	ed83 7b08 	vstr	d7, [r3, #32]
	sensor->ACCEL_Z = ((temp_buffer[7] << 8)|(temp_buffer[6]));
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	7bba      	ldrb	r2, [r7, #14]
 8001076:	4313      	orrs	r3, r2
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	sensor->GYRO_X  = ((temp_buffer[9] << 8)|(temp_buffer[8]));
 8001086:	7c7b      	ldrb	r3, [r7, #17]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	7c3a      	ldrb	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed83 7b00 	vstr	d7, [r3]
	sensor->GYRO_Y  = ((temp_buffer[11] << 8)|(temp_buffer[10]));
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	7cba      	ldrb	r2, [r7, #18]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed83 7b02 	vstr	d7, [r3, #8]
	sensor->GYRO_Z  = ((temp_buffer[13] << 8)|(temp_buffer[12]));
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	7d3a      	ldrb	r2, [r7, #20]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	ed83 7b04 	vstr	d7, [r3, #16]


}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <vApplicationGetIdleTaskMemory+0x2c>)
 80010e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <vApplicationGetIdleTaskMemory+0x30>)
 80010e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	24000094 	.word	0x24000094
 8001100:	24000148 	.word	0x24000148

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b0aa      	sub	sp, #168	; 0xa8
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f000 fecf 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110e:	f000 f893 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f000 f9e3 	bl	80014dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001116:	f000 f995 	bl	8001444 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800111a:	f000 f947 	bl	80013ac <MX_USART1_UART_Init>
  MX_I2C4_Init();
 800111e:	f000 f905 	bl	800132c <MX_I2C4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <main+0x104>)
 8001124:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001128:	461d      	mov	r5, r3
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001136:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f006 fbbc 	bl	80078ba <osThreadCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a31      	ldr	r2, [pc, #196]	; (800120c <main+0x108>)
 8001146:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Thread */
  osThreadDef(GPS_Thread, GPS_Entry, osPriorityIdle, 0, 128);
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <main+0x10c>)
 800114a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800114e:	461d      	mov	r5, r3
 8001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_ThreadHandle = osThreadCreate(osThread(GPS_Thread), NULL);
 800115c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f006 fba9 	bl	80078ba <osThreadCreate>
 8001168:	4603      	mov	r3, r0
 800116a:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <main+0x110>)
 800116c:	6013      	str	r3, [r2, #0]

  /* definition and creation of XBEE_Thread */
  osThreadDef(XBEE_Thread, XBEE_Entry, osPriorityIdle, 0, 128);
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <main+0x114>)
 8001170:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001174:	461d      	mov	r5, r3
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  XBEE_ThreadHandle = osThreadCreate(osThread(XBEE_Thread), NULL);
 8001182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fb96 	bl	80078ba <osThreadCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a22      	ldr	r2, [pc, #136]	; (800121c <main+0x118>)
 8001192:	6013      	str	r3, [r2, #0]

  /* definition and creation of BMP388_Thread */
  osThreadDef(BMP388_Thread, BMP388_Entry, osPriorityIdle, 0, 128);
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <main+0x11c>)
 8001196:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800119a:	461d      	mov	r5, r3
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BMP388_ThreadHandle = osThreadCreate(osThread(BMP388_Thread), NULL);
 80011a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 fb83 	bl	80078ba <osThreadCreate>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <main+0x120>)
 80011b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of GZP_Thread */
  osThreadDef(GZP_Thread, GZP_Entry, osPriorityIdle, 0, 128);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <main+0x124>)
 80011bc:	f107 041c 	add.w	r4, r7, #28
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GZP_ThreadHandle = osThreadCreate(osThread(GZP_Thread), NULL);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 fb70 	bl	80078ba <osThreadCreate>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a13      	ldr	r2, [pc, #76]	; (800122c <main+0x128>)
 80011de:	6013      	str	r3, [r2, #0]

  /* definition and creation of ICM_Thread */
  osThreadDef(ICM_Thread, ICM_Entry, osPriorityIdle, 0, 128);
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <main+0x12c>)
 80011e2:	463c      	mov	r4, r7
 80011e4:	461d      	mov	r5, r3
 80011e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ICM_ThreadHandle = osThreadCreate(osThread(ICM_Thread), NULL);
 80011f2:	463b      	mov	r3, r7
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 fb5f 	bl	80078ba <osThreadCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <main+0x130>)
 8001200:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001202:	f006 fb53 	bl	80078ac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001206:	e7fe      	b.n	8001206 <main+0x102>
 8001208:	0800915c 	.word	0x0800915c
 800120c:	240004c4 	.word	0x240004c4
 8001210:	08009178 	.word	0x08009178
 8001214:	240004c8 	.word	0x240004c8
 8001218:	08009194 	.word	0x08009194
 800121c:	240004cc 	.word	0x240004cc
 8001220:	080091b0 	.word	0x080091b0
 8001224:	240004d0 	.word	0x240004d0
 8001228:	080091cc 	.word	0x080091cc
 800122c:	240004d4 	.word	0x240004d4
 8001230:	080091e8 	.word	0x080091e8
 8001234:	240004d8 	.word	0x240004d8

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b09c      	sub	sp, #112	; 0x70
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	224c      	movs	r2, #76	; 0x4c
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f007 fdc4 	bl	8008dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2220      	movs	r2, #32
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fdbe 	bl	8008dd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001258:	2002      	movs	r0, #2
 800125a:	f001 ff81 	bl	8003160 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <SystemClock_Config+0xec>)
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <SystemClock_Config+0xec>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <SystemClock_Config+0xec>)
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <SystemClock_Config+0xf0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a2a      	ldr	r2, [pc, #168]	; (8001328 <SystemClock_Config+0xf0>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <SystemClock_Config+0xf0>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001290:	bf00      	nop
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <SystemClock_Config+0xf0>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800129e:	d1f8      	bne.n	8001292 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a0:	2302      	movs	r3, #2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2340      	movs	r3, #64	; 0x40
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b4:	2304      	movs	r3, #4
 80012b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012b8:	230a      	movs	r3, #10
 80012ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012c8:	230c      	movs	r3, #12
 80012ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80012cc:	2302      	movs	r3, #2
 80012ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 ff7b 	bl	80031d4 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012e4:	f000 fb34 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	233f      	movs	r3, #63	; 0x3f
 80012ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2303      	movs	r3, #3
 80012ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2101      	movs	r1, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fbbb 	bl	8003a88 <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001318:	f000 fb1a 	bl	8001950 <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3770      	adds	r7, #112	; 0x70
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58000400 	.word	0x58000400
 8001328:	58024800 	.word	0x58024800

0800132c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_I2C4_Init+0x74>)
 8001332:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <MX_I2C4_Init+0x78>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_I2C4_Init+0x74>)
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <MX_I2C4_Init+0x7c>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_I2C4_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_I2C4_Init+0x74>)
 8001344:	2201      	movs	r2, #1
 8001346:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_I2C4_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_I2C4_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_I2C4_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_I2C4_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_I2C4_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <MX_I2C4_Init+0x74>)
 8001368:	f001 f8d6 	bl	8002518 <HAL_I2C_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001372:	f000 faed 	bl	8001950 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001376:	2100      	movs	r1, #0
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <MX_I2C4_Init+0x74>)
 800137a:	f001 fe59 	bl	8003030 <HAL_I2CEx_ConfigAnalogFilter>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001384:	f000 fae4 	bl	8001950 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001388:	2100      	movs	r1, #0
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_I2C4_Init+0x74>)
 800138c:	f001 fe9b 	bl	80030c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001396:	f000 fadb 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	24000348 	.word	0x24000348
 80013a4:	58001c00 	.word	0x58001c00
 80013a8:	00702991 	.word	0x00702991

080013ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV2;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <MX_USART1_UART_Init+0x90>)
 80013f6:	f005 f80f 	bl	8006418 <HAL_UART_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 faa6 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_USART1_UART_Init+0x90>)
 8001408:	f006 f96d 	bl	80076e6 <HAL_UARTEx_SetTxFifoThreshold>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001412:	f000 fa9d 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_USART1_UART_Init+0x90>)
 800141a:	f006 f9a2 	bl	8007762 <HAL_UARTEx_SetRxFifoThreshold>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001424:	f000 fa94 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_USART1_UART_Init+0x90>)
 800142a:	f006 f923 	bl	8007674 <HAL_UARTEx_DisableFifoMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 fa8c 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2400039c 	.word	0x2400039c
 8001440:	40011000 	.word	0x40011000

08001444 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <MX_USART3_UART_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001450:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001454:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV2;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001482:	2201      	movs	r2, #1
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 800148e:	f004 ffc3 	bl	8006418 <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001498:	f000 fa5a 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 80014a0:	f006 f921 	bl	80076e6 <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f000 fa51 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 80014b2:	f006 f956 	bl	8007762 <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 fa48 	bl	8001950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USART3_UART_Init+0x90>)
 80014c2:	f006 f8d7 	bl	8007674 <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 fa40 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	24000430 	.word	0x24000430
 80014d8:	40004800 	.word	0x40004800

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	4a76      	ldr	r2, [pc, #472]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001510:	4b70      	ldr	r3, [pc, #448]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a6f      	ldr	r2, [pc, #444]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	4a67      	ldr	r2, [pc, #412]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	4a60      	ldr	r2, [pc, #384]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155c:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001588:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 8001590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2140      	movs	r1, #64	; 0x40
 80015aa:	484b      	ldr	r0, [pc, #300]	; (80016d8 <MX_GPIO_Init+0x1fc>)
 80015ac:	f000 ff9a 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	4849      	ldr	r0, [pc, #292]	; (80016dc <MX_GPIO_Init+0x200>)
 80015b6:	f000 ff95 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4843      	ldr	r0, [pc, #268]	; (80016e0 <MX_GPIO_Init+0x204>)
 80015d2:	f000 fdd7 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015d6:	2332      	movs	r3, #50	; 0x32
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e6:	230b      	movs	r3, #11
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	483b      	ldr	r0, [pc, #236]	; (80016e0 <MX_GPIO_Init+0x204>)
 80015f2:	f000 fdc7 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015f6:	2386      	movs	r3, #134	; 0x86
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001606:	230b      	movs	r3, #11
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4834      	ldr	r0, [pc, #208]	; (80016e4 <MX_GPIO_Init+0x208>)
 8001612:	f000 fdb7 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001628:	230b      	movs	r3, #11
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	482a      	ldr	r0, [pc, #168]	; (80016dc <MX_GPIO_Init+0x200>)
 8001634:	f000 fda6 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4822      	ldr	r0, [pc, #136]	; (80016d8 <MX_GPIO_Init+0x1fc>)
 8001650:	f000 fd98 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	4619      	mov	r1, r3
 8001666:	481c      	ldr	r0, [pc, #112]	; (80016d8 <MX_GPIO_Init+0x1fc>)
 8001668:	f000 fd8c 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800166c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800167e:	230a      	movs	r3, #10
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	4816      	ldr	r0, [pc, #88]	; (80016e4 <MX_GPIO_Init+0x208>)
 800168a:	f000 fd7b 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800168e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a0:	230b      	movs	r3, #11
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	480b      	ldr	r0, [pc, #44]	; (80016d8 <MX_GPIO_Init+0x1fc>)
 80016ac:	f000 fd6a 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_GPIO_Init+0x200>)
 80016c8:	f000 fd5c 	bl	8002184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	; 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58021800 	.word	0x58021800
 80016dc:	58020400 	.word	0x58020400
 80016e0:	58020800 	.word	0x58020800
 80016e4:	58020000 	.word	0x58020000

080016e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // Let Bit mask know, you would like to read
	  osDelay(10000);
 80016f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80016f4:	f006 f92d 	bl	8007952 <osDelay>
	  for(;;){
		  control |= check;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <StartDefaultTask+0x54>)
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <StartDefaultTask+0x58>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <StartDefaultTask+0x54>)
 8001704:	801a      	strh	r2, [r3, #0]
		  if (control && !(control & (control - 1))){
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <StartDefaultTask+0x54>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d013      	beq.n	8001736 <StartDefaultTask+0x4e>
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <StartDefaultTask+0x54>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <StartDefaultTask+0x54>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10a      	bne.n	8001736 <StartDefaultTask+0x4e>
			  osDelay(10);
 8001720:	200a      	movs	r0, #10
 8001722:	f006 f916 	bl	8007952 <osDelay>
			  control &= ~(check);
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <StartDefaultTask+0x54>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <StartDefaultTask+0x54>)
 8001732:	801a      	strh	r2, [r3, #0]
 8001734:	e000      	b.n	8001738 <StartDefaultTask+0x50>
		  }
		  else continue;
 8001736:	bf00      	nop
		  control |= check;
 8001738:	e7de      	b.n	80016f8 <StartDefaultTask+0x10>
 800173a:	bf00      	nop
 800173c:	2400061a 	.word	0x2400061a
 8001740:	ffff8000 	.word	0xffff8000

08001744 <GPS_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS_Entry */
void GPS_Entry(void const * argument)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPS_Entry */
  /* Infinite loop */

	// Sending Configuration String to GPS
	HAL_UART_Transmit(&huart3, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAONLY, sizeof(PMTK_SET_NMEA_OUTPUT_GGAONLY), 500);
 800174c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001750:	2234      	movs	r2, #52	; 0x34
 8001752:	4911      	ldr	r1, [pc, #68]	; (8001798 <GPS_Entry+0x54>)
 8001754:	4811      	ldr	r0, [pc, #68]	; (800179c <GPS_Entry+0x58>)
 8001756:	f004 feaf 	bl	80064b8 <HAL_UART_Transmit>

  for(;;)
  {
	  	 // Bit-mapping Mutex Alike
		if ((control & check) != check){
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <GPS_Entry+0x5c>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b21b      	sxth	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	dbfa      	blt.n	800175a <GPS_Entry+0x16>
			//Set this threads bit to 1 to let other threads know its occupied
			control |= (1 << 0);
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <GPS_Entry+0x5c>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <GPS_Entry+0x5c>)
 8001770:	801a      	strh	r2, [r3, #0]
			//Code goes in here
			HAL_UART_Receive(&huart3, (uint8_t *)GPS_Buffer, sizeof(GPS_Buffer), 1000);
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	2264      	movs	r2, #100	; 0x64
 8001778:	490a      	ldr	r1, [pc, #40]	; (80017a4 <GPS_Entry+0x60>)
 800177a:	4808      	ldr	r0, [pc, #32]	; (800179c <GPS_Entry+0x58>)
 800177c:	f004 ff2a 	bl	80065d4 <HAL_UART_Receive>
			PACKET[5][0] = 'c';
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <GPS_Entry+0x64>)
 8001782:	2263      	movs	r2, #99	; 0x63
 8001784:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			//Set this thread bit back off
			control &= ~(1 << 0);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <GPS_Entry+0x5c>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <GPS_Entry+0x5c>)
 8001794:	801a      	strh	r2, [r3, #0]
		if ((control & check) != check){
 8001796:	e7e0      	b.n	800175a <GPS_Entry+0x16>
 8001798:	08009204 	.word	0x08009204
 800179c:	24000430 	.word	0x24000430
 80017a0:	2400061a 	.word	0x2400061a
 80017a4:	240004dc 	.word	0x240004dc
 80017a8:	24000548 	.word	0x24000548

080017ac <XBEE_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_XBEE_Entry */
void XBEE_Entry(void const * argument)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  //uint8_t AT_SH [100] = { "This is a test"};
	  // Bit-mapping Mutex Alike
		if ((control & check) != check){
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <XBEE_Entry+0x30>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dbfa      	blt.n	80017b4 <XBEE_Entry+0x8>
			//Set this threads bit to 1 to let other threads know its occupied
			control |= (1 << 1);
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <XBEE_Entry+0x30>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <XBEE_Entry+0x30>)
 80017ca:	801a      	strh	r2, [r3, #0]
//					auto t = HAL_UART_Receive(&huart1, (uint8_t *)(AT_SH+1), 80, 1000);
//					int i = 9;
//					osDelay(1000);
//				}
				//Set this thread bit back off
				control &= ~(1 << 1);
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <XBEE_Entry+0x30>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f023 0302 	bic.w	r3, r3, #2
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b01      	ldr	r3, [pc, #4]	; (80017dc <XBEE_Entry+0x30>)
 80017d8:	801a      	strh	r2, [r3, #0]
		if ((control & check) != check){
 80017da:	e7eb      	b.n	80017b4 <XBEE_Entry+0x8>
 80017dc:	2400061a 	.word	0x2400061a

080017e0 <BMP388_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMP388_Entry */
void BMP388_Entry(void const * argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMP388_Entry */
  /* Infinite loop */
	BMP388_sensor *sensor = BMP388_sensor_create();
 80017e8:	f7ff fa90 	bl	8000d0c <BMP388_sensor_create>
 80017ec:	6178      	str	r0, [r7, #20]
	sensor->configure_sensor((BMP388_sensor *)sensor, &hi2c4);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f2:	4913      	ldr	r1, [pc, #76]	; (8001840 <BMP388_Entry+0x60>)
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	4798      	blx	r3
  for(;;)
  {
	  // Bit-mapping Mutex Alike
		if ((control & check) != check){
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <BMP388_Entry+0x64>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dbfa      	blt.n	80017f8 <BMP388_Entry+0x18>
			//Set this threads bit to 1 to let other threads know its occupied
			control |= (1 << 2);
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <BMP388_Entry+0x64>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <BMP388_Entry+0x64>)
 800180e:	801a      	strh	r2, [r3, #0]
			//Code goes in here
			  sensor->get_compensated((BMP388_sensor *)sensor, &hi2c4);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	490a      	ldr	r1, [pc, #40]	; (8001840 <BMP388_Entry+0x60>)
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	4798      	blx	r3
			  float temp = sensor->data.T_LIN; //-> C
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	613b      	str	r3, [r7, #16]
			  float press = sensor->data.P_LIN; // -> Pa
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	60fb      	str	r3, [r7, #12]
			  PACKET[5][0] = 'c';
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <BMP388_Entry+0x68>)
 8001828:	2263      	movs	r2, #99	; 0x63
 800182a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			//Set this thread bit back off
			  control &= ~(1 << 2);
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <BMP388_Entry+0x64>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	f023 0304 	bic.w	r3, r3, #4
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <BMP388_Entry+0x64>)
 800183a:	801a      	strh	r2, [r3, #0]
		if ((control & check) != check){
 800183c:	e7dc      	b.n	80017f8 <BMP388_Entry+0x18>
 800183e:	bf00      	nop
 8001840:	24000348 	.word	0x24000348
 8001844:	2400061a 	.word	0x2400061a
 8001848:	24000548 	.word	0x24000548

0800184c <GZP_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GZP_Entry */
void GZP_Entry(void const * argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GZP_Entry */
  /* Infinite loop */
  for(;;)
  {
	  // Bit-mapping Mutex Alike
		if ((control & check) != check){
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <GZP_Entry+0x6c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b21b      	sxth	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	dbfa      	blt.n	8001854 <GZP_Entry+0x8>
			//Set this threads bit to 1 to let other threads know its occupied
			control |= (1 << 3);
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <GZP_Entry+0x6c>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <GZP_Entry+0x6c>)
 800186a:	801a      	strh	r2, [r3, #0]
			//Code goes in here
			GZP_READ_DATA(&hi2c4, (uint8_t *) GZP_Buffer);
 800186c:	4913      	ldr	r1, [pc, #76]	; (80018bc <GZP_Entry+0x70>)
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <GZP_Entry+0x74>)
 8001870:	f7ff faac 	bl	8000dcc <GZP_READ_DATA>
			double gzp_press = GZP_READ_PRESSURE((uint8_t *) GZP_Buffer);
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <GZP_Entry+0x70>)
 8001876:	f7ff fad3 	bl	8000e20 <GZP_READ_PRESSURE>
 800187a:	ed87 0b06 	vstr	d0, [r7, #24]
			double gzp_temp = GZP_READ_TEMP((uint8_t *) GZP_Buffer);
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <GZP_Entry+0x70>)
 8001880:	f7ff fafd 	bl	8000e7e <GZP_READ_TEMP>
 8001884:	ed87 0b04 	vstr	d0, [r7, #16]
			double gzp_speed = GZP_CALC_SPEED(&hi2c4);
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <GZP_Entry+0x74>)
 800188a:	f7ff fb25 	bl	8000ed8 <GZP_CALC_SPEED>
 800188e:	ee07 0a90 	vmov	s15, r0
 8001892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001896:	ed87 7b02 	vstr	d7, [r7, #8]
			PACKET[5][0] = 'c';
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <GZP_Entry+0x78>)
 800189c:	2263      	movs	r2, #99	; 0x63
 800189e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			osDelay(100);
 80018a2:	2064      	movs	r0, #100	; 0x64
 80018a4:	f006 f855 	bl	8007952 <osDelay>
			//Set this thread bit back off
			control &= ~(1 << 3);
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <GZP_Entry+0x6c>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	f023 0308 	bic.w	r3, r3, #8
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b01      	ldr	r3, [pc, #4]	; (80018b8 <GZP_Entry+0x6c>)
 80018b4:	801a      	strh	r2, [r3, #0]
		if ((control & check) != check){
 80018b6:	e7cd      	b.n	8001854 <GZP_Entry+0x8>
 80018b8:	2400061a 	.word	0x2400061a
 80018bc:	24000540 	.word	0x24000540
 80018c0:	24000348 	.word	0x24000348
 80018c4:	24000548 	.word	0x24000548

080018c8 <ICM_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ICM_Entry */
void ICM_Entry(void const * argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ICM_Entry */
  /* Infinite loop */
	ICM_data *icm_sensor = ICM_sensor_create();
 80018d0:	f7ff fb46 	bl	8000f60 <ICM_sensor_create>
 80018d4:	6178      	str	r0, [r7, #20]
	setup_ICM(&hi2c4);
 80018d6:	4812      	ldr	r0, [pc, #72]	; (8001920 <ICM_Entry+0x58>)
 80018d8:	f7ff fb58 	bl	8000f8c <setup_ICM>

  for(;;)
  {
	  // Bit-mapping Mutex Alike
	  			if ((control & check) != check){
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <ICM_Entry+0x5c>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dbfa      	blt.n	80018dc <ICM_Entry+0x14>
	  				//Set this threads bit to 1 to let other threads know its occupied
	  				control |= (1 << 4);
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <ICM_Entry+0x5c>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	f043 0310 	orr.w	r3, r3, #16
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <ICM_Entry+0x5c>)
 80018f2:	801a      	strh	r2, [r3, #0]
	  				//Code goes in here
	  				icm_sensor->collect_data((ICM_data *)icm_sensor,  &hi2c4);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	4909      	ldr	r1, [pc, #36]	; (8001920 <ICM_Entry+0x58>)
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	4798      	blx	r3
	  				double gyro_x = icm_sensor->GYRO_Y;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001904:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  				PACKET[5][0] = 'c';
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <ICM_Entry+0x60>)
 800190a:	2263      	movs	r2, #99	; 0x63
 800190c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	  				//Set this thread bit back off
	  				control &= ~(1 << 4);
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <ICM_Entry+0x5c>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f023 0310 	bic.w	r3, r3, #16
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b02      	ldr	r3, [pc, #8]	; (8001924 <ICM_Entry+0x5c>)
 800191c:	801a      	strh	r2, [r3, #0]
	  			if ((control & check) != check){
 800191e:	e7dd      	b.n	80018dc <ICM_Entry+0x14>
 8001920:	24000348 	.word	0x24000348
 8001924:	2400061a 	.word	0x2400061a
 8001928:	24000548 	.word	0x24000548

0800192c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193e:	f000 faf1 	bl	8001f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40010000 	.word	0x40010000

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_MspInit+0x38>)
 8001964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_MspInit+0x38>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_MspInit+0x38>)
 8001974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	210f      	movs	r1, #15
 8001984:	f06f 0001 	mvn.w	r0, #1
 8001988:	f000 fbd4 	bl	8002134 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	58024400 	.word	0x58024400

08001998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b0ba      	sub	sp, #232	; 0xe8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	22c0      	movs	r2, #192	; 0xc0
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f007 fa0b 	bl	8008dd4 <memset>
  if(hi2c->Instance==I2C4)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <HAL_I2C_MspInit+0xc8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d146      	bne.n	8001a56 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80019c8:	f04f 0210 	mov.w	r2, #16
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fc20 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80019ea:	f7ff ffb1 	bl	8001950 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_I2C_MspInit+0xcc>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_I2C_MspInit+0xcc>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_I2C_MspInit+0xcc>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a0c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a14:	2312      	movs	r3, #18
 8001a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a26:	2304      	movs	r3, #4
 8001a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a30:	4619      	mov	r1, r3
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <HAL_I2C_MspInit+0xd0>)
 8001a34:	f000 fba6 	bl	8002184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_I2C_MspInit+0xcc>)
 8001a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_I2C_MspInit+0xcc>)
 8001a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_I2C_MspInit+0xcc>)
 8001a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	37e8      	adds	r7, #232	; 0xe8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	58001c00 	.word	0x58001c00
 8001a64:	58024400 	.word	0x58024400
 8001a68:	58020c00 	.word	0x58020c00

08001a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0bc      	sub	sp, #240	; 0xf0
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	22c0      	movs	r2, #192	; 0xc0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f007 f9a1 	bl	8008dd4 <memset>
  if(huart->Instance==USART1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_UART_MspInit+0x160>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d147      	bne.n	8001b2c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a9c:	f04f 0201 	mov.w	r2, #1
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fbb6 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001abe:	f7ff ff47 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac8:	4a41      	ldr	r2, [pc, #260]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae6:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af0:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001afe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b22:	4619      	mov	r1, r3
 8001b24:	482b      	ldr	r0, [pc, #172]	; (8001bd4 <HAL_UART_MspInit+0x168>)
 8001b26:	f000 fb2d 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b2a:	e04b      	b.n	8001bc4 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_UART_MspInit+0x16c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d146      	bne.n	8001bc4 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b36:	f04f 0202 	mov.w	r2, #2
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 fb69 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001b58:	f7ff fefa 	bl	8001950 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001b5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_UART_MspInit+0x164>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_UART_MspInit+0x168>)
 8001bc0:	f000 fae0 	bl	8002184 <HAL_GPIO_Init>
}
 8001bc4:	bf00      	nop
 8001bc6:	37f0      	adds	r7, #240	; 0xf0
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40011000 	.word	0x40011000
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	58020400 	.word	0x58020400
 8001bd8:	40004800 	.word	0x40004800

08001bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	; 0x38
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	d842      	bhi.n	8001c70 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001bea:	2200      	movs	r2, #0
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	2019      	movs	r0, #25
 8001bf0:	f000 faa0 	bl	8002134 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001bf4:	2019      	movs	r0, #25
 8001bf6:	f000 fab7 	bl	8002168 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <HAL_InitTick+0xac>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_InitTick+0xb0>)
 8001c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_InitTick+0xb0>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_InitTick+0xb0>)
 8001c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c1e:	f107 020c 	add.w	r2, r7, #12
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 fab9 	bl	80041a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c2e:	f002 faa1 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8001c32:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_InitTick+0xb4>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0c9b      	lsrs	r3, r3, #18
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_InitTick+0xb8>)
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_InitTick+0xbc>)
 8001c46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0xb8>)
 8001c4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c50:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_InitTick+0xb8>)
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c54:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_InitTick+0xb8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_InitTick+0xb8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c62:	480c      	ldr	r0, [pc, #48]	; (8001c94 <HAL_InitTick+0xb8>)
 8001c64:	f004 f90a 	bl	8005e7c <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_InitTick+0xa2>
 8001c6e:	e001      	b.n	8001c74 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e005      	b.n	8001c80 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <HAL_InitTick+0xb8>)
 8001c76:	f004 f963 	bl	8005f40 <HAL_TIM_Base_Start_IT>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	24000008 	.word	0x24000008
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	431bde83 	.word	0x431bde83
 8001c94:	2400061c 	.word	0x2400061c
 8001c98:	40010000 	.word	0x40010000

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM1_UP_IRQHandler+0x10>)
 8001cce:	f004 f9af 	bl	8006030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2400061c 	.word	0x2400061c

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f007 f82e 	bl	8008d6c <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	24080000 	.word	0x24080000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	24000668 	.word	0x24000668
 8001d44:	240043d8 	.word	0x240043d8

08001d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <SystemInit+0xe4>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	4a36      	ldr	r2, [pc, #216]	; (8001e2c <SystemInit+0xe4>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <SystemInit+0xe8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d807      	bhi.n	8001d78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <SystemInit+0xe8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 030f 	bic.w	r3, r3, #15
 8001d70:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <SystemInit+0xe8>)
 8001d72:	f043 0307 	orr.w	r3, r3, #7
 8001d76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <SystemInit+0xec>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <SystemInit+0xec>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <SystemInit+0xec>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <SystemInit+0xec>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4929      	ldr	r1, [pc, #164]	; (8001e34 <SystemInit+0xec>)
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <SystemInit+0xf0>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <SystemInit+0xe8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <SystemInit+0xe8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 030f 	bic.w	r3, r3, #15
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <SystemInit+0xe8>)
 8001dac:	f043 0307 	orr.w	r3, r3, #7
 8001db0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <SystemInit+0xec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <SystemInit+0xec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <SystemInit+0xec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <SystemInit+0xec>)
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <SystemInit+0xf4>)
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <SystemInit+0xec>)
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <SystemInit+0xf8>)
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <SystemInit+0xec>)
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <SystemInit+0xfc>)
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <SystemInit+0xec>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <SystemInit+0xec>)
 8001dde:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <SystemInit+0xfc>)
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <SystemInit+0xec>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <SystemInit+0xec>)
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <SystemInit+0xfc>)
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <SystemInit+0xec>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <SystemInit+0xec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <SystemInit+0xec>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <SystemInit+0xec>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <SystemInit+0x100>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <SystemInit+0x104>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e12:	d202      	bcs.n	8001e1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <SystemInit+0x108>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <SystemInit+0x10c>)
 8001e1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00
 8001e30:	52002000 	.word	0x52002000
 8001e34:	58024400 	.word	0x58024400
 8001e38:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e3c:	02020200 	.word	0x02020200
 8001e40:	01ff0000 	.word	0x01ff0000
 8001e44:	01010280 	.word	0x01010280
 8001e48:	5c001000 	.word	0x5c001000
 8001e4c:	ffff0000 	.word	0xffff0000
 8001e50:	51008108 	.word	0x51008108
 8001e54:	52004000 	.word	0x52004000

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e5c:	f7ff ff74 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e62:	490d      	ldr	r1, [pc, #52]	; (8001e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e78:	4c0a      	ldr	r4, [pc, #40]	; (8001ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e86:	f006 ff77 	bl	8008d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7ff f93b 	bl	8001104 <main>
  bx  lr
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e98:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001e9c:	080092e8 	.word	0x080092e8
  ldr r2, =_sbss
 8001ea0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001ea4:	240043d4 	.word	0x240043d4

08001ea8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC3_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f000 f933 	bl	800211e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eb8:	f001 ff9c 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_Init+0x68>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	4913      	ldr	r1, [pc, #76]	; (8001f18 <HAL_Init+0x6c>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_Init+0x68>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <HAL_Init+0x6c>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_Init+0x70>)
 8001eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <HAL_Init+0x74>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f7ff fe70 	bl	8001bdc <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e002      	b.n	8001f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f06:	f7ff fd29 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58024400 	.word	0x58024400
 8001f18:	08009240 	.word	0x08009240
 8001f1c:	24000004 	.word	0x24000004
 8001f20:	24000000 	.word	0x24000000

08001f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_IncTick+0x20>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x24>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_IncTick+0x24>)
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	2400000c 	.word	0x2400000c
 8001f48:	2400066c 	.word	0x2400066c

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_GetTick+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	2400066c 	.word	0x2400066c

08001f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff ffee 	bl	8001f4c <HAL_GetTick>
 8001f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d005      	beq.n	8001f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_Delay+0x44>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8a:	bf00      	nop
 8001f8c:	f7ff ffde 	bl	8001f4c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d8f7      	bhi.n	8001f8c <HAL_Delay+0x28>
  {
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2400000c 	.word	0x2400000c

08001fac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_GetREVID+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	5c001000 	.word	0x5c001000

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00
 8002008:	05fa0000 	.word	0x05fa0000

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff4c 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002142:	f7ff ff63 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002146:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ffb3 	bl	80020b8 <NVIC_EncodePriority>
 8002152:	4602      	mov	r2, r0
 8002154:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff82 	bl	8002064 <__NVIC_SetPriority>
}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff56 	bl	8002028 <__NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002192:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_GPIO_Init+0x234>)
 8002194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002196:	e194      	b.n	80024c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8186 	beq.w	80024bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d005      	beq.n	80021c8 <HAL_GPIO_Init+0x44>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d130      	bne.n	800222a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fe:	2201      	movs	r2, #1
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0201 	and.w	r2, r3, #1
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b03      	cmp	r3, #3
 8002234:	d017      	beq.n	8002266 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d123      	bne.n	80022ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	69b9      	ldr	r1, [r7, #24]
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0203 	and.w	r2, r3, #3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80e0 	beq.w	80024bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_GPIO_Init+0x238>)
 80022fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002302:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <HAL_GPIO_Init+0x238>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_GPIO_Init+0x238>)
 800230e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <HAL_GPIO_Init+0x23c>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_GPIO_Init+0x240>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d052      	beq.n	80023ec <HAL_GPIO_Init+0x268>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_GPIO_Init+0x244>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d031      	beq.n	80023b2 <HAL_GPIO_Init+0x22e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_GPIO_Init+0x248>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02b      	beq.n	80023ae <HAL_GPIO_Init+0x22a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_GPIO_Init+0x24c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d025      	beq.n	80023aa <HAL_GPIO_Init+0x226>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <HAL_GPIO_Init+0x250>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01f      	beq.n	80023a6 <HAL_GPIO_Init+0x222>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_GPIO_Init+0x254>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d019      	beq.n	80023a2 <HAL_GPIO_Init+0x21e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_GPIO_Init+0x258>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0x21a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_GPIO_Init+0x25c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_GPIO_Init+0x216>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_GPIO_Init+0x260>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x212>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_GPIO_Init+0x264>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_Init+0x20e>
 800238e:	2309      	movs	r3, #9
 8002390:	e02d      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 8002392:	230a      	movs	r3, #10
 8002394:	e02b      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 8002396:	2308      	movs	r3, #8
 8002398:	e029      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 800239a:	2307      	movs	r3, #7
 800239c:	e027      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 800239e:	2306      	movs	r3, #6
 80023a0:	e025      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023a2:	2305      	movs	r3, #5
 80023a4:	e023      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e021      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e01f      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e01d      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01b      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023b6:	bf00      	nop
 80023b8:	58000080 	.word	0x58000080
 80023bc:	58024400 	.word	0x58024400
 80023c0:	58000400 	.word	0x58000400
 80023c4:	58020000 	.word	0x58020000
 80023c8:	58020400 	.word	0x58020400
 80023cc:	58020800 	.word	0x58020800
 80023d0:	58020c00 	.word	0x58020c00
 80023d4:	58021000 	.word	0x58021000
 80023d8:	58021400 	.word	0x58021400
 80023dc:	58021800 	.word	0x58021800
 80023e0:	58021c00 	.word	0x58021c00
 80023e4:	58022000 	.word	0x58022000
 80023e8:	58022400 	.word	0x58022400
 80023ec:	2300      	movs	r3, #0
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	f002 0203 	and.w	r2, r2, #3
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	4093      	lsls	r3, r2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fe:	4938      	ldr	r1, [pc, #224]	; (80024e0 <HAL_GPIO_Init+0x35c>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	3301      	adds	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f47f ae63 	bne.w	8002198 <HAL_GPIO_Init+0x14>
  }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3724      	adds	r7, #36	; 0x24
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	58000400 	.word	0x58000400

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002500:	e003      	b.n	800250a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	041a      	lsls	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e08b      	b.n	8002642 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fa2a 	bl	8001998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002568:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002578:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	e006      	b.n	80025a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800259e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d108      	bne.n	80025ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	e007      	b.n	80025ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_I2C_Init+0x134>)
 80025d6:	430b      	orrs	r3, r1
 80025d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69d9      	ldr	r1, [r3, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1a      	ldr	r2, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	02008000 	.word	0x02008000

08002650 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	4608      	mov	r0, r1
 800265a:	4611      	mov	r1, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4603      	mov	r3, r0
 8002660:	817b      	strh	r3, [r7, #10]
 8002662:	460b      	mov	r3, r1
 8002664:	813b      	strh	r3, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	f040 80f9 	bne.w	800286a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_I2C_Mem_Write+0x34>
 800267e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0ed      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_I2C_Mem_Write+0x4e>
 800269a:	2302      	movs	r3, #2
 800269c:	e0e6      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026a6:	f7ff fc51 	bl	8001f4c <HAL_GetTick>
 80026aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fac3 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d1      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2221      	movs	r2, #33	; 0x21
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f0:	88f8      	ldrh	r0, [r7, #6]
 80026f2:	893a      	ldrh	r2, [r7, #8]
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4603      	mov	r3, r0
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f9d3 	bl	8002aac <I2C_RequestMemoryWrite>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0a9      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	2bff      	cmp	r3, #255	; 0xff
 8002720:	d90e      	bls.n	8002740 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fc47 	bl	8002fcc <I2C_TransferConfig>
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fc36 	bl	8002fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fac6 	bl	8002cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e07b      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d034      	beq.n	8002818 <HAL_I2C_Mem_Write+0x1c8>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d130      	bne.n	8002818 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	2200      	movs	r2, #0
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fa3f 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e04d      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2bff      	cmp	r3, #255	; 0xff
 80027d8:	d90e      	bls.n	80027f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fbeb 	bl	8002fcc <I2C_TransferConfig>
 80027f6:	e00f      	b.n	8002818 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	b2da      	uxtb	r2, r3
 8002808:	8979      	ldrh	r1, [r7, #10]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fbda 	bl	8002fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d19e      	bne.n	8002760 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 faac 	bl	8002d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e01a      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2220      	movs	r2, #32
 800283c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_I2C_Mem_Write+0x224>)
 800284a:	400b      	ands	r3, r1
 800284c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	f040 80fd 	bne.w	8002a9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_I2C_Mem_Read+0x34>
 80028a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0f1      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_I2C_Mem_Read+0x4e>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0ea      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ce:	f7ff fb3d 	bl	8001f4c <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2319      	movs	r3, #25
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f9af 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d5      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2222      	movs	r2, #34	; 0x22
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002918:	88f8      	ldrh	r0, [r7, #6]
 800291a:	893a      	ldrh	r2, [r7, #8]
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4603      	mov	r3, r0
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f913 	bl	8002b54 <I2C_RequestMemoryRead>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0ad      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d90e      	bls.n	8002968 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <HAL_I2C_Mem_Read+0x22c>)
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fb33 	bl	8002fcc <I2C_TransferConfig>
 8002966:	e00f      	b.n	8002988 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	b2da      	uxtb	r2, r3
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_I2C_Mem_Read+0x22c>)
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fb22 	bl	8002fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	2200      	movs	r2, #0
 8002990:	2104      	movs	r1, #4
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f956 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07c      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d034      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x1d0>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d130      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f927 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e04d      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2bff      	cmp	r3, #255	; 0xff
 8002a08:	d90e      	bls.n	8002a28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fad3 	bl	8002fcc <I2C_TransferConfig>
 8002a26:	e00f      	b.n	8002a48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fac2 	bl	8002fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d19a      	bne.n	8002988 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f994 	bl	8002d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e01a      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_I2C_Mem_Read+0x230>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	80002400 	.word	0x80002400
 8002aa8:	fe00e800 	.word	0xfe00e800

08002aac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <I2C_RequestMemoryWrite+0xa4>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fa79 	bl	8002fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f909 	bl	8002cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e02c      	b.n	8002b48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
 8002afe:	e015      	b.n	8002b2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	69b9      	ldr	r1, [r7, #24]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f8ef 	bl	8002cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e012      	b.n	8002b48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b22:	893b      	ldrh	r3, [r7, #8]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2200      	movs	r2, #0
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f884 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	80002000 	.word	0x80002000

08002b54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	460b      	mov	r3, r1
 8002b68:	813b      	strh	r3, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <I2C_RequestMemoryRead+0xa4>)
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa26 	bl	8002fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f8b6 	bl	8002cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e02c      	b.n	8002bee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d105      	bne.n	8002ba6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9a:	893b      	ldrh	r3, [r7, #8]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba4:	e015      	b.n	8002bd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba6:	893b      	ldrh	r3, [r7, #8]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f89c 	bl	8002cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e012      	b.n	8002bee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f831 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	80002000 	.word	0x80002000

08002bfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d103      	bne.n	8002c1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d007      	beq.n	8002c38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	619a      	str	r2, [r3, #24]
  }
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c54:	e03b      	b.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8d6 	bl	8002e0c <I2C_IsErrorOccurred>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e041      	b.n	8002cee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d02d      	beq.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7ff f96b 	bl	8001f4c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d122      	bne.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d113      	bne.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d0b4      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d02:	e033      	b.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f87f 	bl	8002e0c <I2C_IsErrorOccurred>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e031      	b.n	8002d7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d025      	beq.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d20:	f7ff f914 	bl	8001f4c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d302      	bcc.n	8002d36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11a      	bne.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d013      	beq.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e007      	b.n	8002d7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d1c4      	bne.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d90:	e02f      	b.n	8002df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f838 	bl	8002e0c <I2C_IsErrorOccurred>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e02d      	b.n	8002e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7ff f8d1 	bl	8001f4c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11a      	bne.n	8002df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d013      	beq.n	8002df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e007      	b.n	8002e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d1c8      	bne.n	8002d92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d068      	beq.n	8002f0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e40:	e049      	b.n	8002ed6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d045      	beq.n	8002ed6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7ff f87f 	bl	8001f4c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_IsErrorOccurred+0x54>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d13a      	bne.n	8002ed6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e82:	d121      	bne.n	8002ec8 <I2C_IsErrorOccurred+0xbc>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e8a:	d01d      	beq.n	8002ec8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d01a      	beq.n	8002ec8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ea0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ea2:	f7ff f853 	bl	8001f4c <HAL_GetTick>
 8002ea6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea8:	e00e      	b.n	8002ec8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eaa:	f7ff f84f 	bl	8001f4c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b19      	cmp	r3, #25
 8002eb6:	d907      	bls.n	8002ec8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f043 0320 	orr.w	r3, r3, #32
 8002ebe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ec6:	e006      	b.n	8002ed6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d1e9      	bne.n	8002eaa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d003      	beq.n	8002eec <I2C_IsErrorOccurred+0xe0>
 8002ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0aa      	beq.n	8002e42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01c      	beq.n	8002fba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff fe3b 	bl	8002bfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <I2C_IsErrorOccurred+0x1bc>)
 8002f92:	400b      	ands	r3, r1
 8002f94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	fe00e800 	.word	0xfe00e800

08002fcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fe4:	7a7b      	ldrb	r3, [r7, #9]
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ffa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	0d5b      	lsrs	r3, r3, #21
 8003006:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <I2C_TransferConfig+0x60>)
 800300c:	430b      	orrs	r3, r1
 800300e:	43db      	mvns	r3, r3
 8003010:	ea02 0103 	and.w	r1, r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	03ff63ff 	.word	0x03ff63ff

08003030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	d138      	bne.n	80030b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003050:	2302      	movs	r3, #2
 8003052:	e032      	b.n	80030ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	; 0x24
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d139      	bne.n	8003150 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e033      	b.n	8003152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2224      	movs	r2, #36	; 0x24
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003118:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_PWREx_ConfigSupply+0x70>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d00a      	beq.n	800318a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e01f      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e01d      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_PWREx_ConfigSupply+0x70>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 0207 	bic.w	r2, r3, #7
 8003192:	490f      	ldr	r1, [pc, #60]	; (80031d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4313      	orrs	r3, r2
 8003198:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800319a:	f7fe fed7 	bl	8001f4c <HAL_GetTick>
 800319e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031a0:	e009      	b.n	80031b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031a2:	f7fe fed3 	bl	8001f4c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b0:	d901      	bls.n	80031b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e007      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_PWREx_ConfigSupply+0x70>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c2:	d1ee      	bne.n	80031a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	58024800 	.word	0x58024800

080031d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f000 bc48 	b.w	8003a78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8088 	beq.w	8003306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f6:	4b99      	ldr	r3, [pc, #612]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003200:	4b96      	ldr	r3, [pc, #600]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	2b10      	cmp	r3, #16
 800320a:	d007      	beq.n	800321c <HAL_RCC_OscConfig+0x48>
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	2b18      	cmp	r3, #24
 8003210:	d111      	bne.n	8003236 <HAL_RCC_OscConfig+0x62>
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d10c      	bne.n	8003236 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	4b8f      	ldr	r3, [pc, #572]	; (800345c <HAL_RCC_OscConfig+0x288>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d06d      	beq.n	8003304 <HAL_RCC_OscConfig+0x130>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d169      	bne.n	8003304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f000 bc21 	b.w	8003a78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323e:	d106      	bne.n	800324e <HAL_RCC_OscConfig+0x7a>
 8003240:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a85      	ldr	r2, [pc, #532]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	e02e      	b.n	80032ac <HAL_RCC_OscConfig+0xd8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x9c>
 8003256:	4b81      	ldr	r3, [pc, #516]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a80      	ldr	r2, [pc, #512]	; (800345c <HAL_RCC_OscConfig+0x288>)
 800325c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b7e      	ldr	r3, [pc, #504]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7d      	ldr	r2, [pc, #500]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e01d      	b.n	80032ac <HAL_RCC_OscConfig+0xd8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0xc0>
 800327a:	4b78      	ldr	r3, [pc, #480]	; (800345c <HAL_RCC_OscConfig+0x288>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a77      	ldr	r2, [pc, #476]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b75      	ldr	r3, [pc, #468]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a74      	ldr	r2, [pc, #464]	; (800345c <HAL_RCC_OscConfig+0x288>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0xd8>
 8003294:	4b71      	ldr	r3, [pc, #452]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a70      	ldr	r2, [pc, #448]	; (800345c <HAL_RCC_OscConfig+0x288>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b6e      	ldr	r3, [pc, #440]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6d      	ldr	r2, [pc, #436]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fe4a 	bl	8001f4c <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fe46 	bl	8001f4c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e3d4      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ce:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0xe8>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fe36 	bl	8001f4c <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe fe32 	bl	8001f4c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e3c0      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032f6:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x110>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80ca 	beq.w	80034a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003314:	4b51      	ldr	r3, [pc, #324]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800331c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800331e:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_RCC_OscConfig+0x166>
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	2b18      	cmp	r3, #24
 800332e:	d156      	bne.n	80033de <HAL_RCC_OscConfig+0x20a>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d151      	bne.n	80033de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800333a:	4b48      	ldr	r3, [pc, #288]	; (800345c <HAL_RCC_OscConfig+0x288>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x17e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e392      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003352:	4b42      	ldr	r3, [pc, #264]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0219 	bic.w	r2, r3, #25
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	493f      	ldr	r1, [pc, #252]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fdf2 	bl	8001f4c <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336c:	f7fe fdee 	bl	8001f4c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e37c      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337e:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338a:	f7fe fe0f 	bl	8001fac <HAL_GetREVID>
 800338e:	4603      	mov	r3, r0
 8003390:	f241 0203 	movw	r2, #4099	; 0x1003
 8003394:	4293      	cmp	r3, r2
 8003396:	d817      	bhi.n	80033c8 <HAL_RCC_OscConfig+0x1f4>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d108      	bne.n	80033b2 <HAL_RCC_OscConfig+0x1de>
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033a8:	4a2c      	ldr	r2, [pc, #176]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b0:	e07a      	b.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	4926      	ldr	r1, [pc, #152]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c6:	e06f      	b.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4921      	ldr	r1, [pc, #132]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033dc:	e064      	b.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d047      	beq.n	8003476 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 0219 	bic.w	r2, r3, #25
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	491a      	ldr	r1, [pc, #104]	; (800345c <HAL_RCC_OscConfig+0x288>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fda8 	bl	8001f4c <HAL_GetTick>
 80033fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003400:	f7fe fda4 	bl	8001f4c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e332      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	f7fe fdc5 	bl	8001fac <HAL_GetREVID>
 8003422:	4603      	mov	r3, r0
 8003424:	f241 0203 	movw	r2, #4099	; 0x1003
 8003428:	4293      	cmp	r3, r2
 800342a:	d819      	bhi.n	8003460 <HAL_RCC_OscConfig+0x28c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d108      	bne.n	8003446 <HAL_RCC_OscConfig+0x272>
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <HAL_RCC_OscConfig+0x288>)
 800343e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003442:	6053      	str	r3, [r2, #4]
 8003444:	e030      	b.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	031b      	lsls	r3, r3, #12
 8003454:	4901      	ldr	r1, [pc, #4]	; (800345c <HAL_RCC_OscConfig+0x288>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
 800345a:	e025      	b.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
 800345c:	58024400 	.word	0x58024400
 8003460:	4b9a      	ldr	r3, [pc, #616]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	4997      	ldr	r1, [pc, #604]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e018      	b.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b95      	ldr	r3, [pc, #596]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a94      	ldr	r2, [pc, #592]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe fd63 	bl	8001f4c <HAL_GetTick>
 8003486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348a:	f7fe fd5f 	bl	8001f4c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e2ed      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800349c:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a9 	beq.w	8003608 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b6:	4b85      	ldr	r3, [pc, #532]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034c0:	4b82      	ldr	r3, [pc, #520]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d007      	beq.n	80034dc <HAL_RCC_OscConfig+0x308>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b18      	cmp	r3, #24
 80034d0:	d13a      	bne.n	8003548 <HAL_RCC_OscConfig+0x374>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d135      	bne.n	8003548 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034dc:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_OscConfig+0x320>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e2c1      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034f4:	f7fe fd5a 	bl	8001fac <HAL_GetREVID>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80034fe:	4293      	cmp	r3, r2
 8003500:	d817      	bhi.n	8003532 <HAL_RCC_OscConfig+0x35e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	2b20      	cmp	r3, #32
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x348>
 800350a:	4b70      	ldr	r3, [pc, #448]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003512:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003514:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003518:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800351a:	e075      	b.n	8003608 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800351c:	4b6b      	ldr	r3, [pc, #428]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	4968      	ldr	r1, [pc, #416]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003530:	e06a      	b.n	8003608 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003532:	4b66      	ldr	r3, [pc, #408]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	061b      	lsls	r3, r3, #24
 8003540:	4962      	ldr	r1, [pc, #392]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003542:	4313      	orrs	r3, r2
 8003544:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003546:	e05f      	b.n	8003608 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d042      	beq.n	80035d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003550:	4b5e      	ldr	r3, [pc, #376]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a5d      	ldr	r2, [pc, #372]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fcf6 	bl	8001f4c <HAL_GetTick>
 8003560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003564:	f7fe fcf2 	bl	8001f4c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e280      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003576:	4b55      	ldr	r3, [pc, #340]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003582:	f7fe fd13 	bl	8001fac <HAL_GetREVID>
 8003586:	4603      	mov	r3, r0
 8003588:	f241 0203 	movw	r2, #4099	; 0x1003
 800358c:	4293      	cmp	r3, r2
 800358e:	d817      	bhi.n	80035c0 <HAL_RCC_OscConfig+0x3ec>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	2b20      	cmp	r3, #32
 8003596:	d108      	bne.n	80035aa <HAL_RCC_OscConfig+0x3d6>
 8003598:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035a0:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035a6:	6053      	str	r3, [r2, #4]
 80035a8:	e02e      	b.n	8003608 <HAL_RCC_OscConfig+0x434>
 80035aa:	4b48      	ldr	r3, [pc, #288]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	069b      	lsls	r3, r3, #26
 80035b8:	4944      	ldr	r1, [pc, #272]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
 80035be:	e023      	b.n	8003608 <HAL_RCC_OscConfig+0x434>
 80035c0:	4b42      	ldr	r3, [pc, #264]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	493f      	ldr	r1, [pc, #252]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
 80035d4:	e018      	b.n	8003608 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a3c      	ldr	r2, [pc, #240]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fe fcb3 	bl	8001f4c <HAL_GetTick>
 80035e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035ea:	f7fe fcaf 	bl	8001f4c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e23d      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035fc:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d036      	beq.n	8003682 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d019      	beq.n	8003650 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800361e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fc90 	bl	8001f4c <HAL_GetTick>
 800362c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fe fc8c 	bl	8001f4c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e21a      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x45c>
 800364e:	e018      	b.n	8003682 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe fc76 	bl	8001f4c <HAL_GetTick>
 8003660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003664:	f7fe fc72 	bl	8001f4c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e200      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d039      	beq.n	8003702 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 800369c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fc53 	bl	8001f4c <HAL_GetTick>
 80036a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036aa:	f7fe fc4f 	bl	8001f4c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1dd      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_OscConfig+0x4f8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x4d6>
 80036c8:	e01b      	b.n	8003702 <HAL_RCC_OscConfig+0x52e>
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d0:	4b9b      	ldr	r3, [pc, #620]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a9a      	ldr	r2, [pc, #616]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80036d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036dc:	f7fe fc36 	bl	8001f4c <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e4:	f7fe fc32 	bl	8001f4c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e1c0      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036f6:	4b92      	ldr	r3, [pc, #584]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8081 	beq.w	8003812 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003710:	4b8c      	ldr	r3, [pc, #560]	; (8003944 <HAL_RCC_OscConfig+0x770>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a8b      	ldr	r2, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x770>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800371c:	f7fe fc16 	bl	8001f4c <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fe fc12 	bl	8001f4c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1a0      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003736:	4b83      	ldr	r3, [pc, #524]	; (8003944 <HAL_RCC_OscConfig+0x770>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x584>
 800374a:	4b7d      	ldr	r3, [pc, #500]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a7c      	ldr	r2, [pc, #496]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	e02d      	b.n	80037b4 <HAL_RCC_OscConfig+0x5e0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10c      	bne.n	800377a <HAL_RCC_OscConfig+0x5a6>
 8003760:	4b77      	ldr	r3, [pc, #476]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a76      	ldr	r2, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4b74      	ldr	r3, [pc, #464]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a73      	ldr	r2, [pc, #460]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x5e0>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x5c8>
 8003782:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	4b6c      	ldr	r3, [pc, #432]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a6b      	ldr	r2, [pc, #428]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0x5e0>
 800379c:	4b68      	ldr	r3, [pc, #416]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a67      	ldr	r2, [pc, #412]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a64      	ldr	r2, [pc, #400]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80037ae:	f023 0304 	bic.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe fbc6 	bl	8001f4c <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fe fbc2 	bl	8001f4c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e14e      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037da:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ee      	beq.n	80037c4 <HAL_RCC_OscConfig+0x5f0>
 80037e6:	e014      	b.n	8003812 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fe fbb0 	bl	8001f4c <HAL_GetTick>
 80037ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f0:	f7fe fbac 	bl	8001f4c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e138      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003806:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ee      	bne.n	80037f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 812d 	beq.w	8003a76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800381c:	4b48      	ldr	r3, [pc, #288]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003824:	2b18      	cmp	r3, #24
 8003826:	f000 80bd 	beq.w	80039a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b02      	cmp	r3, #2
 8003830:	f040 809e 	bne.w	8003970 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b42      	ldr	r3, [pc, #264]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a41      	ldr	r2, [pc, #260]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800383a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fe fb84 	bl	8001f4c <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fb80 	bl	8001f4c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e10e      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800385a:	4b39      	ldr	r3, [pc, #228]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_OscConfig+0x774>)
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	430a      	orrs	r2, r1
 800387a:	4931      	ldr	r1, [pc, #196]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	628b      	str	r3, [r1, #40]	; 0x28
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	3b01      	subs	r3, #1
 8003886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	3b01      	subs	r3, #1
 8003890:	025b      	lsls	r3, r3, #9
 8003892:	b29b      	uxth	r3, r3
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	3b01      	subs	r3, #1
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	3b01      	subs	r3, #1
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038b0:	4923      	ldr	r1, [pc, #140]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038c2:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_RCC_OscConfig+0x778>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038ce:	00d2      	lsls	r2, r2, #3
 80038d0:	491b      	ldr	r1, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f023 020c 	bic.w	r2, r3, #12
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4917      	ldr	r1, [pc, #92]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f023 0202 	bic.w	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	4912      	ldr	r1, [pc, #72]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	4a10      	ldr	r2, [pc, #64]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <HAL_RCC_OscConfig+0x76c>)
 8003930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe fb09 	bl	8001f4c <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800393c:	e011      	b.n	8003962 <HAL_RCC_OscConfig+0x78e>
 800393e:	bf00      	nop
 8003940:	58024400 	.word	0x58024400
 8003944:	58024800 	.word	0x58024800
 8003948:	fffffc0c 	.word	0xfffffc0c
 800394c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe fafc 	bl	8001f4c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e08a      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x77c>
 800396e:	e082      	b.n	8003a76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe fae6 	bl	8001f4c <HAL_GetTick>
 8003980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fae2 	bl	8001f4c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e070      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003996:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x7b0>
 80039a2:	e068      	b.n	8003a76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039aa:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d031      	beq.n	8003a1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f003 0203 	and.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d12a      	bne.n	8003a1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d122      	bne.n	8003a1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11a      	bne.n	8003a1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	0a5b      	lsrs	r3, r3, #9
 80039ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d111      	bne.n	8003a1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	0c1b      	lsrs	r3, r3, #16
 80039fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d108      	bne.n	8003a1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0e1b      	lsrs	r3, r3, #24
 8003a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e02b      	b.n	8003a78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a20:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d01f      	beq.n	8003a76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a42:	f7fe fa83 	bl	8001f4c <HAL_GetTick>
 8003a46:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a48:	bf00      	nop
 8003a4a:	f7fe fa7f 	bl	8001f4c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d0f9      	beq.n	8003a4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_OscConfig+0x8b0>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a62:	00d2      	lsls	r2, r2, #3
 8003a64:	4906      	ldr	r1, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_RCC_OscConfig+0x8ac>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3730      	adds	r7, #48	; 0x30
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	58024400 	.word	0x58024400
 8003a84:	ffff0007 	.word	0xffff0007

08003a88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e19c      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b8a      	ldr	r3, [pc, #552]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d910      	bls.n	8003acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b87      	ldr	r3, [pc, #540]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 020f 	bic.w	r2, r3, #15
 8003ab2:	4985      	ldr	r1, [pc, #532]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b83      	ldr	r3, [pc, #524]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e184      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b7b      	ldr	r3, [pc, #492]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d908      	bls.n	8003afa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ae8:	4b78      	ldr	r3, [pc, #480]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	4975      	ldr	r1, [pc, #468]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	4b70      	ldr	r3, [pc, #448]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d908      	bls.n	8003b28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b16:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	496a      	ldr	r1, [pc, #424]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	4b64      	ldr	r3, [pc, #400]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d908      	bls.n	8003b56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b44:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	495e      	ldr	r1, [pc, #376]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d908      	bls.n	8003b84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b72:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4953      	ldr	r1, [pc, #332]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d908      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f023 020f 	bic.w	r2, r3, #15
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4947      	ldr	r1, [pc, #284]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d055      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003bbe:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	4940      	ldr	r1, [pc, #256]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bd8:	4b3c      	ldr	r3, [pc, #240]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d121      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0f6      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bf0:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d115      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0ea      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0de      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c18:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0d6      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f023 0207 	bic.w	r2, r3, #7
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4925      	ldr	r1, [pc, #148]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3a:	f7fe f987 	bl	8001f4c <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c42:	f7fe f983 	bl	8001f4c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0be      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d1eb      	bne.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d208      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f023 020f 	bic.w	r2, r3, #15
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	490e      	ldr	r1, [pc, #56]	; (8003ccc <HAL_RCC_ClockConfig+0x244>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d214      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 020f 	bic.w	r2, r3, #15
 8003cae:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <HAL_RCC_ClockConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e086      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x34e>
 8003cc8:	52002000 	.word	0x52002000
 8003ccc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d208      	bcs.n	8003cfe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cec:	4b3c      	ldr	r3, [pc, #240]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	4939      	ldr	r1, [pc, #228]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d208      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d1a:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	492e      	ldr	r1, [pc, #184]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d010      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d208      	bcs.n	8003d5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	4922      	ldr	r1, [pc, #136]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d208      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d76:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	4917      	ldr	r1, [pc, #92]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d88:	f000 f834 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	4912      	ldr	r1, [pc, #72]	; (8003de4 <HAL_RCC_ClockConfig+0x35c>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_RCC_ClockConfig+0x358>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <HAL_RCC_ClockConfig+0x35c>)
 8003db0:	5cd3      	ldrb	r3, [r2, r3]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbc:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <HAL_RCC_ClockConfig+0x360>)
 8003dbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x364>)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_RCC_ClockConfig+0x368>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd ff06 	bl	8001bdc <HAL_InitTick>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	58024400 	.word	0x58024400
 8003de4:	08009240 	.word	0x08009240
 8003de8:	24000004 	.word	0x24000004
 8003dec:	24000000 	.word	0x24000000
 8003df0:	24000008 	.word	0x24000008

08003df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dfa:	4bb3      	ldr	r3, [pc, #716]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e02:	2b18      	cmp	r3, #24
 8003e04:	f200 8155 	bhi.w	80040b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e75 	.word	0x08003e75
 8003e14:	080040b3 	.word	0x080040b3
 8003e18:	080040b3 	.word	0x080040b3
 8003e1c:	080040b3 	.word	0x080040b3
 8003e20:	080040b3 	.word	0x080040b3
 8003e24:	080040b3 	.word	0x080040b3
 8003e28:	080040b3 	.word	0x080040b3
 8003e2c:	080040b3 	.word	0x080040b3
 8003e30:	08003e9b 	.word	0x08003e9b
 8003e34:	080040b3 	.word	0x080040b3
 8003e38:	080040b3 	.word	0x080040b3
 8003e3c:	080040b3 	.word	0x080040b3
 8003e40:	080040b3 	.word	0x080040b3
 8003e44:	080040b3 	.word	0x080040b3
 8003e48:	080040b3 	.word	0x080040b3
 8003e4c:	080040b3 	.word	0x080040b3
 8003e50:	08003ea1 	.word	0x08003ea1
 8003e54:	080040b3 	.word	0x080040b3
 8003e58:	080040b3 	.word	0x080040b3
 8003e5c:	080040b3 	.word	0x080040b3
 8003e60:	080040b3 	.word	0x080040b3
 8003e64:	080040b3 	.word	0x080040b3
 8003e68:	080040b3 	.word	0x080040b3
 8003e6c:	080040b3 	.word	0x080040b3
 8003e70:	08003ea7 	.word	0x08003ea7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e74:	4b94      	ldr	r3, [pc, #592]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e80:	4b91      	ldr	r3, [pc, #580]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	08db      	lsrs	r3, r3, #3
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	4a90      	ldr	r2, [pc, #576]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e92:	e111      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e94:	4b8d      	ldr	r3, [pc, #564]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e96:	61bb      	str	r3, [r7, #24]
      break;
 8003e98:	e10e      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e9a:	4b8d      	ldr	r3, [pc, #564]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e9c:	61bb      	str	r3, [r7, #24]
      break;
 8003e9e:	e10b      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ea0:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ea2:	61bb      	str	r3, [r7, #24]
      break;
 8003ea4:	e108      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ea6:	4b88      	ldr	r3, [pc, #544]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003eb0:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ebc:	4b82      	ldr	r3, [pc, #520]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ec6:	4b80      	ldr	r3, [pc, #512]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	08db      	lsrs	r3, r3, #3
 8003ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80e1 	beq.w	80040ac <HAL_RCC_GetSysClockFreq+0x2b8>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	f000 8083 	beq.w	8003ff8 <HAL_RCC_GetSysClockFreq+0x204>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	f200 80a1 	bhi.w	800403c <HAL_RCC_GetSysClockFreq+0x248>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x114>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d056      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f06:	e099      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f08:	4b6f      	ldr	r3, [pc, #444]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02d      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f14:	4b6c      	ldr	r3, [pc, #432]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	4a6b      	ldr	r2, [pc, #428]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b62      	ldr	r3, [pc, #392]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f52:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f6e:	e087      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040dc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f96:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fb2:	e065      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b40      	ldr	r3, [pc, #256]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ff6:	e043      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a02 	vldr	s12, [r7, #8]
 800401e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800403a:	e021      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004046:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800404a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004062:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800407e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	3301      	adds	r3, #1
 800408c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004098:	edd7 6a07 	vldr	s13, [r7, #28]
 800409c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a4:	ee17 3a90 	vmov	r3, s15
 80040a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80040aa:	e005      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
      break;
 80040b0:	e002      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040b4:	61bb      	str	r3, [r7, #24]
      break;
 80040b6:	bf00      	nop
  }

  return sysclockfreq;
 80040b8:	69bb      	ldr	r3, [r7, #24]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3724      	adds	r7, #36	; 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400
 80040cc:	03d09000 	.word	0x03d09000
 80040d0:	003d0900 	.word	0x003d0900
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	46000000 	.word	0x46000000
 80040dc:	4c742400 	.word	0x4c742400
 80040e0:	4a742400 	.word	0x4a742400
 80040e4:	4af42400 	.word	0x4af42400

080040e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040ee:	f7ff fe81 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_GetHCLKFreq+0x50>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	490f      	ldr	r1, [pc, #60]	; (800413c <HAL_RCC_GetHCLKFreq+0x54>)
 8004100:	5ccb      	ldrb	r3, [r1, r3]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_RCC_GetHCLKFreq+0x50>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_GetHCLKFreq+0x54>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a07      	ldr	r2, [pc, #28]	; (8004140 <HAL_RCC_GetHCLKFreq+0x58>)
 8004124:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004126:	4a07      	ldr	r2, [pc, #28]	; (8004144 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_RCC_GetHCLKFreq+0x58>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	58024400 	.word	0x58024400
 800413c:	08009240 	.word	0x08009240
 8004140:	24000004 	.word	0x24000004
 8004144:	24000000 	.word	0x24000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800414c:	f7ff ffcc 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	091b      	lsrs	r3, r3, #4
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4904      	ldr	r1, [pc, #16]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	58024400 	.word	0x58024400
 8004170:	08009240 	.word	0x08009240

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004178:	f7ff ffb6 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4904      	ldr	r1, [pc, #16]	; (800419c <HAL_RCC_GetPCLK2Freq+0x28>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	58024400 	.word	0x58024400
 800419c:	08009240 	.word	0x08009240

080041a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	223f      	movs	r2, #63	; 0x3f
 80041ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_RCC_GetClockConfig+0x7c>)
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0207 	and.w	r2, r3, #7
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <HAL_RCC_GetClockConfig+0x7c>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_RCC_GetClockConfig+0x7c>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f003 020f 	and.w	r2, r3, #15
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_RCC_GetClockConfig+0x7c>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <HAL_RCC_GetClockConfig+0x7c>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_GetClockConfig+0x7c>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_RCC_GetClockConfig+0x7c>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_GetClockConfig+0x80>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	601a      	str	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	58024400 	.word	0x58024400
 8004220:	52002000 	.word	0x52002000

08004224 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004228:	b0ca      	sub	sp, #296	; 0x128
 800422a:	af00      	add	r7, sp, #0
 800422c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004236:	2300      	movs	r3, #0
 8004238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004248:	2500      	movs	r5, #0
 800424a:	ea54 0305 	orrs.w	r3, r4, r5
 800424e:	d049      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004256:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800425a:	d02f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800425c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004260:	d828      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004266:	d01a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426c:	d822      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004276:	d007      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004278:	e01c      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4bb8      	ldr	r3, [pc, #736]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4ab7      	ldr	r2, [pc, #732]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004286:	e01a      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	3308      	adds	r3, #8
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f001 fc8f 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800429c:	e00f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a2:	3328      	adds	r3, #40	; 0x28
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fd36 	bl	8005d18 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042b2:	e004      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80042bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042c6:	4ba5      	ldr	r3, [pc, #660]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d4:	4aa1      	ldr	r2, [pc, #644]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042d6:	430b      	orrs	r3, r1
 80042d8:	6513      	str	r3, [r2, #80]	; 0x50
 80042da:	e003      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80042f0:	f04f 0900 	mov.w	r9, #0
 80042f4:	ea58 0309 	orrs.w	r3, r8, r9
 80042f8:	d047      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	2b04      	cmp	r3, #4
 8004302:	d82a      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004321 	.word	0x08004321
 8004310:	0800432f 	.word	0x0800432f
 8004314:	08004345 	.word	0x08004345
 8004318:	08004363 	.word	0x08004363
 800431c:	08004363 	.word	0x08004363
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4b8e      	ldr	r3, [pc, #568]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	4a8d      	ldr	r2, [pc, #564]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800432c:	e01a      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004332:	3308      	adds	r3, #8
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fc3c 	bl	8005bb4 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004342:	e00f      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	3328      	adds	r3, #40	; 0x28
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fce3 	bl	8005d18 <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004358:	e004      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004360:	e000      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800436c:	4b7b      	ldr	r3, [pc, #492]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	f023 0107 	bic.w	r1, r3, #7
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	4a78      	ldr	r2, [pc, #480]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6513      	str	r3, [r2, #80]	; 0x50
 8004380:	e003      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004396:	f04f 0b00 	mov.w	fp, #0
 800439a:	ea5a 030b 	orrs.w	r3, sl, fp
 800439e:	d04c      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d030      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80043ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b0:	d829      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043b2:	2bc0      	cmp	r3, #192	; 0xc0
 80043b4:	d02d      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80043b6:	2bc0      	cmp	r3, #192	; 0xc0
 80043b8:	d825      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d018      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d821      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d007      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80043ca:	e01c      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043cc:	4b63      	ldr	r3, [pc, #396]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a62      	ldr	r2, [pc, #392]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043d8:	e01c      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fbe6 	bl	8005bb4 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043ee:	e011      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f4:	3328      	adds	r3, #40	; 0x28
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fc8d 	bl	8005d18 <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800440c:	e002      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800441c:	4b4f      	ldr	r3, [pc, #316]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	4a4c      	ldr	r2, [pc, #304]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800442c:	430b      	orrs	r3, r1
 800442e:	6513      	str	r3, [r2, #80]	; 0x50
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004446:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800444a:	2300      	movs	r3, #0
 800444c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004450:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004454:	460b      	mov	r3, r1
 8004456:	4313      	orrs	r3, r2
 8004458:	d053      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004466:	d035      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800446c:	d82e      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800446e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004472:	d031      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004474:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004478:	d828      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800447a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447e:	d01a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004484:	d822      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800448a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800448e:	d007      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004490:	e01c      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004492:	4b32      	ldr	r3, [pc, #200]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	4a31      	ldr	r2, [pc, #196]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800449e:	e01c      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	3308      	adds	r3, #8
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 fb83 	bl	8005bb4 <RCCEx_PLL2_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044b4:	e011      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	3328      	adds	r3, #40	; 0x28
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fc2a 	bl	8005d18 <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044ca:	e006      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044d2:	e002      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80044d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044f2:	4a1a      	ldr	r2, [pc, #104]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6593      	str	r3, [r2, #88]	; 0x58
 80044f8:	e003      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800450e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004518:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800451c:	460b      	mov	r3, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	d056      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004526:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800452a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800452e:	d038      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004534:	d831      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800453a:	d034      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800453c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004540:	d82b      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004546:	d01d      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800454c:	d825      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d006      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004558:	e01f      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800455a:	bf00      	nop
 800455c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	4ba2      	ldr	r3, [pc, #648]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4aa1      	ldr	r2, [pc, #644]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800456c:	e01c      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	3308      	adds	r3, #8
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f001 fb1c 	bl	8005bb4 <RCCEx_PLL2_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004582:	e011      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004588:	3328      	adds	r3, #40	; 0x28
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fbc3 	bl	8005d18 <RCCEx_PLL3_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004598:	e006      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045a0:	e002      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80045a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045b0:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045c0:	4a8a      	ldr	r2, [pc, #552]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045c2:	430b      	orrs	r3, r1
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80045dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d03a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	2b30      	cmp	r3, #48	; 0x30
 80045f8:	d01f      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80045fa:	2b30      	cmp	r3, #48	; 0x30
 80045fc:	d819      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d00c      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004602:	2b20      	cmp	r3, #32
 8004604:	d815      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d019      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800460a:	2b10      	cmp	r3, #16
 800460c:	d111      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800460e:	4b77      	ldr	r3, [pc, #476]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	4a76      	ldr	r2, [pc, #472]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004618:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800461a:	e011      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	3308      	adds	r3, #8
 8004622:	2102      	movs	r1, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fac5 	bl	8005bb4 <RCCEx_PLL2_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800463e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004648:	4b68      	ldr	r3, [pc, #416]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	4a65      	ldr	r2, [pc, #404]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004658:	430b      	orrs	r3, r1
 800465a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004672:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004676:	2300      	movs	r3, #0
 8004678:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800467c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d051      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004690:	d035      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004696:	d82e      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004698:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800469c:	d031      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800469e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046a2:	d828      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a8:	d01a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d822      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d007      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80046ba:	e01c      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046bc:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4a4a      	ldr	r2, [pc, #296]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046c8:	e01c      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	3308      	adds	r3, #8
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fa6e 	bl	8005bb4 <RCCEx_PLL2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046de:	e011      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e4:	3328      	adds	r3, #40	; 0x28
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fb15 	bl	8005d18 <RCCEx_PLL3_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800470c:	4b37      	ldr	r3, [pc, #220]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	4a34      	ldr	r2, [pc, #208]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800471c:	430b      	orrs	r3, r1
 800471e:	6513      	str	r3, [r2, #80]	; 0x50
 8004720:	e003      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800473a:	2300      	movs	r3, #0
 800473c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004740:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004744:	460b      	mov	r3, r1
 8004746:	4313      	orrs	r3, r2
 8004748:	d056      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004754:	d033      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475a:	d82c      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800475c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004760:	d02f      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004766:	d826      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004768:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800476c:	d02b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800476e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004772:	d820      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004778:	d012      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800477a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477e:	d81a      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d022      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d115      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	3308      	adds	r3, #8
 8004790:	2101      	movs	r1, #1
 8004792:	4618      	mov	r0, r3
 8004794:	f001 fa0e 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800479e:	e015      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a4:	3328      	adds	r3, #40	; 0x28
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 fab5 	bl	8005d18 <RCCEx_PLL3_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80047b4:	e00a      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047be:	bf00      	nop
 80047c0:	e004      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e2:	4a02      	ldr	r2, [pc, #8]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6513      	str	r3, [r2, #80]	; 0x50
 80047e8:	e006      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800480e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d055      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004824:	d033      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800482a:	d82c      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d02f      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d826      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004838:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800483c:	d02b      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800483e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004842:	d820      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004848:	d012      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800484a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484e:	d81a      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d022      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004858:	d115      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485e:	3308      	adds	r3, #8
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f9a6 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800486e:	e015      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004874:	3328      	adds	r3, #40	; 0x28
 8004876:	2101      	movs	r1, #1
 8004878:	4618      	mov	r0, r3
 800487a:	f001 fa4d 	bl	8005d18 <RCCEx_PLL3_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004884:	e00a      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800488e:	bf00      	nop
 8004890:	e004      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004892:	bf00      	nop
 8004894:	e002      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800489a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80048a4:	4ba3      	ldr	r3, [pc, #652]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048b4:	4a9f      	ldr	r2, [pc, #636]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b6:	430b      	orrs	r3, r1
 80048b8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ba:	e003      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80048d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048de:	460b      	mov	r3, r1
 80048e0:	4313      	orrs	r3, r2
 80048e2:	d037      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ee:	d00e      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80048f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f4:	d816      	bhi.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80048fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048fe:	d111      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4b8c      	ldr	r3, [pc, #560]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a8b      	ldr	r2, [pc, #556]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800490c:	e00f      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	3308      	adds	r3, #8
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f001 f94c 	bl	8005bb4 <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004922:	e004      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800492a:	e000      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800492c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004936:	4b7f      	ldr	r3, [pc, #508]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	4a7b      	ldr	r2, [pc, #492]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004946:	430b      	orrs	r3, r1
 8004948:	6513      	str	r3, [r2, #80]	; 0x50
 800494a:	e003      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004950:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800496a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d039      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497a:	2b03      	cmp	r3, #3
 800497c:	d81c      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049c1 	.word	0x080049c1
 8004988:	08004995 	.word	0x08004995
 800498c:	080049a3 	.word	0x080049a3
 8004990:	080049c1 	.word	0x080049c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004994:	4b67      	ldr	r3, [pc, #412]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4a66      	ldr	r2, [pc, #408]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800499a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80049a0:	e00f      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a6:	3308      	adds	r3, #8
 80049a8:	2102      	movs	r1, #2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f902 	bl	8005bb4 <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80049b6:	e004      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80049c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049ca:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ce:	f023 0103 	bic.w	r1, r3, #3
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d8:	4a56      	ldr	r2, [pc, #344]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049da:	430b      	orrs	r3, r1
 80049dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049de:	e003      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80049f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049f8:	2300      	movs	r3, #0
 80049fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004a02:	460b      	mov	r3, r1
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f000 809f 	beq.w	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a0a:	4b4b      	ldr	r3, [pc, #300]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a4a      	ldr	r2, [pc, #296]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a16:	f7fd fa99 	bl	8001f4c <HAL_GetTick>
 8004a1a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a20:	f7fd fa94 	bl	8001f4c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b64      	cmp	r3, #100	; 0x64
 8004a2e:	d903      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a36:	e005      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a38:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ed      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d179      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a58:	4053      	eors	r3, r2
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d015      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a62:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a30      	ldr	r2, [pc, #192]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a2d      	ldr	r2, [pc, #180]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a86:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	d118      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fa56 	bl	8001f4c <HAL_GetTick>
 8004aa0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aa4:	e00d      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fd fa51 	bl	8001f4c <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ab0:	1ad2      	subs	r2, r2, r3
 8004ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d903      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004ac0:	e005      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0eb      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d129      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae6:	d10e      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ae8:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004af8:	091a      	lsrs	r2, r3, #4
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6113      	str	r3, [r2, #16]
 8004b04:	e005      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b10:	6113      	str	r3, [r2, #16]
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b14:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b22:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6713      	str	r3, [r2, #112]	; 0x70
 8004b28:	e00e      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004b32:	e009      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004b34:	58024400 	.word	0x58024400
 8004b38:	58024800 	.word	0x58024800
 8004b3c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f002 0301 	and.w	r3, r2, #1
 8004b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f000 8089 	beq.w	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b70:	2b28      	cmp	r3, #40	; 0x28
 8004b72:	d86b      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004c55 	.word	0x08004c55
 8004b80:	08004c4d 	.word	0x08004c4d
 8004b84:	08004c4d 	.word	0x08004c4d
 8004b88:	08004c4d 	.word	0x08004c4d
 8004b8c:	08004c4d 	.word	0x08004c4d
 8004b90:	08004c4d 	.word	0x08004c4d
 8004b94:	08004c4d 	.word	0x08004c4d
 8004b98:	08004c4d 	.word	0x08004c4d
 8004b9c:	08004c21 	.word	0x08004c21
 8004ba0:	08004c4d 	.word	0x08004c4d
 8004ba4:	08004c4d 	.word	0x08004c4d
 8004ba8:	08004c4d 	.word	0x08004c4d
 8004bac:	08004c4d 	.word	0x08004c4d
 8004bb0:	08004c4d 	.word	0x08004c4d
 8004bb4:	08004c4d 	.word	0x08004c4d
 8004bb8:	08004c4d 	.word	0x08004c4d
 8004bbc:	08004c37 	.word	0x08004c37
 8004bc0:	08004c4d 	.word	0x08004c4d
 8004bc4:	08004c4d 	.word	0x08004c4d
 8004bc8:	08004c4d 	.word	0x08004c4d
 8004bcc:	08004c4d 	.word	0x08004c4d
 8004bd0:	08004c4d 	.word	0x08004c4d
 8004bd4:	08004c4d 	.word	0x08004c4d
 8004bd8:	08004c4d 	.word	0x08004c4d
 8004bdc:	08004c55 	.word	0x08004c55
 8004be0:	08004c4d 	.word	0x08004c4d
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004c4d 	.word	0x08004c4d
 8004bec:	08004c4d 	.word	0x08004c4d
 8004bf0:	08004c4d 	.word	0x08004c4d
 8004bf4:	08004c4d 	.word	0x08004c4d
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004c55 	.word	0x08004c55
 8004c00:	08004c4d 	.word	0x08004c4d
 8004c04:	08004c4d 	.word	0x08004c4d
 8004c08:	08004c4d 	.word	0x08004c4d
 8004c0c:	08004c4d 	.word	0x08004c4d
 8004c10:	08004c4d 	.word	0x08004c4d
 8004c14:	08004c4d 	.word	0x08004c4d
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004c55 	.word	0x08004c55
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c24:	3308      	adds	r3, #8
 8004c26:	2101      	movs	r1, #1
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 ffc3 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c34:	e00f      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3a:	3328      	adds	r3, #40	; 0x28
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f86a 	bl	8005d18 <RCCEx_PLL3_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c4a:	e004      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c52:	e000      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c5e:	4bbf      	ldr	r3, [pc, #764]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6c:	4abb      	ldr	r2, [pc, #748]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	6553      	str	r3, [r2, #84]	; 0x54
 8004c72:	e003      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f002 0302 	and.w	r3, r2, #2
 8004c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c92:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004c96:	460b      	mov	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	d041      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d824      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cf9 	.word	0x08004cf9
 8004cb0:	08004cc5 	.word	0x08004cc5
 8004cb4:	08004cdb 	.word	0x08004cdb
 8004cb8:	08004cf9 	.word	0x08004cf9
 8004cbc:	08004cf9 	.word	0x08004cf9
 8004cc0:	08004cf9 	.word	0x08004cf9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc8:	3308      	adds	r3, #8
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 ff71 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004cd8:	e00f      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cde:	3328      	adds	r3, #40	; 0x28
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f818 	bl	8005d18 <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004cee:	e004      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d02:	4b96      	ldr	r3, [pc, #600]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	f023 0107 	bic.w	r1, r3, #7
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d10:	4a92      	ldr	r2, [pc, #584]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d12:	430b      	orrs	r3, r1
 8004d14:	6553      	str	r3, [r2, #84]	; 0x54
 8004d16:	e003      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f002 0304 	and.w	r3, r2, #4
 8004d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d044      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d825      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004da1 	.word	0x08004da1
 8004d58:	08004d6d 	.word	0x08004d6d
 8004d5c:	08004d83 	.word	0x08004d83
 8004d60:	08004da1 	.word	0x08004da1
 8004d64:	08004da1 	.word	0x08004da1
 8004d68:	08004da1 	.word	0x08004da1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d70:	3308      	adds	r3, #8
 8004d72:	2101      	movs	r1, #1
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 ff1d 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d80:	e00f      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d86:	3328      	adds	r3, #40	; 0x28
 8004d88:	2101      	movs	r1, #1
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 ffc4 	bl	8005d18 <RCCEx_PLL3_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d96:	e004      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d9e:	e000      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004daa:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	f023 0107 	bic.w	r1, r3, #7
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	4a68      	ldr	r2, [pc, #416]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc0:	e003      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f002 0320 	and.w	r3, r2, #32
 8004dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de4:	460b      	mov	r3, r1
 8004de6:	4313      	orrs	r3, r2
 8004de8:	d055      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004df6:	d033      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dfc:	d82c      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d02f      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d826      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e0e:	d02b      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004e10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e14:	d820      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e1a:	d012      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e20:	d81a      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d022      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e2a:	d115      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	3308      	adds	r3, #8
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 febd 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e40:	e015      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e46:	3328      	adds	r3, #40	; 0x28
 8004e48:	2102      	movs	r1, #2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ff64 	bl	8005d18 <RCCEx_PLL3_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e56:	e00a      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e5e:	e006      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e60:	bf00      	nop
 8004e62:	e004      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e64:	bf00      	nop
 8004e66:	e002      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e76:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	4a35      	ldr	r2, [pc, #212]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6553      	str	r3, [r2, #84]	; 0x54
 8004e8c:	e003      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004eac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	d058      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ebe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ec2:	d033      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004ec4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ec8:	d82c      	bhi.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	d02f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d826      	bhi.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eda:	d02b      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee0:	d820      	bhi.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee6:	d012      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eec:	d81a      	bhi.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d022      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef6:	d115      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	3308      	adds	r3, #8
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fe57 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f0c:	e015      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f12:	3328      	adds	r3, #40	; 0x28
 8004f14:	2102      	movs	r1, #2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fefe 	bl	8005d18 <RCCEx_PLL3_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f22:	e00a      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f2a:	e006      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f2c:	bf00      	nop
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f30:	bf00      	nop
 8004f32:	e002      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10e      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f52:	4a02      	ldr	r2, [pc, #8]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6593      	str	r3, [r2, #88]	; 0x58
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004f5a:	bf00      	nop
 8004f5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004f82:	460b      	mov	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	d055      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f94:	d033      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004f96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f9a:	d82c      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa0:	d02f      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa6:	d826      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004fa8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004fac:	d02b      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004fae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004fb2:	d820      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d012      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fbe:	d81a      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d022      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc8:	d115      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fce:	3308      	adds	r3, #8
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fdee 	bl	8005bb4 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004fde:	e015      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe4:	3328      	adds	r3, #40	; 0x28
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fe95 	bl	8005d18 <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ff4:	e00a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ffc:	e006      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800500a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005014:	4ba1      	ldr	r3, [pc, #644]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005020:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005024:	4a9d      	ldr	r2, [pc, #628]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005026:	430b      	orrs	r3, r1
 8005028:	6593      	str	r3, [r2, #88]	; 0x58
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005030:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f002 0308 	and.w	r3, r2, #8
 8005040:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800504a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d01e      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005060:	d10c      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005066:	3328      	adds	r3, #40	; 0x28
 8005068:	2102      	movs	r1, #2
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fe54 	bl	8005d18 <RCCEx_PLL3_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800507c:	4b87      	ldr	r3, [pc, #540]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800507e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005080:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508c:	4a83      	ldr	r2, [pc, #524]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800508e:	430b      	orrs	r3, r1
 8005090:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f002 0310 	and.w	r3, r2, #16
 800509e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050a2:	2300      	movs	r3, #0
 80050a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80050ac:	460b      	mov	r3, r1
 80050ae:	4313      	orrs	r3, r2
 80050b0:	d01e      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050be:	d10c      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c4:	3328      	adds	r3, #40	; 0x28
 80050c6:	2102      	movs	r1, #2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fe25 	bl	8005d18 <RCCEx_PLL3_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050da:	4b70      	ldr	r3, [pc, #448]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ea:	4a6c      	ldr	r2, [pc, #432]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80050fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005106:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800510a:	460b      	mov	r3, r1
 800510c:	4313      	orrs	r3, r2
 800510e:	d03e      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800511c:	d022      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800511e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005122:	d81b      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512c:	d00b      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800512e:	e015      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005134:	3308      	adds	r3, #8
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fd3b 	bl	8005bb4 <RCCEx_PLL2_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005144:	e00f      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514a:	3328      	adds	r3, #40	; 0x28
 800514c:	2102      	movs	r1, #2
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fde2 	bl	8005d18 <RCCEx_PLL3_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800515a:	e004      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800516e:	4b4b      	ldr	r3, [pc, #300]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005172:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800517e:	4a47      	ldr	r2, [pc, #284]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005180:	430b      	orrs	r3, r1
 8005182:	6593      	str	r3, [r2, #88]	; 0x58
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800518a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800519a:	67bb      	str	r3, [r7, #120]	; 0x78
 800519c:	2300      	movs	r3, #0
 800519e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d03b      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051b6:	d01f      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80051b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051bc:	d818      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c2:	d003      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80051c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c8:	d007      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80051ca:	e011      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051cc:	4b33      	ldr	r3, [pc, #204]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4a32      	ldr	r2, [pc, #200]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80051d8:	e00f      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051de:	3328      	adds	r3, #40	; 0x28
 80051e0:	2101      	movs	r1, #1
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fd98 	bl	8005d18 <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80051ee:	e004      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80051f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005202:	4b26      	ldr	r3, [pc, #152]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	4a22      	ldr	r2, [pc, #136]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005214:	430b      	orrs	r3, r1
 8005216:	6553      	str	r3, [r2, #84]	; 0x54
 8005218:	e003      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800522e:	673b      	str	r3, [r7, #112]	; 0x70
 8005230:	2300      	movs	r3, #0
 8005232:	677b      	str	r3, [r7, #116]	; 0x74
 8005234:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d034      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d007      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800524e:	e011      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	4a11      	ldr	r2, [pc, #68]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800525c:	e00e      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005262:	3308      	adds	r3, #8
 8005264:	2102      	movs	r1, #2
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fca4 	bl	8005bb4 <RCCEx_PLL2_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005272:	e003      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800527a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800528c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	4a02      	ldr	r2, [pc, #8]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005294:	430b      	orrs	r3, r1
 8005296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005298:	e006      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800529a:	bf00      	nop
 800529c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80052b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80052b6:	2300      	movs	r3, #0
 80052b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80052be:	460b      	mov	r3, r1
 80052c0:	4313      	orrs	r3, r2
 80052c2:	d00c      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c8:	3328      	adds	r3, #40	; 0x28
 80052ca:	2102      	movs	r1, #2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fd23 	bl	8005d18 <RCCEx_PLL3_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80052ea:	663b      	str	r3, [r7, #96]	; 0x60
 80052ec:	2300      	movs	r3, #0
 80052ee:	667b      	str	r3, [r7, #100]	; 0x64
 80052f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80052f4:	460b      	mov	r3, r1
 80052f6:	4313      	orrs	r3, r2
 80052f8:	d038      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005306:	d018      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530c:	d811      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800530e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005312:	d014      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005318:	d80b      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d011      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d106      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005324:	4bc3      	ldr	r3, [pc, #780]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4ac2      	ldr	r2, [pc, #776]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800532a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005330:	e008      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005338:	e004      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800533a:	bf00      	nop
 800533c:	e002      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800534c:	4bb9      	ldr	r3, [pc, #740]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535c:	4ab5      	ldr	r2, [pc, #724]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800535e:	430b      	orrs	r3, r1
 8005360:	6553      	str	r3, [r2, #84]	; 0x54
 8005362:	e003      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005378:	65bb      	str	r3, [r7, #88]	; 0x58
 800537a:	2300      	movs	r3, #0
 800537c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005388:	4baa      	ldr	r3, [pc, #680]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800538a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005396:	4aa7      	ldr	r2, [pc, #668]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005398:	430b      	orrs	r3, r1
 800539a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80053a8:	653b      	str	r3, [r7, #80]	; 0x50
 80053aa:	2300      	movs	r3, #0
 80053ac:	657b      	str	r3, [r7, #84]	; 0x54
 80053ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053b8:	4b9e      	ldr	r3, [pc, #632]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053c8:	4a9a      	ldr	r2, [pc, #616]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80053da:	64bb      	str	r3, [r7, #72]	; 0x48
 80053dc:	2300      	movs	r3, #0
 80053de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80053e4:	460b      	mov	r3, r1
 80053e6:	4313      	orrs	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ea:	4b92      	ldr	r3, [pc, #584]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f8:	4a8e      	ldr	r2, [pc, #568]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053fa:	430b      	orrs	r3, r1
 80053fc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800540a:	643b      	str	r3, [r7, #64]	; 0x40
 800540c:	2300      	movs	r3, #0
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
 8005410:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005414:	460b      	mov	r3, r1
 8005416:	4313      	orrs	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800541a:	4b86      	ldr	r3, [pc, #536]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	4a85      	ldr	r2, [pc, #532]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005420:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005424:	6113      	str	r3, [r2, #16]
 8005426:	4b83      	ldr	r3, [pc, #524]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005428:	6919      	ldr	r1, [r3, #16]
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005432:	4a80      	ldr	r2, [pc, #512]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005434:	430b      	orrs	r3, r1
 8005436:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005444:	63bb      	str	r3, [r7, #56]	; 0x38
 8005446:	2300      	movs	r3, #0
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800544e:	460b      	mov	r3, r1
 8005450:	4313      	orrs	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005454:	4b77      	ldr	r3, [pc, #476]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005458:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	4a74      	ldr	r2, [pc, #464]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005464:	430b      	orrs	r3, r1
 8005466:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
 8005476:	2300      	movs	r3, #0
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
 800547a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005484:	4b6b      	ldr	r3, [pc, #428]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005494:	4a67      	ldr	r2, [pc, #412]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005496:	430b      	orrs	r3, r1
 8005498:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800549a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	2100      	movs	r1, #0
 80054a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80054b0:	460b      	mov	r3, r1
 80054b2:	4313      	orrs	r3, r2
 80054b4:	d011      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ba:	3308      	adds	r3, #8
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fb78 	bl	8005bb4 <RCCEx_PLL2_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	2100      	movs	r1, #0
 80054e4:	6239      	str	r1, [r7, #32]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
 80054ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054f0:	460b      	mov	r3, r1
 80054f2:	4313      	orrs	r3, r2
 80054f4:	d011      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fa:	3308      	adds	r3, #8
 80054fc:	2101      	movs	r1, #1
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fb58 	bl	8005bb4 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800550a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	2100      	movs	r1, #0
 8005524:	61b9      	str	r1, [r7, #24]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d011      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	3308      	adds	r3, #8
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fb38 	bl	8005bb4 <RCCEx_PLL2_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800554a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	2100      	movs	r1, #0
 8005564:	6139      	str	r1, [r7, #16]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005570:	460b      	mov	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	d011      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557a:	3328      	adds	r3, #40	; 0x28
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fbca 	bl	8005d18 <RCCEx_PLL3_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800558a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	2100      	movs	r1, #0
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055b0:	460b      	mov	r3, r1
 80055b2:	4313      	orrs	r3, r2
 80055b4:	d011      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ba:	3328      	adds	r3, #40	; 0x28
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fbaa 	bl	8005d18 <RCCEx_PLL3_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80055ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	2100      	movs	r1, #0
 80055e4:	6039      	str	r1, [r7, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055f0:	460b      	mov	r3, r1
 80055f2:	4313      	orrs	r3, r2
 80055f4:	d011      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fa:	3328      	adds	r3, #40	; 0x28
 80055fc:	2102      	movs	r1, #2
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fb8a 	bl	8005d18 <RCCEx_PLL3_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800561a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	e000      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800562e:	46bd      	mov	sp, r7
 8005630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005634:	58024400 	.word	0x58024400

08005638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800563c:	f7fe fd54 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4904      	ldr	r1, [pc, #16]	; (8005660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	58024400 	.word	0x58024400
 8005660:	08009240 	.word	0x08009240

08005664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800566c:	4ba1      	ldr	r3, [pc, #644]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005676:	4b9f      	ldr	r3, [pc, #636]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	0b1b      	lsrs	r3, r3, #12
 800567c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005682:	4b9c      	ldr	r3, [pc, #624]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800568e:	4b99      	ldr	r3, [pc, #612]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8111 	beq.w	80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	f000 8083 	beq.w	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f200 80a1 	bhi.w	8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d056      	beq.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80056ce:	e099      	b.n	8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d0:	4b88      	ldr	r3, [pc, #544]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d02d      	beq.n	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056dc:	4b85      	ldr	r3, [pc, #532]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	08db      	lsrs	r3, r3, #3
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	4a84      	ldr	r2, [pc, #528]	; (80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005706:	4b7b      	ldr	r3, [pc, #492]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	ed97 6a03 	vldr	s12, [r7, #12]
 800571a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005736:	e087      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a03 	vldr	s12, [r7, #12]
 800575e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800577a:	e065      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800578a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578e:	4b59      	ldr	r3, [pc, #356]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057be:	e043      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80057ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d2:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005802:	e021      	b.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005816:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a03 	vldr	s12, [r7, #12]
 800582a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005848:	4b2a      	ldr	r3, [pc, #168]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	0a5b      	lsrs	r3, r3, #9
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800585e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005862:	edd7 6a07 	vldr	s13, [r7, #28]
 8005866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800586a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800586e:	ee17 2a90 	vmov	r2, s15
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005876:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005880:	ee07 3a90 	vmov	s15, r3
 8005884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800588c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005890:	edd7 6a07 	vldr	s13, [r7, #28]
 8005894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800589c:	ee17 2a90 	vmov	r2, s15
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	0e1b      	lsrs	r3, r3, #24
 80058aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058be:	edd7 6a07 	vldr	s13, [r7, #28]
 80058c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ca:	ee17 2a90 	vmov	r2, s15
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058d2:	e008      	b.n	80058e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
}
 80058e6:	bf00      	nop
 80058e8:	3724      	adds	r7, #36	; 0x24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
 80058f8:	03d09000 	.word	0x03d09000
 80058fc:	46000000 	.word	0x46000000
 8005900:	4c742400 	.word	0x4c742400
 8005904:	4a742400 	.word	0x4a742400
 8005908:	4af42400 	.word	0x4af42400

0800590c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005914:	4ba1      	ldr	r3, [pc, #644]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800591e:	4b9f      	ldr	r3, [pc, #636]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	0d1b      	lsrs	r3, r3, #20
 8005924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800592a:	4b9c      	ldr	r3, [pc, #624]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005936:	4b99      	ldr	r3, [pc, #612]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	08db      	lsrs	r3, r3, #3
 800593c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8111 	beq.w	8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b02      	cmp	r3, #2
 800595e:	f000 8083 	beq.w	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b02      	cmp	r3, #2
 8005966:	f200 80a1 	bhi.w	8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d056      	beq.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005976:	e099      	b.n	8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005978:	4b88      	ldr	r3, [pc, #544]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d02d      	beq.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005984:	4b85      	ldr	r3, [pc, #532]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	4a84      	ldr	r2, [pc, #528]	; (8005ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059de:	e087      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b6a      	ldr	r3, [pc, #424]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a22:	e065      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a66:	e043      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b48      	ldr	r3, [pc, #288]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aaa:	e021      	b.n	8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005abe:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005af0:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	0a5b      	lsrs	r3, r3, #9
 8005af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b16:	ee17 2a90 	vmov	r2, s15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005b1e:	4b1f      	ldr	r3, [pc, #124]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b44:	ee17 2a90 	vmov	r2, s15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	0e1b      	lsrs	r3, r3, #24
 8005b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b72:	ee17 2a90 	vmov	r2, s15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b7a:	e008      	b.n	8005b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	3724      	adds	r7, #36	; 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400
 8005ba0:	03d09000 	.word	0x03d09000
 8005ba4:	46000000 	.word	0x46000000
 8005ba8:	4c742400 	.word	0x4c742400
 8005bac:	4a742400 	.word	0x4a742400
 8005bb0:	4af42400 	.word	0x4af42400

08005bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bc2:	4b53      	ldr	r3, [pc, #332]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d101      	bne.n	8005bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e099      	b.n	8005d06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005bd2:	4b4f      	ldr	r3, [pc, #316]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a4e      	ldr	r2, [pc, #312]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bde:	f7fc f9b5 	bl	8001f4c <HAL_GetTick>
 8005be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005be4:	e008      	b.n	8005bf8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005be6:	f7fc f9b1 	bl	8001f4c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e086      	b.n	8005d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bf8:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f0      	bne.n	8005be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c04:	4b42      	ldr	r3, [pc, #264]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	031b      	lsls	r3, r3, #12
 8005c12:	493f      	ldr	r1, [pc, #252]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	628b      	str	r3, [r1, #40]	; 0x28
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	025b      	lsls	r3, r3, #9
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c48:	4931      	ldr	r1, [pc, #196]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c4e:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	492d      	ldr	r1, [pc, #180]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c60:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	f023 0220 	bic.w	r2, r3, #32
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	4928      	ldr	r1, [pc, #160]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c72:	4b27      	ldr	r3, [pc, #156]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c7e:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <RCCEx_PLL2_Config+0x160>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	69d2      	ldr	r2, [r2, #28]
 8005c8a:	00d2      	lsls	r2, r2, #3
 8005c8c:	4920      	ldr	r1, [pc, #128]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c92:	4b1f      	ldr	r3, [pc, #124]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005c98:	f043 0310 	orr.w	r3, r3, #16
 8005c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb0:	e00f      	b.n	8005cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d106      	bne.n	8005cc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cc4:	e005      	b.n	8005cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a0e      	ldr	r2, [pc, #56]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005cd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cde:	f7fc f935 	bl	8001f4c <HAL_GetTick>
 8005ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ce4:	e008      	b.n	8005cf8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ce6:	f7fc f931 	bl	8001f4c <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e006      	b.n	8005d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <RCCEx_PLL2_Config+0x15c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	58024400 	.word	0x58024400
 8005d14:	ffff0007 	.word	0xffff0007

08005d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d26:	4b53      	ldr	r3, [pc, #332]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d101      	bne.n	8005d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e099      	b.n	8005e6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d36:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a4e      	ldr	r2, [pc, #312]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d42:	f7fc f903 	bl	8001f4c <HAL_GetTick>
 8005d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d4a:	f7fc f8ff 	bl	8001f4c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e086      	b.n	8005e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d5c:	4b45      	ldr	r3, [pc, #276]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f0      	bne.n	8005d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	051b      	lsls	r3, r3, #20
 8005d76:	493f      	ldr	r1, [pc, #252]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	628b      	str	r3, [r1, #40]	; 0x28
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	025b      	lsls	r3, r3, #9
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005dac:	4931      	ldr	r1, [pc, #196]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005db2:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	492d      	ldr	r1, [pc, #180]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005dc4:	4b2b      	ldr	r3, [pc, #172]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	4928      	ldr	r1, [pc, #160]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005dd6:	4b27      	ldr	r3, [pc, #156]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	4a26      	ldr	r2, [pc, #152]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <RCCEx_PLL3_Config+0x160>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	69d2      	ldr	r2, [r2, #28]
 8005dee:	00d2      	lsls	r2, r2, #3
 8005df0:	4920      	ldr	r1, [pc, #128]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005df6:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e08:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e14:	e00f      	b.n	8005e36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d106      	bne.n	8005e2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e1c:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e28:	e005      	b.n	8005e36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e2a:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	4a11      	ldr	r2, [pc, #68]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e42:	f7fc f883 	bl	8001f4c <HAL_GetTick>
 8005e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e48:	e008      	b.n	8005e5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e4a:	f7fc f87f 	bl	8001f4c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e006      	b.n	8005e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <RCCEx_PLL3_Config+0x15c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	58024400 	.word	0x58024400
 8005e78:	ffff0007 	.word	0xffff0007

08005e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e049      	b.n	8005f22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f841 	bl	8005f2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 f9e8 	bl	8006290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d001      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e054      	b.n	8006002 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a26      	ldr	r2, [pc, #152]	; (8006010 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d022      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f82:	d01d      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a22      	ldr	r2, [pc, #136]	; (8006014 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a21      	ldr	r2, [pc, #132]	; (8006018 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1f      	ldr	r2, [pc, #124]	; (800601c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <HAL_TIM_Base_Start_IT+0xe0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <HAL_TIM_Base_Start_IT+0xe4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d115      	bne.n	8005fec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	4b19      	ldr	r3, [pc, #100]	; (800602c <HAL_TIM_Base_Start_IT+0xec>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b06      	cmp	r3, #6
 8005fd0:	d015      	beq.n	8005ffe <HAL_TIM_Base_Start_IT+0xbe>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd8:	d011      	beq.n	8005ffe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fea:	e008      	b.n	8005ffe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	e000      	b.n	8006000 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40010400 	.word	0x40010400
 8006024:	40001800 	.word	0x40001800
 8006028:	40014000 	.word	0x40014000
 800602c:	00010007 	.word	0x00010007

08006030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d020      	beq.n	8006094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01b      	beq.n	8006094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0202 	mvn.w	r2, #2
 8006064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8e9 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f8db 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f8ec 	bl	8006266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d020      	beq.n	80060e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01b      	beq.n	80060e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0204 	mvn.w	r2, #4
 80060b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8c3 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8b5 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f8c6 	bl	8006266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d020      	beq.n	800612c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01b      	beq.n	800612c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0208 	mvn.w	r2, #8
 80060fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2204      	movs	r2, #4
 8006102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f89d 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f88f 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8a0 	bl	8006266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	d020      	beq.n	8006178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01b      	beq.n	8006178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0210 	mvn.w	r2, #16
 8006148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2208      	movs	r2, #8
 800614e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f877 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
 8006164:	e005      	b.n	8006172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f869 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f87a 	bl	8006266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00c      	beq.n	800619c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d007      	beq.n	800619c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0201 	mvn.w	r2, #1
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb fbc8 	bl	800192c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80061c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f913 	bl	80063f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00c      	beq.n	80061ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f90b 	bl	8006404 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00c      	beq.n	8006212 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800620a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f834 	bl	800627a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00c      	beq.n	8006236 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f06f 0220 	mvn.w	r2, #32
 800622e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f8d3 	bl	80063dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a46      	ldr	r2, [pc, #280]	; (80063bc <TIM_Base_SetConfig+0x12c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d00f      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a43      	ldr	r2, [pc, #268]	; (80063c0 <TIM_Base_SetConfig+0x130>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a42      	ldr	r2, [pc, #264]	; (80063c4 <TIM_Base_SetConfig+0x134>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a41      	ldr	r2, [pc, #260]	; (80063c8 <TIM_Base_SetConfig+0x138>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a40      	ldr	r2, [pc, #256]	; (80063cc <TIM_Base_SetConfig+0x13c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d108      	bne.n	80062e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a35      	ldr	r2, [pc, #212]	; (80063bc <TIM_Base_SetConfig+0x12c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01f      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d01b      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a32      	ldr	r2, [pc, #200]	; (80063c0 <TIM_Base_SetConfig+0x130>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a31      	ldr	r2, [pc, #196]	; (80063c4 <TIM_Base_SetConfig+0x134>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a30      	ldr	r2, [pc, #192]	; (80063c8 <TIM_Base_SetConfig+0x138>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00f      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2f      	ldr	r2, [pc, #188]	; (80063cc <TIM_Base_SetConfig+0x13c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2e      	ldr	r2, [pc, #184]	; (80063d0 <TIM_Base_SetConfig+0x140>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <TIM_Base_SetConfig+0x144>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_Base_SetConfig+0x9a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <TIM_Base_SetConfig+0x148>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a16      	ldr	r2, [pc, #88]	; (80063bc <TIM_Base_SetConfig+0x12c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00f      	beq.n	8006388 <TIM_Base_SetConfig+0xf8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <TIM_Base_SetConfig+0x13c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00b      	beq.n	8006388 <TIM_Base_SetConfig+0xf8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a17      	ldr	r2, [pc, #92]	; (80063d0 <TIM_Base_SetConfig+0x140>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d007      	beq.n	8006388 <TIM_Base_SetConfig+0xf8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <TIM_Base_SetConfig+0x144>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_Base_SetConfig+0xf8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <TIM_Base_SetConfig+0x148>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d103      	bne.n	8006390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d105      	bne.n	80063ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f023 0201 	bic.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]
  }
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800
 80063c8:	40000c00 	.word	0x40000c00
 80063cc:	40010400 	.word	0x40010400
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40014400 	.word	0x40014400
 80063d8:	40014800 	.word	0x40014800

080063dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e042      	b.n	80064b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fb fb15 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	; 0x24
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fee6 	bl	8007234 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f97b 	bl	8006764 <UART_SetConfig>
 800646e:	4603      	mov	r3, r0
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e01b      	b.n	80064b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 ff65 	bl	8007378 <UART_CheckIdleState>
 80064ae:	4603      	mov	r3, r0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d17b      	bne.n	80065ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_UART_Transmit+0x26>
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e074      	b.n	80065cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2221      	movs	r2, #33	; 0x21
 80064ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064f2:	f7fb fd2b 	bl	8001f4c <HAL_GetTick>
 80064f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	88fa      	ldrh	r2, [r7, #6]
 8006504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006510:	d108      	bne.n	8006524 <HAL_UART_Transmit+0x6c>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e003      	b.n	800652c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800652c:	e030      	b.n	8006590 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 ffc7 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e03d      	b.n	80065cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	3302      	adds	r3, #2
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	e007      	b.n	800657e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	3301      	adds	r3, #1
 800657c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1c8      	bne.n	800652e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2200      	movs	r2, #0
 80065a4:	2140      	movs	r1, #64	; 0x40
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 ff90 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e006      	b.n	80065cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	e000      	b.n	80065cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065ca:	2302      	movs	r3, #2
  }
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	f040 80b5 	bne.w	800675a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_UART_Receive+0x28>
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0ad      	b.n	800675c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2222      	movs	r2, #34	; 0x22
 800660c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006616:	f7fb fc99 	bl	8001f4c <HAL_GetTick>
 800661a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	d10e      	bne.n	8006654 <HAL_UART_Receive+0x80>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <HAL_UART_Receive+0x76>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006644:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006648:	e02d      	b.n	80066a6 <HAL_UART_Receive+0xd2>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	22ff      	movs	r2, #255	; 0xff
 800664e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006652:	e028      	b.n	80066a6 <HAL_UART_Receive+0xd2>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10d      	bne.n	8006678 <HAL_UART_Receive+0xa4>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <HAL_UART_Receive+0x9a>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	22ff      	movs	r2, #255	; 0xff
 8006668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800666c:	e01b      	b.n	80066a6 <HAL_UART_Receive+0xd2>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	227f      	movs	r2, #127	; 0x7f
 8006672:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006676:	e016      	b.n	80066a6 <HAL_UART_Receive+0xd2>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006680:	d10d      	bne.n	800669e <HAL_UART_Receive+0xca>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <HAL_UART_Receive+0xc0>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	227f      	movs	r2, #127	; 0x7f
 800668e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006692:	e008      	b.n	80066a6 <HAL_UART_Receive+0xd2>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	223f      	movs	r2, #63	; 0x3f
 8006698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800669c:	e003      	b.n	80066a6 <HAL_UART_Receive+0xd2>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066ac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b6:	d108      	bne.n	80066ca <HAL_UART_Receive+0xf6>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e003      	b.n	80066d2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80066d2:	e036      	b.n	8006742 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2200      	movs	r2, #0
 80066dc:	2120      	movs	r1, #32
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 fef4 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e032      	b.n	800675c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10c      	bne.n	8006716 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	b29a      	uxth	r2, r3
 8006704:	8a7b      	ldrh	r3, [r7, #18]
 8006706:	4013      	ands	r3, r2
 8006708:	b29a      	uxth	r2, r3
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	3302      	adds	r3, #2
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e00c      	b.n	8006730 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	b2da      	uxtb	r2, r3
 800671e:	8a7b      	ldrh	r3, [r7, #18]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	4013      	ands	r3, r2
 8006724:	b2da      	uxtb	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3301      	adds	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1c2      	bne.n	80066d4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006768:	b092      	sub	sp, #72	; 0x48
 800676a:	af00      	add	r7, sp, #0
 800676c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	431a      	orrs	r2, r3
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	431a      	orrs	r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	4313      	orrs	r3, r2
 800678a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4bbe      	ldr	r3, [pc, #760]	; (8006a8c <UART_SetConfig+0x328>)
 8006794:	4013      	ands	r3, r2
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800679c:	430b      	orrs	r3, r1
 800679e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4ab3      	ldr	r2, [pc, #716]	; (8006a90 <UART_SetConfig+0x32c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067cc:	4313      	orrs	r3, r2
 80067ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	4baf      	ldr	r3, [pc, #700]	; (8006a94 <UART_SetConfig+0x330>)
 80067d8:	4013      	ands	r3, r2
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	f023 010f 	bic.w	r1, r3, #15
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4aa6      	ldr	r2, [pc, #664]	; (8006a98 <UART_SetConfig+0x334>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d177      	bne.n	80068f4 <UART_SetConfig+0x190>
 8006804:	4ba5      	ldr	r3, [pc, #660]	; (8006a9c <UART_SetConfig+0x338>)
 8006806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800680c:	2b28      	cmp	r3, #40	; 0x28
 800680e:	d86d      	bhi.n	80068ec <UART_SetConfig+0x188>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0xb4>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	080068bd 	.word	0x080068bd
 800681c:	080068ed 	.word	0x080068ed
 8006820:	080068ed 	.word	0x080068ed
 8006824:	080068ed 	.word	0x080068ed
 8006828:	080068ed 	.word	0x080068ed
 800682c:	080068ed 	.word	0x080068ed
 8006830:	080068ed 	.word	0x080068ed
 8006834:	080068ed 	.word	0x080068ed
 8006838:	080068c5 	.word	0x080068c5
 800683c:	080068ed 	.word	0x080068ed
 8006840:	080068ed 	.word	0x080068ed
 8006844:	080068ed 	.word	0x080068ed
 8006848:	080068ed 	.word	0x080068ed
 800684c:	080068ed 	.word	0x080068ed
 8006850:	080068ed 	.word	0x080068ed
 8006854:	080068ed 	.word	0x080068ed
 8006858:	080068cd 	.word	0x080068cd
 800685c:	080068ed 	.word	0x080068ed
 8006860:	080068ed 	.word	0x080068ed
 8006864:	080068ed 	.word	0x080068ed
 8006868:	080068ed 	.word	0x080068ed
 800686c:	080068ed 	.word	0x080068ed
 8006870:	080068ed 	.word	0x080068ed
 8006874:	080068ed 	.word	0x080068ed
 8006878:	080068d5 	.word	0x080068d5
 800687c:	080068ed 	.word	0x080068ed
 8006880:	080068ed 	.word	0x080068ed
 8006884:	080068ed 	.word	0x080068ed
 8006888:	080068ed 	.word	0x080068ed
 800688c:	080068ed 	.word	0x080068ed
 8006890:	080068ed 	.word	0x080068ed
 8006894:	080068ed 	.word	0x080068ed
 8006898:	080068dd 	.word	0x080068dd
 800689c:	080068ed 	.word	0x080068ed
 80068a0:	080068ed 	.word	0x080068ed
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	080068ed 	.word	0x080068ed
 80068ac:	080068ed 	.word	0x080068ed
 80068b0:	080068ed 	.word	0x080068ed
 80068b4:	080068ed 	.word	0x080068ed
 80068b8:	080068e5 	.word	0x080068e5
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c2:	e222      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ca:	e21e      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d2:	e21a      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068da:	e216      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80068dc:	2320      	movs	r3, #32
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e2:	e212      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ea:	e20e      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f2:	e20a      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a69      	ldr	r2, [pc, #420]	; (8006aa0 <UART_SetConfig+0x33c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d130      	bne.n	8006960 <UART_SetConfig+0x1fc>
 80068fe:	4b67      	ldr	r3, [pc, #412]	; (8006a9c <UART_SetConfig+0x338>)
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b05      	cmp	r3, #5
 8006908:	d826      	bhi.n	8006958 <UART_SetConfig+0x1f4>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <UART_SetConfig+0x1ac>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006929 	.word	0x08006929
 8006914:	08006931 	.word	0x08006931
 8006918:	08006939 	.word	0x08006939
 800691c:	08006941 	.word	0x08006941
 8006920:	08006949 	.word	0x08006949
 8006924:	08006951 	.word	0x08006951
 8006928:	2300      	movs	r3, #0
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e1ec      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006930:	2304      	movs	r3, #4
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006936:	e1e8      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006938:	2308      	movs	r3, #8
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e1e4      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006940:	2310      	movs	r3, #16
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e1e0      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006948:	2320      	movs	r3, #32
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694e:	e1dc      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006956:	e1d8      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006958:	2380      	movs	r3, #128	; 0x80
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e1d4      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a4f      	ldr	r2, [pc, #316]	; (8006aa4 <UART_SetConfig+0x340>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d130      	bne.n	80069cc <UART_SetConfig+0x268>
 800696a:	4b4c      	ldr	r3, [pc, #304]	; (8006a9c <UART_SetConfig+0x338>)
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	2b05      	cmp	r3, #5
 8006974:	d826      	bhi.n	80069c4 <UART_SetConfig+0x260>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x218>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	08006995 	.word	0x08006995
 8006980:	0800699d 	.word	0x0800699d
 8006984:	080069a5 	.word	0x080069a5
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069b5 	.word	0x080069b5
 8006990:	080069bd 	.word	0x080069bd
 8006994:	2300      	movs	r3, #0
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e1b6      	b.n	8006d0a <UART_SetConfig+0x5a6>
 800699c:	2304      	movs	r3, #4
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a2:	e1b2      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80069a4:	2308      	movs	r3, #8
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e1ae      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80069ac:	2310      	movs	r3, #16
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e1aa      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80069b4:	2320      	movs	r3, #32
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e1a6      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80069bc:	2340      	movs	r3, #64	; 0x40
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e1a2      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ca:	e19e      	b.n	8006d0a <UART_SetConfig+0x5a6>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a35      	ldr	r2, [pc, #212]	; (8006aa8 <UART_SetConfig+0x344>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d130      	bne.n	8006a38 <UART_SetConfig+0x2d4>
 80069d6:	4b31      	ldr	r3, [pc, #196]	; (8006a9c <UART_SetConfig+0x338>)
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d826      	bhi.n	8006a30 <UART_SetConfig+0x2cc>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0x284>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a01 	.word	0x08006a01
 80069ec:	08006a09 	.word	0x08006a09
 80069f0:	08006a11 	.word	0x08006a11
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a21 	.word	0x08006a21
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a06:	e180      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0e:	e17c      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a10:	2308      	movs	r3, #8
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e178      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1e:	e174      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a20:	2320      	movs	r3, #32
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a26:	e170      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a28:	2340      	movs	r3, #64	; 0x40
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2e:	e16c      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a30:	2380      	movs	r3, #128	; 0x80
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e168      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <UART_SetConfig+0x348>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d142      	bne.n	8006ac8 <UART_SetConfig+0x364>
 8006a42:	4b16      	ldr	r3, [pc, #88]	; (8006a9c <UART_SetConfig+0x338>)
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d838      	bhi.n	8006ac0 <UART_SetConfig+0x35c>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0x2f0>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a6d 	.word	0x08006a6d
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	08006a7d 	.word	0x08006a7d
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006ab1 	.word	0x08006ab1
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a72:	e14a      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7a:	e146      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a82:	e142      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8a:	e13e      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006a8c:	cfff69f3 	.word	0xcfff69f3
 8006a90:	58000c00 	.word	0x58000c00
 8006a94:	11fff4ff 	.word	0x11fff4ff
 8006a98:	40011000 	.word	0x40011000
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	40004400 	.word	0x40004400
 8006aa4:	40004800 	.word	0x40004800
 8006aa8:	40004c00 	.word	0x40004c00
 8006aac:	40005000 	.word	0x40005000
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e128      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006abe:	e124      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac6:	e120      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4acb      	ldr	r2, [pc, #812]	; (8006dfc <UART_SetConfig+0x698>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d176      	bne.n	8006bc0 <UART_SetConfig+0x45c>
 8006ad2:	4bcb      	ldr	r3, [pc, #812]	; (8006e00 <UART_SetConfig+0x69c>)
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ada:	2b28      	cmp	r3, #40	; 0x28
 8006adc:	d86c      	bhi.n	8006bb8 <UART_SetConfig+0x454>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x380>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b89 	.word	0x08006b89
 8006ae8:	08006bb9 	.word	0x08006bb9
 8006aec:	08006bb9 	.word	0x08006bb9
 8006af0:	08006bb9 	.word	0x08006bb9
 8006af4:	08006bb9 	.word	0x08006bb9
 8006af8:	08006bb9 	.word	0x08006bb9
 8006afc:	08006bb9 	.word	0x08006bb9
 8006b00:	08006bb9 	.word	0x08006bb9
 8006b04:	08006b91 	.word	0x08006b91
 8006b08:	08006bb9 	.word	0x08006bb9
 8006b0c:	08006bb9 	.word	0x08006bb9
 8006b10:	08006bb9 	.word	0x08006bb9
 8006b14:	08006bb9 	.word	0x08006bb9
 8006b18:	08006bb9 	.word	0x08006bb9
 8006b1c:	08006bb9 	.word	0x08006bb9
 8006b20:	08006bb9 	.word	0x08006bb9
 8006b24:	08006b99 	.word	0x08006b99
 8006b28:	08006bb9 	.word	0x08006bb9
 8006b2c:	08006bb9 	.word	0x08006bb9
 8006b30:	08006bb9 	.word	0x08006bb9
 8006b34:	08006bb9 	.word	0x08006bb9
 8006b38:	08006bb9 	.word	0x08006bb9
 8006b3c:	08006bb9 	.word	0x08006bb9
 8006b40:	08006bb9 	.word	0x08006bb9
 8006b44:	08006ba1 	.word	0x08006ba1
 8006b48:	08006bb9 	.word	0x08006bb9
 8006b4c:	08006bb9 	.word	0x08006bb9
 8006b50:	08006bb9 	.word	0x08006bb9
 8006b54:	08006bb9 	.word	0x08006bb9
 8006b58:	08006bb9 	.word	0x08006bb9
 8006b5c:	08006bb9 	.word	0x08006bb9
 8006b60:	08006bb9 	.word	0x08006bb9
 8006b64:	08006ba9 	.word	0x08006ba9
 8006b68:	08006bb9 	.word	0x08006bb9
 8006b6c:	08006bb9 	.word	0x08006bb9
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006bb9 	.word	0x08006bb9
 8006b78:	08006bb9 	.word	0x08006bb9
 8006b7c:	08006bb9 	.word	0x08006bb9
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e0bc      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006b90:	2304      	movs	r3, #4
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e0b8      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9e:	e0b4      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba6:	e0b0      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006ba8:	2320      	movs	r3, #32
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bae:	e0ac      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e0a8      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006bb8:	2380      	movs	r3, #128	; 0x80
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bbe:	e0a4      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a8f      	ldr	r2, [pc, #572]	; (8006e04 <UART_SetConfig+0x6a0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d130      	bne.n	8006c2c <UART_SetConfig+0x4c8>
 8006bca:	4b8d      	ldr	r3, [pc, #564]	; (8006e00 <UART_SetConfig+0x69c>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	d826      	bhi.n	8006c24 <UART_SetConfig+0x4c0>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x478>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006bf5 	.word	0x08006bf5
 8006be0:	08006bfd 	.word	0x08006bfd
 8006be4:	08006c05 	.word	0x08006c05
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e086      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e082      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c04:	2308      	movs	r3, #8
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e07e      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e07a      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c14:	2320      	movs	r3, #32
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e076      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c22:	e072      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2a:	e06e      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a75      	ldr	r2, [pc, #468]	; (8006e08 <UART_SetConfig+0x6a4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d130      	bne.n	8006c98 <UART_SetConfig+0x534>
 8006c36:	4b72      	ldr	r3, [pc, #456]	; (8006e00 <UART_SetConfig+0x69c>)
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d826      	bhi.n	8006c90 <UART_SetConfig+0x52c>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0x4e4>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c61 	.word	0x08006c61
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006c79 	.word	0x08006c79
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c89 	.word	0x08006c89
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e050      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e04c      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e048      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e044      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c80:	2320      	movs	r3, #32
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e040      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e03c      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e038      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5b      	ldr	r2, [pc, #364]	; (8006e0c <UART_SetConfig+0x6a8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d130      	bne.n	8006d04 <UART_SetConfig+0x5a0>
 8006ca2:	4b57      	ldr	r3, [pc, #348]	; (8006e00 <UART_SetConfig+0x69c>)
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d826      	bhi.n	8006cfc <UART_SetConfig+0x598>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x550>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006ccd 	.word	0x08006ccd
 8006cb8:	08006cd5 	.word	0x08006cd5
 8006cbc:	08006cdd 	.word	0x08006cdd
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006ced 	.word	0x08006ced
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	2302      	movs	r3, #2
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e01a      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e016      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e012      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e00e      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006cec:	2320      	movs	r3, #32
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e00a      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e006      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e002      	b.n	8006d0a <UART_SetConfig+0x5a6>
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a3f      	ldr	r2, [pc, #252]	; (8006e0c <UART_SetConfig+0x6a8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	f040 80f8 	bne.w	8006f06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	dc46      	bgt.n	8006dac <UART_SetConfig+0x648>
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	f2c0 8082 	blt.w	8006e28 <UART_SetConfig+0x6c4>
 8006d24:	3b02      	subs	r3, #2
 8006d26:	2b1e      	cmp	r3, #30
 8006d28:	d87e      	bhi.n	8006e28 <UART_SetConfig+0x6c4>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <UART_SetConfig+0x5cc>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006db3 	.word	0x08006db3
 8006d34:	08006e29 	.word	0x08006e29
 8006d38:	08006dbb 	.word	0x08006dbb
 8006d3c:	08006e29 	.word	0x08006e29
 8006d40:	08006e29 	.word	0x08006e29
 8006d44:	08006e29 	.word	0x08006e29
 8006d48:	08006dcb 	.word	0x08006dcb
 8006d4c:	08006e29 	.word	0x08006e29
 8006d50:	08006e29 	.word	0x08006e29
 8006d54:	08006e29 	.word	0x08006e29
 8006d58:	08006e29 	.word	0x08006e29
 8006d5c:	08006e29 	.word	0x08006e29
 8006d60:	08006e29 	.word	0x08006e29
 8006d64:	08006e29 	.word	0x08006e29
 8006d68:	08006ddb 	.word	0x08006ddb
 8006d6c:	08006e29 	.word	0x08006e29
 8006d70:	08006e29 	.word	0x08006e29
 8006d74:	08006e29 	.word	0x08006e29
 8006d78:	08006e29 	.word	0x08006e29
 8006d7c:	08006e29 	.word	0x08006e29
 8006d80:	08006e29 	.word	0x08006e29
 8006d84:	08006e29 	.word	0x08006e29
 8006d88:	08006e29 	.word	0x08006e29
 8006d8c:	08006e29 	.word	0x08006e29
 8006d90:	08006e29 	.word	0x08006e29
 8006d94:	08006e29 	.word	0x08006e29
 8006d98:	08006e29 	.word	0x08006e29
 8006d9c:	08006e29 	.word	0x08006e29
 8006da0:	08006e29 	.word	0x08006e29
 8006da4:	08006e29 	.word	0x08006e29
 8006da8:	08006e1b 	.word	0x08006e1b
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	d037      	beq.n	8006e20 <UART_SetConfig+0x6bc>
 8006db0:	e03a      	b.n	8006e28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006db2:	f7fe fc41 	bl	8005638 <HAL_RCCEx_GetD3PCLK1Freq>
 8006db6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006db8:	e03c      	b.n	8006e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe fc50 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc8:	e034      	b.n	8006e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dca:	f107 0318 	add.w	r3, r7, #24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fd9c 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd8:	e02c      	b.n	8006e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <UART_SetConfig+0x69c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d016      	beq.n	8006e14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006de6:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <UART_SetConfig+0x69c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	08db      	lsrs	r3, r3, #3
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	4a07      	ldr	r2, [pc, #28]	; (8006e10 <UART_SetConfig+0x6ac>)
 8006df2:	fa22 f303 	lsr.w	r3, r2, r3
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006df8:	e01c      	b.n	8006e34 <UART_SetConfig+0x6d0>
 8006dfa:	bf00      	nop
 8006dfc:	40011400 	.word	0x40011400
 8006e00:	58024400 	.word	0x58024400
 8006e04:	40007800 	.word	0x40007800
 8006e08:	40007c00 	.word	0x40007c00
 8006e0c:	58000c00 	.word	0x58000c00
 8006e10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006e14:	4b9d      	ldr	r3, [pc, #628]	; (800708c <UART_SetConfig+0x928>)
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e18:	e00c      	b.n	8006e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e1a:	4b9d      	ldr	r3, [pc, #628]	; (8007090 <UART_SetConfig+0x92c>)
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e1e:	e009      	b.n	8006e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e26:	e005      	b.n	8006e34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 81de 	beq.w	80071f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	4a94      	ldr	r2, [pc, #592]	; (8007094 <UART_SetConfig+0x930>)
 8006e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e46:	461a      	mov	r2, r3
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	4413      	add	r3, r2
 8006e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d305      	bcc.n	8006e6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d903      	bls.n	8006e74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e72:	e1c1      	b.n	80071f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e76:	2200      	movs	r2, #0
 8006e78:	60bb      	str	r3, [r7, #8]
 8006e7a:	60fa      	str	r2, [r7, #12]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	4a84      	ldr	r2, [pc, #528]	; (8007094 <UART_SetConfig+0x930>)
 8006e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2200      	movs	r2, #0
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e96:	f7f9 fa23 	bl	80002e0 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	020b      	lsls	r3, r1, #8
 8006eac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006eb0:	0202      	lsls	r2, r0, #8
 8006eb2:	6979      	ldr	r1, [r7, #20]
 8006eb4:	6849      	ldr	r1, [r1, #4]
 8006eb6:	0849      	lsrs	r1, r1, #1
 8006eb8:	2000      	movs	r0, #0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	eb12 0804 	adds.w	r8, r2, r4
 8006ec2:	eb43 0905 	adc.w	r9, r3, r5
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	469a      	mov	sl, r3
 8006ece:	4693      	mov	fp, r2
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	465b      	mov	r3, fp
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	f7f9 fa02 	bl	80002e0 <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eea:	d308      	bcc.n	8006efe <UART_SetConfig+0x79a>
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef2:	d204      	bcs.n	8006efe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	e17c      	b.n	80071f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f04:	e178      	b.n	80071f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0e:	f040 80c5 	bne.w	800709c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006f12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	dc48      	bgt.n	8006fac <UART_SetConfig+0x848>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db7b      	blt.n	8007016 <UART_SetConfig+0x8b2>
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d879      	bhi.n	8007016 <UART_SetConfig+0x8b2>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <UART_SetConfig+0x7c4>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006fb3 	.word	0x08006fb3
 8006f2c:	08006fbb 	.word	0x08006fbb
 8006f30:	08007017 	.word	0x08007017
 8006f34:	08007017 	.word	0x08007017
 8006f38:	08006fc3 	.word	0x08006fc3
 8006f3c:	08007017 	.word	0x08007017
 8006f40:	08007017 	.word	0x08007017
 8006f44:	08007017 	.word	0x08007017
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08007017 	.word	0x08007017
 8006f50:	08007017 	.word	0x08007017
 8006f54:	08007017 	.word	0x08007017
 8006f58:	08007017 	.word	0x08007017
 8006f5c:	08007017 	.word	0x08007017
 8006f60:	08007017 	.word	0x08007017
 8006f64:	08007017 	.word	0x08007017
 8006f68:	08006fe3 	.word	0x08006fe3
 8006f6c:	08007017 	.word	0x08007017
 8006f70:	08007017 	.word	0x08007017
 8006f74:	08007017 	.word	0x08007017
 8006f78:	08007017 	.word	0x08007017
 8006f7c:	08007017 	.word	0x08007017
 8006f80:	08007017 	.word	0x08007017
 8006f84:	08007017 	.word	0x08007017
 8006f88:	08007017 	.word	0x08007017
 8006f8c:	08007017 	.word	0x08007017
 8006f90:	08007017 	.word	0x08007017
 8006f94:	08007017 	.word	0x08007017
 8006f98:	08007017 	.word	0x08007017
 8006f9c:	08007017 	.word	0x08007017
 8006fa0:	08007017 	.word	0x08007017
 8006fa4:	08007017 	.word	0x08007017
 8006fa8:	08007009 	.word	0x08007009
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	d02e      	beq.n	800700e <UART_SetConfig+0x8aa>
 8006fb0:	e031      	b.n	8007016 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb2:	f7fd f8c9 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8006fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fb8:	e033      	b.n	8007022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fba:	f7fd f8db 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8006fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fc0:	e02f      	b.n	8007022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fb4c 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd0:	e027      	b.n	8007022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd2:	f107 0318 	add.w	r3, r7, #24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fc98 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe0:	e01f      	b.n	8007022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe2:	4b2d      	ldr	r3, [pc, #180]	; (8007098 <UART_SetConfig+0x934>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fee:	4b2a      	ldr	r3, [pc, #168]	; (8007098 <UART_SetConfig+0x934>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	08db      	lsrs	r3, r3, #3
 8006ff4:	f003 0303 	and.w	r3, r3, #3
 8006ff8:	4a24      	ldr	r2, [pc, #144]	; (800708c <UART_SetConfig+0x928>)
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007000:	e00f      	b.n	8007022 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007002:	4b22      	ldr	r3, [pc, #136]	; (800708c <UART_SetConfig+0x928>)
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007006:	e00c      	b.n	8007022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007008:	4b21      	ldr	r3, [pc, #132]	; (8007090 <UART_SetConfig+0x92c>)
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800700c:	e009      	b.n	8007022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007014:	e005      	b.n	8007022 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80e7 	beq.w	80071f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	4a19      	ldr	r2, [pc, #100]	; (8007094 <UART_SetConfig+0x930>)
 8007030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007034:	461a      	mov	r2, r3
 8007036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007038:	fbb3 f3f2 	udiv	r3, r3, r2
 800703c:	005a      	lsls	r2, r3, #1
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	441a      	add	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	2b0f      	cmp	r3, #15
 8007054:	d916      	bls.n	8007084 <UART_SetConfig+0x920>
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d212      	bcs.n	8007084 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	b29b      	uxth	r3, r3
 8007062:	f023 030f 	bic.w	r3, r3, #15
 8007066:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	b29a      	uxth	r2, r3
 8007074:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007076:	4313      	orrs	r3, r2
 8007078:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	e0b9      	b.n	80071f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800708a:	e0b5      	b.n	80071f8 <UART_SetConfig+0xa94>
 800708c:	03d09000 	.word	0x03d09000
 8007090:	003d0900 	.word	0x003d0900
 8007094:	08009250 	.word	0x08009250
 8007098:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800709c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	dc49      	bgt.n	8007138 <UART_SetConfig+0x9d4>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	db7c      	blt.n	80071a2 <UART_SetConfig+0xa3e>
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d87a      	bhi.n	80071a2 <UART_SetConfig+0xa3e>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x950>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	0800713f 	.word	0x0800713f
 80070b8:	08007147 	.word	0x08007147
 80070bc:	080071a3 	.word	0x080071a3
 80070c0:	080071a3 	.word	0x080071a3
 80070c4:	0800714f 	.word	0x0800714f
 80070c8:	080071a3 	.word	0x080071a3
 80070cc:	080071a3 	.word	0x080071a3
 80070d0:	080071a3 	.word	0x080071a3
 80070d4:	0800715f 	.word	0x0800715f
 80070d8:	080071a3 	.word	0x080071a3
 80070dc:	080071a3 	.word	0x080071a3
 80070e0:	080071a3 	.word	0x080071a3
 80070e4:	080071a3 	.word	0x080071a3
 80070e8:	080071a3 	.word	0x080071a3
 80070ec:	080071a3 	.word	0x080071a3
 80070f0:	080071a3 	.word	0x080071a3
 80070f4:	0800716f 	.word	0x0800716f
 80070f8:	080071a3 	.word	0x080071a3
 80070fc:	080071a3 	.word	0x080071a3
 8007100:	080071a3 	.word	0x080071a3
 8007104:	080071a3 	.word	0x080071a3
 8007108:	080071a3 	.word	0x080071a3
 800710c:	080071a3 	.word	0x080071a3
 8007110:	080071a3 	.word	0x080071a3
 8007114:	080071a3 	.word	0x080071a3
 8007118:	080071a3 	.word	0x080071a3
 800711c:	080071a3 	.word	0x080071a3
 8007120:	080071a3 	.word	0x080071a3
 8007124:	080071a3 	.word	0x080071a3
 8007128:	080071a3 	.word	0x080071a3
 800712c:	080071a3 	.word	0x080071a3
 8007130:	080071a3 	.word	0x080071a3
 8007134:	08007195 	.word	0x08007195
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	d02e      	beq.n	800719a <UART_SetConfig+0xa36>
 800713c:	e031      	b.n	80071a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800713e:	f7fd f803 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8007142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007144:	e033      	b.n	80071ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007146:	f7fd f815 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 800714a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800714c:	e02f      	b.n	80071ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fa86 	bl	8005664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800715c:	e027      	b.n	80071ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800715e:	f107 0318 	add.w	r3, r7, #24
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fbd2 	bl	800590c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800716c:	e01f      	b.n	80071ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716e:	4b2d      	ldr	r3, [pc, #180]	; (8007224 <UART_SetConfig+0xac0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800717a:	4b2a      	ldr	r3, [pc, #168]	; (8007224 <UART_SetConfig+0xac0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	08db      	lsrs	r3, r3, #3
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	4a28      	ldr	r2, [pc, #160]	; (8007228 <UART_SetConfig+0xac4>)
 8007186:	fa22 f303 	lsr.w	r3, r2, r3
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800718c:	e00f      	b.n	80071ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800718e:	4b26      	ldr	r3, [pc, #152]	; (8007228 <UART_SetConfig+0xac4>)
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007192:	e00c      	b.n	80071ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007194:	4b25      	ldr	r3, [pc, #148]	; (800722c <UART_SetConfig+0xac8>)
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007198:	e009      	b.n	80071ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a0:	e005      	b.n	80071ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071ac:	bf00      	nop
    }

    if (pclk != 0U)
 80071ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d021      	beq.n	80071f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	4a1d      	ldr	r2, [pc, #116]	; (8007230 <UART_SetConfig+0xacc>)
 80071ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071be:	461a      	mov	r2, r3
 80071c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	441a      	add	r2, r3
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	2b0f      	cmp	r3, #15
 80071dc:	d909      	bls.n	80071f2 <UART_SetConfig+0xa8e>
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e4:	d205      	bcs.n	80071f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60da      	str	r2, [r3, #12]
 80071f0:	e002      	b.n	80071f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2201      	movs	r2, #1
 8007204:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2200      	movs	r2, #0
 8007212:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007214:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007218:	4618      	mov	r0, r3
 800721a:	3748      	adds	r7, #72	; 0x48
 800721c:	46bd      	mov	sp, r7
 800721e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007222:	bf00      	nop
 8007224:	58024400 	.word	0x58024400
 8007228:	03d09000 	.word	0x03d09000
 800722c:	003d0900 	.word	0x003d0900
 8007230:	08009250 	.word	0x08009250

08007234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01a      	beq.n	800734a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007332:	d10a      	bne.n	800734a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b098      	sub	sp, #96	; 0x60
 800737c:	af02      	add	r7, sp, #8
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007388:	f7fa fde0 	bl	8001f4c <HAL_GetTick>
 800738c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b08      	cmp	r3, #8
 800739a:	d12f      	bne.n	80073fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800739c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a4:	2200      	movs	r2, #0
 80073a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f88e 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d022      	beq.n	80073fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ca:	653b      	str	r3, [r7, #80]	; 0x50
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d4:	647b      	str	r3, [r7, #68]	; 0x44
 80073d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e063      	b.n	80074c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b04      	cmp	r3, #4
 8007408:	d149      	bne.n	800749e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800740a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007412:	2200      	movs	r2, #0
 8007414:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f857 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d03c      	beq.n	800749e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	623b      	str	r3, [r7, #32]
   return(result);
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007442:	633b      	str	r3, [r7, #48]	; 0x30
 8007444:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e6      	bne.n	8007424 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	60fb      	str	r3, [r7, #12]
   return(result);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	64bb      	str	r3, [r7, #72]	; 0x48
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007476:	61fa      	str	r2, [r7, #28]
 8007478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	69b9      	ldr	r1, [r7, #24]
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	617b      	str	r3, [r7, #20]
   return(result);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e012      	b.n	80074c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3758      	adds	r7, #88	; 0x58
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074dc:	e04f      	b.n	800757e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d04b      	beq.n	800757e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e6:	f7fa fd31 	bl	8001f4c <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d302      	bcc.n	80074fc <UART_WaitOnFlagUntilTimeout+0x30>
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e04e      	b.n	800759e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d037      	beq.n	800757e <UART_WaitOnFlagUntilTimeout+0xb2>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d034      	beq.n	800757e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d031      	beq.n	800757e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b08      	cmp	r3, #8
 8007526:	d110      	bne.n	800754a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2208      	movs	r2, #8
 800752e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f839 	bl	80075a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2208      	movs	r2, #8
 800753a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e029      	b.n	800759e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007558:	d111      	bne.n	800757e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f81f 	bl	80075a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e00f      	b.n	800759e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69da      	ldr	r2, [r3, #28]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	429a      	cmp	r2, r3
 800759a:	d0a0      	beq.n	80074de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b095      	sub	sp, #84	; 0x54
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ce:	643b      	str	r3, [r7, #64]	; 0x40
 80075d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e6      	bne.n	80075b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <UART_EndRxTransfer+0xc8>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e5      	bne.n	80075e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d118      	bne.n	8007650 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	60bb      	str	r3, [r7, #8]
   return(result);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f023 0310 	bic.w	r3, r3, #16
 8007632:	647b      	str	r3, [r7, #68]	; 0x44
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6979      	ldr	r1, [r7, #20]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	613b      	str	r3, [r7, #16]
   return(result);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007664:	bf00      	nop
 8007666:	3754      	adds	r7, #84	; 0x54
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	effffffe 	.word	0xeffffffe

08007674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_UARTEx_DisableFifoMode+0x16>
 8007686:	2302      	movs	r3, #2
 8007688:	e027      	b.n	80076da <HAL_UARTEx_DisableFifoMode+0x66>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2224      	movs	r2, #36	; 0x24
 8007696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e02d      	b.n	800775a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2224      	movs	r2, #36	; 0x24
 800770a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0201 	bic.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f850 	bl	80077e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007776:	2302      	movs	r3, #2
 8007778:	e02d      	b.n	80077d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2224      	movs	r2, #36	; 0x24
 8007786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0201 	bic.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f812 	bl	80077e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d108      	bne.n	8007802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007800:	e031      	b.n	8007866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007802:	2310      	movs	r3, #16
 8007804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007806:	2310      	movs	r3, #16
 8007808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	0e5b      	lsrs	r3, r3, #25
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	0f5b      	lsrs	r3, r3, #29
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	7b3a      	ldrb	r2, [r7, #12]
 800782e:	4911      	ldr	r1, [pc, #68]	; (8007874 <UARTEx_SetNbDataToProcess+0x94>)
 8007830:	5c8a      	ldrb	r2, [r1, r2]
 8007832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007836:	7b3a      	ldrb	r2, [r7, #12]
 8007838:	490f      	ldr	r1, [pc, #60]	; (8007878 <UARTEx_SetNbDataToProcess+0x98>)
 800783a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007840:	b29a      	uxth	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	7b7a      	ldrb	r2, [r7, #13]
 800784c:	4909      	ldr	r1, [pc, #36]	; (8007874 <UARTEx_SetNbDataToProcess+0x94>)
 800784e:	5c8a      	ldrb	r2, [r1, r2]
 8007850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007854:	7b7a      	ldrb	r2, [r7, #13]
 8007856:	4908      	ldr	r1, [pc, #32]	; (8007878 <UARTEx_SetNbDataToProcess+0x98>)
 8007858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800785a:	fb93 f3f2 	sdiv	r3, r3, r2
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	08009268 	.word	0x08009268
 8007878:	08009270 	.word	0x08009270

0800787c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800788a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800788e:	2b84      	cmp	r3, #132	; 0x84
 8007890:	d005      	beq.n	800789e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007892:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	3303      	adds	r3, #3
 800789c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800789e:	68fb      	ldr	r3, [r7, #12]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078b0:	f000 faf6 	bl	8007ea0 <vTaskStartScheduler>
  
  return osOK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	bd80      	pop	{r7, pc}

080078ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078bc:	b089      	sub	sp, #36	; 0x24
 80078be:	af04      	add	r7, sp, #16
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d020      	beq.n	800790e <osThreadCreate+0x54>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01c      	beq.n	800790e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685c      	ldr	r4, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681d      	ldr	r5, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691e      	ldr	r6, [r3, #16]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff ffc8 	bl	800787c <makeFreeRtosPriority>
 80078ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078f6:	9202      	str	r2, [sp, #8]
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	9100      	str	r1, [sp, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	4632      	mov	r2, r6
 8007900:	4629      	mov	r1, r5
 8007902:	4620      	mov	r0, r4
 8007904:	f000 f8ed 	bl	8007ae2 <xTaskCreateStatic>
 8007908:	4603      	mov	r3, r0
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e01c      	b.n	8007948 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685c      	ldr	r4, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800791a:	b29e      	uxth	r6, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff ffaa 	bl	800787c <makeFreeRtosPriority>
 8007928:	4602      	mov	r2, r0
 800792a:	f107 030c 	add.w	r3, r7, #12
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	9200      	str	r2, [sp, #0]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	4632      	mov	r2, r6
 8007936:	4629      	mov	r1, r5
 8007938:	4620      	mov	r0, r4
 800793a:	f000 f92f 	bl	8007b9c <xTaskCreate>
 800793e:	4603      	mov	r3, r0
 8007940:	2b01      	cmp	r3, #1
 8007942:	d001      	beq.n	8007948 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007948:	68fb      	ldr	r3, [r7, #12]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007952 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <osDelay+0x16>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	e000      	b.n	800796a <osDelay+0x18>
 8007968:	2301      	movs	r3, #1
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fa64 	bl	8007e38 <vTaskDelay>
  
  return osOK;
 8007970:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f103 0208 	add.w	r2, r3, #8
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f04f 32ff 	mov.w	r2, #4294967295
 8007992:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f103 0208 	add.w	r2, r3, #8
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f103 0208 	add.w	r2, r3, #8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a32:	d103      	bne.n	8007a3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	e00c      	b.n	8007a56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	e002      	b.n	8007a4a <vListInsert+0x2e>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d2f6      	bcs.n	8007a44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	601a      	str	r2, [r3, #0]
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6892      	ldr	r2, [r2, #8]
 8007aa4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6852      	ldr	r2, [r2, #4]
 8007aae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d103      	bne.n	8007ac2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	1e5a      	subs	r2, r3, #1
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b08e      	sub	sp, #56	; 0x38
 8007ae6:	af04      	add	r7, sp, #16
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <xTaskCreateStatic+0x46>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	61fb      	str	r3, [r7, #28]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b28:	23b4      	movs	r3, #180	; 0xb4
 8007b2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2bb4      	cmp	r3, #180	; 0xb4
 8007b30:	d00a      	beq.n	8007b48 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	61bb      	str	r3, [r7, #24]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01e      	beq.n	8007b8e <xTaskCreateStatic+0xac>
 8007b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d01b      	beq.n	8007b8e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9303      	str	r3, [sp, #12]
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	9302      	str	r3, [sp, #8]
 8007b70:	f107 0314 	add.w	r3, r7, #20
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f851 	bl	8007c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b88:	f000 f8ec 	bl	8007d64 <prvAddNewTaskToReadyList>
 8007b8c:	e001      	b.n	8007b92 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b92:	697b      	ldr	r3, [r7, #20]
	}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3728      	adds	r7, #40	; 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08c      	sub	sp, #48	; 0x30
 8007ba0:	af04      	add	r7, sp, #16
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fef1 	bl	8008998 <pvPortMalloc>
 8007bb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bbe:	20b4      	movs	r0, #180	; 0xb4
 8007bc0:	f000 feea 	bl	8008998 <pvPortMalloc>
 8007bc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8007bd2:	e005      	b.n	8007be0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bd4:	6978      	ldr	r0, [r7, #20]
 8007bd6:	f000 ffab 	bl	8008b30 <vPortFree>
 8007bda:	e001      	b.n	8007be0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d017      	beq.n	8007c16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bee:	88fa      	ldrh	r2, [r7, #6]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	9303      	str	r3, [sp, #12]
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	9302      	str	r3, [sp, #8]
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f80f 	bl	8007c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c0a:	69f8      	ldr	r0, [r7, #28]
 8007c0c:	f000 f8aa 	bl	8007d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c10:	2301      	movs	r3, #1
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	e002      	b.n	8007c1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3720      	adds	r7, #32
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c40:	440b      	add	r3, r1
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	f023 0307 	bic.w	r3, r3, #7
 8007c4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	617b      	str	r3, [r7, #20]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d01f      	beq.n	8007cb6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e012      	b.n	8007ca2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	7819      	ldrb	r1, [r3, #0]
 8007c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	3334      	adds	r3, #52	; 0x34
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d006      	beq.n	8007caa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	61fb      	str	r3, [r7, #28]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	2b0f      	cmp	r3, #15
 8007ca6:	d9e9      	bls.n	8007c7c <prvInitialiseNewTask+0x54>
 8007ca8:	e000      	b.n	8007cac <prvInitialiseNewTask+0x84>
			{
				break;
 8007caa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cb4:	e003      	b.n	8007cbe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	2b06      	cmp	r3, #6
 8007cc2:	d901      	bls.n	8007cc8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cc4:	2306      	movs	r3, #6
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ccc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fe6b 	bl	80079ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fe66 	bl	80079ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	f1c3 0207 	rsb	r2, r3, #7
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	334c      	adds	r3, #76	; 0x4c
 8007d18:	2260      	movs	r2, #96	; 0x60
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f859 	bl	8008dd4 <memset>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	4a0c      	ldr	r2, [pc, #48]	; (8007d58 <prvInitialiseNewTask+0x130>)
 8007d26:	651a      	str	r2, [r3, #80]	; 0x50
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	4a0c      	ldr	r2, [pc, #48]	; (8007d5c <prvInitialiseNewTask+0x134>)
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	4a0b      	ldr	r2, [pc, #44]	; (8007d60 <prvInitialiseNewTask+0x138>)
 8007d32:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	69b8      	ldr	r0, [r7, #24]
 8007d3a:	f000 fc1f 	bl	800857c <pxPortInitialiseStack>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d50:	bf00      	nop
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	08009298 	.word	0x08009298
 8007d5c:	080092b8 	.word	0x080092b8
 8007d60:	08009278 	.word	0x08009278

08007d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d6c:	f000 fd32 	bl	80087d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d70:	4b2a      	ldr	r3, [pc, #168]	; (8007e1c <prvAddNewTaskToReadyList+0xb8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a29      	ldr	r2, [pc, #164]	; (8007e1c <prvAddNewTaskToReadyList+0xb8>)
 8007d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d7a:	4b29      	ldr	r3, [pc, #164]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d82:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d88:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <prvAddNewTaskToReadyList+0xb8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d110      	bne.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d90:	f000 facc 	bl	800832c <prvInitialiseTaskLists>
 8007d94:	e00d      	b.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d96:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <prvAddNewTaskToReadyList+0xc0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d109      	bne.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d802      	bhi.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dac:	4a1c      	ldr	r2, [pc, #112]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <prvAddNewTaskToReadyList+0xc4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3301      	adds	r3, #1
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <prvAddNewTaskToReadyList+0xc4>)
 8007dba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <prvAddNewTaskToReadyList+0xc8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	4a18      	ldr	r2, [pc, #96]	; (8007e2c <prvAddNewTaskToReadyList+0xc8>)
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <prvAddNewTaskToReadyList+0xcc>)
 8007ddc:	441a      	add	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f7ff fdf5 	bl	80079d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dea:	f000 fd23 	bl	8008834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <prvAddNewTaskToReadyList+0xc0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00e      	beq.n	8007e14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007df6:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d207      	bcs.n	8007e14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <prvAddNewTaskToReadyList+0xd0>)
 8007e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	24000770 	.word	0x24000770
 8007e20:	24000670 	.word	0x24000670
 8007e24:	2400077c 	.word	0x2400077c
 8007e28:	2400078c 	.word	0x2400078c
 8007e2c:	24000778 	.word	0x24000778
 8007e30:	24000674 	.word	0x24000674
 8007e34:	e000ed04 	.word	0xe000ed04

08007e38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d017      	beq.n	8007e7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <vTaskDelay+0x60>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <vTaskDelay+0x30>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60bb      	str	r3, [r7, #8]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e68:	f000 f884 	bl	8007f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fb1e 	bl	80084b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e74:	f000 f88c 	bl	8007f90 <xTaskResumeAll>
 8007e78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d107      	bne.n	8007e90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <vTaskDelay+0x64>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	24000798 	.word	0x24000798
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08a      	sub	sp, #40	; 0x28
 8007ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eae:	463a      	mov	r2, r7
 8007eb0:	1d39      	adds	r1, r7, #4
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7f9 f90a 	bl	80010d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	9202      	str	r2, [sp, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	460a      	mov	r2, r1
 8007ece:	4921      	ldr	r1, [pc, #132]	; (8007f54 <vTaskStartScheduler+0xb4>)
 8007ed0:	4821      	ldr	r0, [pc, #132]	; (8007f58 <vTaskStartScheduler+0xb8>)
 8007ed2:	f7ff fe06 	bl	8007ae2 <xTaskCreateStatic>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4a20      	ldr	r2, [pc, #128]	; (8007f5c <vTaskStartScheduler+0xbc>)
 8007eda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007edc:	4b1f      	ldr	r3, [pc, #124]	; (8007f5c <vTaskStartScheduler+0xbc>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e001      	b.n	8007eee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d11b      	bne.n	8007f2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	613b      	str	r3, [r7, #16]
}
 8007f06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <vTaskStartScheduler+0xc0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	334c      	adds	r3, #76	; 0x4c
 8007f0e:	4a15      	ldr	r2, [pc, #84]	; (8007f64 <vTaskStartScheduler+0xc4>)
 8007f10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <vTaskStartScheduler+0xc8>)
 8007f14:	f04f 32ff 	mov.w	r2, #4294967295
 8007f18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <vTaskStartScheduler+0xcc>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f20:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <vTaskStartScheduler+0xd0>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f26:	f000 fbb3 	bl	8008690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f2a:	e00e      	b.n	8007f4a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d10a      	bne.n	8007f4a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	60fb      	str	r3, [r7, #12]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <vTaskStartScheduler+0xa8>
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	08009238 	.word	0x08009238
 8007f58:	080082fd 	.word	0x080082fd
 8007f5c:	24000794 	.word	0x24000794
 8007f60:	24000670 	.word	0x24000670
 8007f64:	24000014 	.word	0x24000014
 8007f68:	24000790 	.word	0x24000790
 8007f6c:	2400077c 	.word	0x2400077c
 8007f70:	24000774 	.word	0x24000774

08007f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <vTaskSuspendAll+0x18>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	4a03      	ldr	r2, [pc, #12]	; (8007f8c <vTaskSuspendAll+0x18>)
 8007f80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f82:	bf00      	nop
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	24000798 	.word	0x24000798

08007f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f9e:	4b41      	ldr	r3, [pc, #260]	; (80080a4 <xTaskResumeAll+0x114>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <xTaskResumeAll+0x2c>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	603b      	str	r3, [r7, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fbc:	f000 fc0a 	bl	80087d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fc0:	4b38      	ldr	r3, [pc, #224]	; (80080a4 <xTaskResumeAll+0x114>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a37      	ldr	r2, [pc, #220]	; (80080a4 <xTaskResumeAll+0x114>)
 8007fc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fca:	4b36      	ldr	r3, [pc, #216]	; (80080a4 <xTaskResumeAll+0x114>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d161      	bne.n	8008096 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fd2:	4b35      	ldr	r3, [pc, #212]	; (80080a8 <xTaskResumeAll+0x118>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d05d      	beq.n	8008096 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fda:	e02e      	b.n	800803a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fdc:	4b33      	ldr	r3, [pc, #204]	; (80080ac <xTaskResumeAll+0x11c>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3318      	adds	r3, #24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff fd50 	bl	8007a8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff fd4b 	bl	8007a8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	409a      	lsls	r2, r3
 8008000:	4b2b      	ldr	r3, [pc, #172]	; (80080b0 <xTaskResumeAll+0x120>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4313      	orrs	r3, r2
 8008006:	4a2a      	ldr	r2, [pc, #168]	; (80080b0 <xTaskResumeAll+0x120>)
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4a27      	ldr	r2, [pc, #156]	; (80080b4 <xTaskResumeAll+0x124>)
 8008018:	441a      	add	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7ff fcd7 	bl	80079d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802a:	4b23      	ldr	r3, [pc, #140]	; (80080b8 <xTaskResumeAll+0x128>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	429a      	cmp	r2, r3
 8008032:	d302      	bcc.n	800803a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008034:	4b21      	ldr	r3, [pc, #132]	; (80080bc <xTaskResumeAll+0x12c>)
 8008036:	2201      	movs	r2, #1
 8008038:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800803a:	4b1c      	ldr	r3, [pc, #112]	; (80080ac <xTaskResumeAll+0x11c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1cc      	bne.n	8007fdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008048:	f000 fa12 	bl	8008470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800804c:	4b1c      	ldr	r3, [pc, #112]	; (80080c0 <xTaskResumeAll+0x130>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d010      	beq.n	800807a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008058:	f000 f836 	bl	80080c8 <xTaskIncrementTick>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008062:	4b16      	ldr	r3, [pc, #88]	; (80080bc <xTaskResumeAll+0x12c>)
 8008064:	2201      	movs	r2, #1
 8008066:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3b01      	subs	r3, #1
 800806c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1f1      	bne.n	8008058 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008074:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <xTaskResumeAll+0x130>)
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800807a:	4b10      	ldr	r3, [pc, #64]	; (80080bc <xTaskResumeAll+0x12c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008082:	2301      	movs	r3, #1
 8008084:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008086:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <xTaskResumeAll+0x134>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008096:	f000 fbcd 	bl	8008834 <vPortExitCritical>

	return xAlreadyYielded;
 800809a:	68bb      	ldr	r3, [r7, #8]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	24000798 	.word	0x24000798
 80080a8:	24000770 	.word	0x24000770
 80080ac:	24000730 	.word	0x24000730
 80080b0:	24000778 	.word	0x24000778
 80080b4:	24000674 	.word	0x24000674
 80080b8:	24000670 	.word	0x24000670
 80080bc:	24000784 	.word	0x24000784
 80080c0:	24000780 	.word	0x24000780
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080d2:	4b4e      	ldr	r3, [pc, #312]	; (800820c <xTaskIncrementTick+0x144>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f040 808e 	bne.w	80081f8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080dc:	4b4c      	ldr	r3, [pc, #304]	; (8008210 <xTaskIncrementTick+0x148>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3301      	adds	r3, #1
 80080e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080e4:	4a4a      	ldr	r2, [pc, #296]	; (8008210 <xTaskIncrementTick+0x148>)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d120      	bne.n	8008132 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080f0:	4b48      	ldr	r3, [pc, #288]	; (8008214 <xTaskIncrementTick+0x14c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <xTaskIncrementTick+0x48>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	603b      	str	r3, [r7, #0]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <xTaskIncrementTick+0x46>
 8008110:	4b40      	ldr	r3, [pc, #256]	; (8008214 <xTaskIncrementTick+0x14c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	4b40      	ldr	r3, [pc, #256]	; (8008218 <xTaskIncrementTick+0x150>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a3e      	ldr	r2, [pc, #248]	; (8008214 <xTaskIncrementTick+0x14c>)
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4a3e      	ldr	r2, [pc, #248]	; (8008218 <xTaskIncrementTick+0x150>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	4b3d      	ldr	r3, [pc, #244]	; (800821c <xTaskIncrementTick+0x154>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3301      	adds	r3, #1
 800812a:	4a3c      	ldr	r2, [pc, #240]	; (800821c <xTaskIncrementTick+0x154>)
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	f000 f99f 	bl	8008470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008132:	4b3b      	ldr	r3, [pc, #236]	; (8008220 <xTaskIncrementTick+0x158>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	429a      	cmp	r2, r3
 800813a:	d348      	bcc.n	80081ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800813c:	4b35      	ldr	r3, [pc, #212]	; (8008214 <xTaskIncrementTick+0x14c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008146:	4b36      	ldr	r3, [pc, #216]	; (8008220 <xTaskIncrementTick+0x158>)
 8008148:	f04f 32ff 	mov.w	r2, #4294967295
 800814c:	601a      	str	r2, [r3, #0]
					break;
 800814e:	e03e      	b.n	80081ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008150:	4b30      	ldr	r3, [pc, #192]	; (8008214 <xTaskIncrementTick+0x14c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d203      	bcs.n	8008170 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008168:	4a2d      	ldr	r2, [pc, #180]	; (8008220 <xTaskIncrementTick+0x158>)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800816e:	e02e      	b.n	80081ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3304      	adds	r3, #4
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fc8a 	bl	8007a8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	3318      	adds	r3, #24
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fc81 	bl	8007a8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	2201      	movs	r2, #1
 8008192:	409a      	lsls	r2, r3
 8008194:	4b23      	ldr	r3, [pc, #140]	; (8008224 <xTaskIncrementTick+0x15c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4313      	orrs	r3, r2
 800819a:	4a22      	ldr	r2, [pc, #136]	; (8008224 <xTaskIncrementTick+0x15c>)
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4a1f      	ldr	r2, [pc, #124]	; (8008228 <xTaskIncrementTick+0x160>)
 80081ac:	441a      	add	r2, r3
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7ff fc0d 	bl	80079d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081be:	4b1b      	ldr	r3, [pc, #108]	; (800822c <xTaskIncrementTick+0x164>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d3b9      	bcc.n	800813c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081cc:	e7b6      	b.n	800813c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081ce:	4b17      	ldr	r3, [pc, #92]	; (800822c <xTaskIncrementTick+0x164>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d4:	4914      	ldr	r1, [pc, #80]	; (8008228 <xTaskIncrementTick+0x160>)
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	440b      	add	r3, r1
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d901      	bls.n	80081ea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80081e6:	2301      	movs	r3, #1
 80081e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80081ea:	4b11      	ldr	r3, [pc, #68]	; (8008230 <xTaskIncrementTick+0x168>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80081f2:	2301      	movs	r3, #1
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e004      	b.n	8008202 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <xTaskIncrementTick+0x16c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	4a0d      	ldr	r2, [pc, #52]	; (8008234 <xTaskIncrementTick+0x16c>)
 8008200:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008202:	697b      	ldr	r3, [r7, #20]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	24000798 	.word	0x24000798
 8008210:	24000774 	.word	0x24000774
 8008214:	24000728 	.word	0x24000728
 8008218:	2400072c 	.word	0x2400072c
 800821c:	24000788 	.word	0x24000788
 8008220:	24000790 	.word	0x24000790
 8008224:	24000778 	.word	0x24000778
 8008228:	24000674 	.word	0x24000674
 800822c:	24000670 	.word	0x24000670
 8008230:	24000784 	.word	0x24000784
 8008234:	24000780 	.word	0x24000780

08008238 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800823e:	4b29      	ldr	r3, [pc, #164]	; (80082e4 <vTaskSwitchContext+0xac>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008246:	4b28      	ldr	r3, [pc, #160]	; (80082e8 <vTaskSwitchContext+0xb0>)
 8008248:	2201      	movs	r2, #1
 800824a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800824c:	e044      	b.n	80082d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800824e:	4b26      	ldr	r3, [pc, #152]	; (80082e8 <vTaskSwitchContext+0xb0>)
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008254:	4b25      	ldr	r3, [pc, #148]	; (80082ec <vTaskSwitchContext+0xb4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	fab3 f383 	clz	r3, r3
 8008260:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008262:	7afb      	ldrb	r3, [r7, #11]
 8008264:	f1c3 031f 	rsb	r3, r3, #31
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	4921      	ldr	r1, [pc, #132]	; (80082f0 <vTaskSwitchContext+0xb8>)
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <vTaskSwitchContext+0x5c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vTaskSwitchContext+0x5a>
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4a14      	ldr	r2, [pc, #80]	; (80082f0 <vTaskSwitchContext+0xb8>)
 80082a0:	4413      	add	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3308      	adds	r3, #8
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d104      	bne.n	80082c4 <vTaskSwitchContext+0x8c>
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	605a      	str	r2, [r3, #4]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	4a0a      	ldr	r2, [pc, #40]	; (80082f4 <vTaskSwitchContext+0xbc>)
 80082cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082ce:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <vTaskSwitchContext+0xbc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	334c      	adds	r3, #76	; 0x4c
 80082d4:	4a08      	ldr	r2, [pc, #32]	; (80082f8 <vTaskSwitchContext+0xc0>)
 80082d6:	6013      	str	r3, [r2, #0]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	24000798 	.word	0x24000798
 80082e8:	24000784 	.word	0x24000784
 80082ec:	24000778 	.word	0x24000778
 80082f0:	24000674 	.word	0x24000674
 80082f4:	24000670 	.word	0x24000670
 80082f8:	24000014 	.word	0x24000014

080082fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008304:	f000 f852 	bl	80083ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <prvIdleTask+0x28>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d9f9      	bls.n	8008304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008310:	4b05      	ldr	r3, [pc, #20]	; (8008328 <prvIdleTask+0x2c>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008320:	e7f0      	b.n	8008304 <prvIdleTask+0x8>
 8008322:	bf00      	nop
 8008324:	24000674 	.word	0x24000674
 8008328:	e000ed04 	.word	0xe000ed04

0800832c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008332:	2300      	movs	r3, #0
 8008334:	607b      	str	r3, [r7, #4]
 8008336:	e00c      	b.n	8008352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4a12      	ldr	r2, [pc, #72]	; (800838c <prvInitialiseTaskLists+0x60>)
 8008344:	4413      	add	r3, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fb17 	bl	800797a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3301      	adds	r3, #1
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b06      	cmp	r3, #6
 8008356:	d9ef      	bls.n	8008338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008358:	480d      	ldr	r0, [pc, #52]	; (8008390 <prvInitialiseTaskLists+0x64>)
 800835a:	f7ff fb0e 	bl	800797a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800835e:	480d      	ldr	r0, [pc, #52]	; (8008394 <prvInitialiseTaskLists+0x68>)
 8008360:	f7ff fb0b 	bl	800797a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008364:	480c      	ldr	r0, [pc, #48]	; (8008398 <prvInitialiseTaskLists+0x6c>)
 8008366:	f7ff fb08 	bl	800797a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800836a:	480c      	ldr	r0, [pc, #48]	; (800839c <prvInitialiseTaskLists+0x70>)
 800836c:	f7ff fb05 	bl	800797a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008370:	480b      	ldr	r0, [pc, #44]	; (80083a0 <prvInitialiseTaskLists+0x74>)
 8008372:	f7ff fb02 	bl	800797a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008376:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <prvInitialiseTaskLists+0x78>)
 8008378:	4a05      	ldr	r2, [pc, #20]	; (8008390 <prvInitialiseTaskLists+0x64>)
 800837a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <prvInitialiseTaskLists+0x7c>)
 800837e:	4a05      	ldr	r2, [pc, #20]	; (8008394 <prvInitialiseTaskLists+0x68>)
 8008380:	601a      	str	r2, [r3, #0]
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	24000674 	.word	0x24000674
 8008390:	24000700 	.word	0x24000700
 8008394:	24000714 	.word	0x24000714
 8008398:	24000730 	.word	0x24000730
 800839c:	24000744 	.word	0x24000744
 80083a0:	2400075c 	.word	0x2400075c
 80083a4:	24000728 	.word	0x24000728
 80083a8:	2400072c 	.word	0x2400072c

080083ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083b2:	e019      	b.n	80083e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083b4:	f000 fa0e 	bl	80087d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b8:	4b10      	ldr	r3, [pc, #64]	; (80083fc <prvCheckTasksWaitingTermination+0x50>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7ff fb62 	bl	8007a8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083ca:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <prvCheckTasksWaitingTermination+0x54>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <prvCheckTasksWaitingTermination+0x54>)
 80083d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083d4:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <prvCheckTasksWaitingTermination+0x58>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3b01      	subs	r3, #1
 80083da:	4a0a      	ldr	r2, [pc, #40]	; (8008404 <prvCheckTasksWaitingTermination+0x58>)
 80083dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083de:	f000 fa29 	bl	8008834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f810 	bl	8008408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083e8:	4b06      	ldr	r3, [pc, #24]	; (8008404 <prvCheckTasksWaitingTermination+0x58>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e1      	bne.n	80083b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083f0:	bf00      	nop
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	24000744 	.word	0x24000744
 8008400:	24000770 	.word	0x24000770
 8008404:	24000758 	.word	0x24000758

08008408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	334c      	adds	r3, #76	; 0x4c
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fdd3 	bl	8008fc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d108      	bne.n	8008436 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fb81 	bl	8008b30 <vPortFree>
				vPortFree( pxTCB );
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fb7e 	bl	8008b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008434:	e018      	b.n	8008468 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800843c:	2b01      	cmp	r3, #1
 800843e:	d103      	bne.n	8008448 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fb75 	bl	8008b30 <vPortFree>
	}
 8008446:	e00f      	b.n	8008468 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800844e:	2b02      	cmp	r3, #2
 8008450:	d00a      	beq.n	8008468 <prvDeleteTCB+0x60>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	60fb      	str	r3, [r7, #12]
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <prvDeleteTCB+0x5e>
	}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <prvResetNextTaskUnblockTime+0x38>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <prvResetNextTaskUnblockTime+0x3c>)
 8008482:	f04f 32ff 	mov.w	r2, #4294967295
 8008486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008488:	e008      	b.n	800849c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <prvResetNextTaskUnblockTime+0x38>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4a04      	ldr	r2, [pc, #16]	; (80084ac <prvResetNextTaskUnblockTime+0x3c>)
 800849a:	6013      	str	r3, [r2, #0]
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	24000728 	.word	0x24000728
 80084ac:	24000790 	.word	0x24000790

080084b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084ba:	4b29      	ldr	r3, [pc, #164]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fae1 	bl	8007a8e <uxListRemove>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10b      	bne.n	80084ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084d2:	4b24      	ldr	r3, [pc, #144]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	2201      	movs	r2, #1
 80084da:	fa02 f303 	lsl.w	r3, r2, r3
 80084de:	43da      	mvns	r2, r3
 80084e0:	4b21      	ldr	r3, [pc, #132]	; (8008568 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4013      	ands	r3, r2
 80084e6:	4a20      	ldr	r2, [pc, #128]	; (8008568 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d10a      	bne.n	8008508 <prvAddCurrentTaskToDelayedList+0x58>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3304      	adds	r3, #4
 80084fe:	4619      	mov	r1, r3
 8008500:	481a      	ldr	r0, [pc, #104]	; (800856c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008502:	f7ff fa67 	bl	80079d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008506:	e026      	b.n	8008556 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008510:	4b14      	ldr	r3, [pc, #80]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	429a      	cmp	r2, r3
 800851e:	d209      	bcs.n	8008534 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008520:	4b13      	ldr	r3, [pc, #76]	; (8008570 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3304      	adds	r3, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7ff fa75 	bl	8007a1c <vListInsert>
}
 8008532:	e010      	b.n	8008556 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7ff fa6b 	bl	8007a1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	429a      	cmp	r2, r3
 800854e:	d202      	bcs.n	8008556 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008550:	4a09      	ldr	r2, [pc, #36]	; (8008578 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6013      	str	r3, [r2, #0]
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	24000774 	.word	0x24000774
 8008564:	24000670 	.word	0x24000670
 8008568:	24000778 	.word	0x24000778
 800856c:	2400075c 	.word	0x2400075c
 8008570:	2400072c 	.word	0x2400072c
 8008574:	24000728 	.word	0x24000728
 8008578:	24000790 	.word	0x24000790

0800857c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3b04      	subs	r3, #4
 800858c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3b04      	subs	r3, #4
 800859a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f023 0201 	bic.w	r2, r3, #1
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3b04      	subs	r3, #4
 80085aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085ac:	4a0c      	ldr	r2, [pc, #48]	; (80085e0 <pxPortInitialiseStack+0x64>)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3b14      	subs	r3, #20
 80085b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3b04      	subs	r3, #4
 80085c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f06f 0202 	mvn.w	r2, #2
 80085ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3b20      	subs	r3, #32
 80085d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085d2:	68fb      	ldr	r3, [r7, #12]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	080085e5 	.word	0x080085e5

080085e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085ee:	4b12      	ldr	r3, [pc, #72]	; (8008638 <prvTaskExitError+0x54>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d00a      	beq.n	800860e <prvTaskExitError+0x2a>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <prvTaskExitError+0x28>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	60bb      	str	r3, [r7, #8]
}
 8008620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008622:	bf00      	nop
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0fc      	beq.n	8008624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800862a:	bf00      	nop
 800862c:	bf00      	nop
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	24000010 	.word	0x24000010
 800863c:	00000000 	.word	0x00000000

08008640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <pxCurrentTCBConst2>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	6808      	ldr	r0, [r1, #0]
 8008646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	f380 8809 	msr	PSP, r0
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8811 	msr	BASEPRI, r0
 800865a:	4770      	bx	lr
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst2>:
 8008660:	24000670 	.word	0x24000670
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008668:	4808      	ldr	r0, [pc, #32]	; (800868c <prvPortStartFirstTask+0x24>)
 800866a:	6800      	ldr	r0, [r0, #0]
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	f380 8808 	msr	MSP, r0
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8814 	msr	CONTROL, r0
 800867a:	b662      	cpsie	i
 800867c:	b661      	cpsie	f
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	df00      	svc	0
 8008688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800868a:	bf00      	nop
 800868c:	e000ed08 	.word	0xe000ed08

08008690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008696:	4b46      	ldr	r3, [pc, #280]	; (80087b0 <xPortStartScheduler+0x120>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a46      	ldr	r2, [pc, #280]	; (80087b4 <xPortStartScheduler+0x124>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d10a      	bne.n	80086b6 <xPortStartScheduler+0x26>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	613b      	str	r3, [r7, #16]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086b6:	4b3e      	ldr	r3, [pc, #248]	; (80087b0 <xPortStartScheduler+0x120>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a3f      	ldr	r2, [pc, #252]	; (80087b8 <xPortStartScheduler+0x128>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10a      	bne.n	80086d6 <xPortStartScheduler+0x46>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086d6:	4b39      	ldr	r3, [pc, #228]	; (80087bc <xPortStartScheduler+0x12c>)
 80086d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	22ff      	movs	r2, #255	; 0xff
 80086e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	4b31      	ldr	r3, [pc, #196]	; (80087c0 <xPortStartScheduler+0x130>)
 80086fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086fe:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <xPortStartScheduler+0x134>)
 8008700:	2207      	movs	r2, #7
 8008702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008704:	e009      	b.n	800871a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008706:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <xPortStartScheduler+0x134>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3b01      	subs	r3, #1
 800870c:	4a2d      	ldr	r2, [pc, #180]	; (80087c4 <xPortStartScheduler+0x134>)
 800870e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	b2db      	uxtb	r3, r3
 8008718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008722:	2b80      	cmp	r3, #128	; 0x80
 8008724:	d0ef      	beq.n	8008706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008726:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <xPortStartScheduler+0x134>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f1c3 0307 	rsb	r3, r3, #7
 800872e:	2b04      	cmp	r3, #4
 8008730:	d00a      	beq.n	8008748 <xPortStartScheduler+0xb8>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	60bb      	str	r3, [r7, #8]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008748:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <xPortStartScheduler+0x134>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <xPortStartScheduler+0x134>)
 8008750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008752:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <xPortStartScheduler+0x134>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800875a:	4a1a      	ldr	r2, [pc, #104]	; (80087c4 <xPortStartScheduler+0x134>)
 800875c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	b2da      	uxtb	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008766:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <xPortStartScheduler+0x138>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <xPortStartScheduler+0x138>)
 800876c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008772:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <xPortStartScheduler+0x138>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a14      	ldr	r2, [pc, #80]	; (80087c8 <xPortStartScheduler+0x138>)
 8008778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800877c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800877e:	f000 f8dd 	bl	800893c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008782:	4b12      	ldr	r3, [pc, #72]	; (80087cc <xPortStartScheduler+0x13c>)
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008788:	f000 f8fc 	bl	8008984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800878c:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <xPortStartScheduler+0x140>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a0f      	ldr	r2, [pc, #60]	; (80087d0 <xPortStartScheduler+0x140>)
 8008792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008798:	f7ff ff66 	bl	8008668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800879c:	f7ff fd4c 	bl	8008238 <vTaskSwitchContext>
	prvTaskExitError();
 80087a0:	f7ff ff20 	bl	80085e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	e000ed00 	.word	0xe000ed00
 80087b4:	410fc271 	.word	0x410fc271
 80087b8:	410fc270 	.word	0x410fc270
 80087bc:	e000e400 	.word	0xe000e400
 80087c0:	2400079c 	.word	0x2400079c
 80087c4:	240007a0 	.word	0x240007a0
 80087c8:	e000ed20 	.word	0xe000ed20
 80087cc:	24000010 	.word	0x24000010
 80087d0:	e000ef34 	.word	0xe000ef34

080087d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	607b      	str	r3, [r7, #4]
}
 80087ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087ee:	4b0f      	ldr	r3, [pc, #60]	; (800882c <vPortEnterCritical+0x58>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	4a0d      	ldr	r2, [pc, #52]	; (800882c <vPortEnterCritical+0x58>)
 80087f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087f8:	4b0c      	ldr	r3, [pc, #48]	; (800882c <vPortEnterCritical+0x58>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d10f      	bne.n	8008820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <vPortEnterCritical+0x5c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <vPortEnterCritical+0x4c>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	603b      	str	r3, [r7, #0]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <vPortEnterCritical+0x4a>
	}
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	24000010 	.word	0x24000010
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800883a:	4b12      	ldr	r3, [pc, #72]	; (8008884 <vPortExitCritical+0x50>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <vPortExitCritical+0x24>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	607b      	str	r3, [r7, #4]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <vPortExitCritical+0x50>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3b01      	subs	r3, #1
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <vPortExitCritical+0x50>)
 8008860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <vPortExitCritical+0x50>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d105      	bne.n	8008876 <vPortExitCritical+0x42>
 800886a:	2300      	movs	r3, #0
 800886c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	24000010 	.word	0x24000010
	...

08008890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008890:	f3ef 8009 	mrs	r0, PSP
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <pxCurrentTCBConst>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	f01e 0f10 	tst.w	lr, #16
 80088a0:	bf08      	it	eq
 80088a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088aa:	6010      	str	r0, [r2, #0]
 80088ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088b4:	f380 8811 	msr	BASEPRI, r0
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f7ff fcba 	bl	8008238 <vTaskSwitchContext>
 80088c4:	f04f 0000 	mov.w	r0, #0
 80088c8:	f380 8811 	msr	BASEPRI, r0
 80088cc:	bc09      	pop	{r0, r3}
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	6808      	ldr	r0, [r1, #0]
 80088d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d6:	f01e 0f10 	tst.w	lr, #16
 80088da:	bf08      	it	eq
 80088dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088e0:	f380 8809 	msr	PSP, r0
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	f3af 8000 	nop.w

080088f0 <pxCurrentTCBConst>:
 80088f0:	24000670 	.word	0x24000670
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop

080088f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	607b      	str	r3, [r7, #4]
}
 8008910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008912:	f7ff fbd9 	bl	80080c8 <xTaskIncrementTick>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800891c:	4b06      	ldr	r3, [pc, #24]	; (8008938 <SysTick_Handler+0x40>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	f383 8811 	msr	BASEPRI, r3
}
 800892e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	e000ed04 	.word	0xe000ed04

0800893c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008940:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <vPortSetupTimerInterrupt+0x34>)
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008946:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <vPortSetupTimerInterrupt+0x38>)
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800894c:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <vPortSetupTimerInterrupt+0x3c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a0a      	ldr	r2, [pc, #40]	; (800897c <vPortSetupTimerInterrupt+0x40>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	099b      	lsrs	r3, r3, #6
 8008958:	4a09      	ldr	r2, [pc, #36]	; (8008980 <vPortSetupTimerInterrupt+0x44>)
 800895a:	3b01      	subs	r3, #1
 800895c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <vPortSetupTimerInterrupt+0x34>)
 8008960:	2207      	movs	r2, #7
 8008962:	601a      	str	r2, [r3, #0]
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	e000e010 	.word	0xe000e010
 8008974:	e000e018 	.word	0xe000e018
 8008978:	24000000 	.word	0x24000000
 800897c:	10624dd3 	.word	0x10624dd3
 8008980:	e000e014 	.word	0xe000e014

08008984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008994 <vPortEnableVFP+0x10>
 8008988:	6801      	ldr	r1, [r0, #0]
 800898a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800898e:	6001      	str	r1, [r0, #0]
 8008990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008992:	bf00      	nop
 8008994:	e000ed88 	.word	0xe000ed88

08008998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	; 0x28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089a4:	f7ff fae6 	bl	8007f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089a8:	4b5b      	ldr	r3, [pc, #364]	; (8008b18 <pvPortMalloc+0x180>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089b0:	f000 f920 	bl	8008bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089b4:	4b59      	ldr	r3, [pc, #356]	; (8008b1c <pvPortMalloc+0x184>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f040 8093 	bne.w	8008ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01d      	beq.n	8008a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80089c8:	2208      	movs	r2, #8
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d014      	beq.n	8008a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f023 0307 	bic.w	r3, r3, #7
 80089e0:	3308      	adds	r3, #8
 80089e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <pvPortMalloc+0x6c>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	617b      	str	r3, [r7, #20]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d06e      	beq.n	8008ae8 <pvPortMalloc+0x150>
 8008a0a:	4b45      	ldr	r3, [pc, #276]	; (8008b20 <pvPortMalloc+0x188>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d869      	bhi.n	8008ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a14:	4b43      	ldr	r3, [pc, #268]	; (8008b24 <pvPortMalloc+0x18c>)
 8008a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a18:	4b42      	ldr	r3, [pc, #264]	; (8008b24 <pvPortMalloc+0x18c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a1e:	e004      	b.n	8008a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d903      	bls.n	8008a3c <pvPortMalloc+0xa4>
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f1      	bne.n	8008a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a3c:	4b36      	ldr	r3, [pc, #216]	; (8008b18 <pvPortMalloc+0x180>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d050      	beq.n	8008ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	4413      	add	r3, r2
 8008a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	1ad2      	subs	r2, r2, r3
 8008a60:	2308      	movs	r3, #8
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d91f      	bls.n	8008aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <pvPortMalloc+0xf8>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	613b      	str	r3, [r7, #16]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008aa2:	69b8      	ldr	r0, [r7, #24]
 8008aa4:	f000 f908 	bl	8008cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <pvPortMalloc+0x188>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	4a1b      	ldr	r2, [pc, #108]	; (8008b20 <pvPortMalloc+0x188>)
 8008ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ab6:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <pvPortMalloc+0x188>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <pvPortMalloc+0x190>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d203      	bcs.n	8008aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ac2:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <pvPortMalloc+0x188>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a18      	ldr	r2, [pc, #96]	; (8008b28 <pvPortMalloc+0x190>)
 8008ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	4b13      	ldr	r3, [pc, #76]	; (8008b1c <pvPortMalloc+0x184>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <pvPortMalloc+0x194>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <pvPortMalloc+0x194>)
 8008ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ae8:	f7ff fa52 	bl	8007f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <pvPortMalloc+0x174>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60fb      	str	r3, [r7, #12]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <pvPortMalloc+0x172>
	return pvReturn;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3728      	adds	r7, #40	; 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	240043ac 	.word	0x240043ac
 8008b1c:	240043c0 	.word	0x240043c0
 8008b20:	240043b0 	.word	0x240043b0
 8008b24:	240043a4 	.word	0x240043a4
 8008b28:	240043b4 	.word	0x240043b4
 8008b2c:	240043b8 	.word	0x240043b8

08008b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d04d      	beq.n	8008bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b42:	2308      	movs	r3, #8
 8008b44:	425b      	negs	r3, r3
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4413      	add	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <vPortFree+0xb8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <vPortFree+0x44>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	60fb      	str	r3, [r7, #12]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <vPortFree+0x62>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	60bb      	str	r3, [r7, #8]
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <vPortFree+0xb8>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d01e      	beq.n	8008bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d11a      	bne.n	8008bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	4b0e      	ldr	r3, [pc, #56]	; (8008be8 <vPortFree+0xb8>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	401a      	ands	r2, r3
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bb8:	f7ff f9dc 	bl	8007f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <vPortFree+0xbc>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	4a09      	ldr	r2, [pc, #36]	; (8008bec <vPortFree+0xbc>)
 8008bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bca:	6938      	ldr	r0, [r7, #16]
 8008bcc:	f000 f874 	bl	8008cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <vPortFree+0xc0>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	4a06      	ldr	r2, [pc, #24]	; (8008bf0 <vPortFree+0xc0>)
 8008bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008bda:	f7ff f9d9 	bl	8007f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bde:	bf00      	nop
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	240043c0 	.word	0x240043c0
 8008bec:	240043b0 	.word	0x240043b0
 8008bf0:	240043bc 	.word	0x240043bc

08008bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c00:	4b27      	ldr	r3, [pc, #156]	; (8008ca0 <prvHeapInit+0xac>)
 8008c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00c      	beq.n	8008c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3307      	adds	r3, #7
 8008c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	4a1f      	ldr	r2, [pc, #124]	; (8008ca0 <prvHeapInit+0xac>)
 8008c24:	4413      	add	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ca4 <prvHeapInit+0xb0>)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c32:	4b1c      	ldr	r3, [pc, #112]	; (8008ca4 <prvHeapInit+0xb0>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c40:	2208      	movs	r2, #8
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0307 	bic.w	r3, r3, #7
 8008c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <prvHeapInit+0xb4>)
 8008c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c56:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <prvHeapInit+0xb4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c5e:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <prvHeapInit+0xb4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	1ad2      	subs	r2, r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c74:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <prvHeapInit+0xb4>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <prvHeapInit+0xb8>)
 8008c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <prvHeapInit+0xbc>)
 8008c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c8c:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <prvHeapInit+0xc0>)
 8008c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	240007a4 	.word	0x240007a4
 8008ca4:	240043a4 	.word	0x240043a4
 8008ca8:	240043ac 	.word	0x240043ac
 8008cac:	240043b4 	.word	0x240043b4
 8008cb0:	240043b0 	.word	0x240043b0
 8008cb4:	240043c0 	.word	0x240043c0

08008cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cc0:	4b28      	ldr	r3, [pc, #160]	; (8008d64 <prvInsertBlockIntoFreeList+0xac>)
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	e002      	b.n	8008ccc <prvInsertBlockIntoFreeList+0x14>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d8f7      	bhi.n	8008cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d108      	bne.n	8008cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	441a      	add	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d118      	bne.n	8008d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <prvInsertBlockIntoFreeList+0xb0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d00d      	beq.n	8008d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	441a      	add	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	e008      	b.n	8008d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d36:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <prvInsertBlockIntoFreeList+0xb0>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	e003      	b.n	8008d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d002      	beq.n	8008d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d56:	bf00      	nop
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	240043a4 	.word	0x240043a4
 8008d68:	240043ac 	.word	0x240043ac

08008d6c <__errno>:
 8008d6c:	4b01      	ldr	r3, [pc, #4]	; (8008d74 <__errno+0x8>)
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	24000014 	.word	0x24000014

08008d78 <__libc_init_array>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	4d0d      	ldr	r5, [pc, #52]	; (8008db0 <__libc_init_array+0x38>)
 8008d7c:	4c0d      	ldr	r4, [pc, #52]	; (8008db4 <__libc_init_array+0x3c>)
 8008d7e:	1b64      	subs	r4, r4, r5
 8008d80:	10a4      	asrs	r4, r4, #2
 8008d82:	2600      	movs	r6, #0
 8008d84:	42a6      	cmp	r6, r4
 8008d86:	d109      	bne.n	8008d9c <__libc_init_array+0x24>
 8008d88:	4d0b      	ldr	r5, [pc, #44]	; (8008db8 <__libc_init_array+0x40>)
 8008d8a:	4c0c      	ldr	r4, [pc, #48]	; (8008dbc <__libc_init_array+0x44>)
 8008d8c:	f000 f9b4 	bl	80090f8 <_init>
 8008d90:	1b64      	subs	r4, r4, r5
 8008d92:	10a4      	asrs	r4, r4, #2
 8008d94:	2600      	movs	r6, #0
 8008d96:	42a6      	cmp	r6, r4
 8008d98:	d105      	bne.n	8008da6 <__libc_init_array+0x2e>
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da0:	4798      	blx	r3
 8008da2:	3601      	adds	r6, #1
 8008da4:	e7ee      	b.n	8008d84 <__libc_init_array+0xc>
 8008da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008daa:	4798      	blx	r3
 8008dac:	3601      	adds	r6, #1
 8008dae:	e7f2      	b.n	8008d96 <__libc_init_array+0x1e>
 8008db0:	080092e0 	.word	0x080092e0
 8008db4:	080092e0 	.word	0x080092e0
 8008db8:	080092e0 	.word	0x080092e0
 8008dbc:	080092e4 	.word	0x080092e4

08008dc0 <__retarget_lock_acquire_recursive>:
 8008dc0:	4770      	bx	lr

08008dc2 <__retarget_lock_release_recursive>:
 8008dc2:	4770      	bx	lr

08008dc4 <malloc>:
 8008dc4:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <malloc+0xc>)
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	f000 b877 	b.w	8008ebc <_malloc_r>
 8008dce:	bf00      	nop
 8008dd0:	24000014 	.word	0x24000014

08008dd4 <memset>:
 8008dd4:	4402      	add	r2, r0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d100      	bne.n	8008dde <memset+0xa>
 8008ddc:	4770      	bx	lr
 8008dde:	f803 1b01 	strb.w	r1, [r3], #1
 8008de2:	e7f9      	b.n	8008dd8 <memset+0x4>

08008de4 <_free_r>:
 8008de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de6:	2900      	cmp	r1, #0
 8008de8:	d044      	beq.n	8008e74 <_free_r+0x90>
 8008dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dee:	9001      	str	r0, [sp, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f1a1 0404 	sub.w	r4, r1, #4
 8008df6:	bfb8      	it	lt
 8008df8:	18e4      	addlt	r4, r4, r3
 8008dfa:	f000 f94d 	bl	8009098 <__malloc_lock>
 8008dfe:	4a1e      	ldr	r2, [pc, #120]	; (8008e78 <_free_r+0x94>)
 8008e00:	9801      	ldr	r0, [sp, #4]
 8008e02:	6813      	ldr	r3, [r2, #0]
 8008e04:	b933      	cbnz	r3, 8008e14 <_free_r+0x30>
 8008e06:	6063      	str	r3, [r4, #4]
 8008e08:	6014      	str	r4, [r2, #0]
 8008e0a:	b003      	add	sp, #12
 8008e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e10:	f000 b948 	b.w	80090a4 <__malloc_unlock>
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d908      	bls.n	8008e2a <_free_r+0x46>
 8008e18:	6825      	ldr	r5, [r4, #0]
 8008e1a:	1961      	adds	r1, r4, r5
 8008e1c:	428b      	cmp	r3, r1
 8008e1e:	bf01      	itttt	eq
 8008e20:	6819      	ldreq	r1, [r3, #0]
 8008e22:	685b      	ldreq	r3, [r3, #4]
 8008e24:	1949      	addeq	r1, r1, r5
 8008e26:	6021      	streq	r1, [r4, #0]
 8008e28:	e7ed      	b.n	8008e06 <_free_r+0x22>
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b10b      	cbz	r3, 8008e34 <_free_r+0x50>
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d9fa      	bls.n	8008e2a <_free_r+0x46>
 8008e34:	6811      	ldr	r1, [r2, #0]
 8008e36:	1855      	adds	r5, r2, r1
 8008e38:	42a5      	cmp	r5, r4
 8008e3a:	d10b      	bne.n	8008e54 <_free_r+0x70>
 8008e3c:	6824      	ldr	r4, [r4, #0]
 8008e3e:	4421      	add	r1, r4
 8008e40:	1854      	adds	r4, r2, r1
 8008e42:	42a3      	cmp	r3, r4
 8008e44:	6011      	str	r1, [r2, #0]
 8008e46:	d1e0      	bne.n	8008e0a <_free_r+0x26>
 8008e48:	681c      	ldr	r4, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	6053      	str	r3, [r2, #4]
 8008e4e:	4421      	add	r1, r4
 8008e50:	6011      	str	r1, [r2, #0]
 8008e52:	e7da      	b.n	8008e0a <_free_r+0x26>
 8008e54:	d902      	bls.n	8008e5c <_free_r+0x78>
 8008e56:	230c      	movs	r3, #12
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	e7d6      	b.n	8008e0a <_free_r+0x26>
 8008e5c:	6825      	ldr	r5, [r4, #0]
 8008e5e:	1961      	adds	r1, r4, r5
 8008e60:	428b      	cmp	r3, r1
 8008e62:	bf04      	itt	eq
 8008e64:	6819      	ldreq	r1, [r3, #0]
 8008e66:	685b      	ldreq	r3, [r3, #4]
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	bf04      	itt	eq
 8008e6c:	1949      	addeq	r1, r1, r5
 8008e6e:	6021      	streq	r1, [r4, #0]
 8008e70:	6054      	str	r4, [r2, #4]
 8008e72:	e7ca      	b.n	8008e0a <_free_r+0x26>
 8008e74:	b003      	add	sp, #12
 8008e76:	bd30      	pop	{r4, r5, pc}
 8008e78:	240043c8 	.word	0x240043c8

08008e7c <sbrk_aligned>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	4e0e      	ldr	r6, [pc, #56]	; (8008eb8 <sbrk_aligned+0x3c>)
 8008e80:	460c      	mov	r4, r1
 8008e82:	6831      	ldr	r1, [r6, #0]
 8008e84:	4605      	mov	r5, r0
 8008e86:	b911      	cbnz	r1, 8008e8e <sbrk_aligned+0x12>
 8008e88:	f000 f8f6 	bl	8009078 <_sbrk_r>
 8008e8c:	6030      	str	r0, [r6, #0]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 f8f1 	bl	8009078 <_sbrk_r>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d00a      	beq.n	8008eb0 <sbrk_aligned+0x34>
 8008e9a:	1cc4      	adds	r4, r0, #3
 8008e9c:	f024 0403 	bic.w	r4, r4, #3
 8008ea0:	42a0      	cmp	r0, r4
 8008ea2:	d007      	beq.n	8008eb4 <sbrk_aligned+0x38>
 8008ea4:	1a21      	subs	r1, r4, r0
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f8e6 	bl	8009078 <_sbrk_r>
 8008eac:	3001      	adds	r0, #1
 8008eae:	d101      	bne.n	8008eb4 <sbrk_aligned+0x38>
 8008eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	240043cc 	.word	0x240043cc

08008ebc <_malloc_r>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	1ccd      	adds	r5, r1, #3
 8008ec2:	f025 0503 	bic.w	r5, r5, #3
 8008ec6:	3508      	adds	r5, #8
 8008ec8:	2d0c      	cmp	r5, #12
 8008eca:	bf38      	it	cc
 8008ecc:	250c      	movcc	r5, #12
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	db01      	blt.n	8008ed8 <_malloc_r+0x1c>
 8008ed4:	42a9      	cmp	r1, r5
 8008ed6:	d905      	bls.n	8008ee4 <_malloc_r+0x28>
 8008ed8:	230c      	movs	r3, #12
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	2600      	movs	r6, #0
 8008ede:	4630      	mov	r0, r6
 8008ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee4:	4e2e      	ldr	r6, [pc, #184]	; (8008fa0 <_malloc_r+0xe4>)
 8008ee6:	f000 f8d7 	bl	8009098 <__malloc_lock>
 8008eea:	6833      	ldr	r3, [r6, #0]
 8008eec:	461c      	mov	r4, r3
 8008eee:	bb34      	cbnz	r4, 8008f3e <_malloc_r+0x82>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7ff ffc2 	bl	8008e7c <sbrk_aligned>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	4604      	mov	r4, r0
 8008efc:	d14d      	bne.n	8008f9a <_malloc_r+0xde>
 8008efe:	6834      	ldr	r4, [r6, #0]
 8008f00:	4626      	mov	r6, r4
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d140      	bne.n	8008f88 <_malloc_r+0xcc>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	eb04 0803 	add.w	r8, r4, r3
 8008f10:	f000 f8b2 	bl	8009078 <_sbrk_r>
 8008f14:	4580      	cmp	r8, r0
 8008f16:	d13a      	bne.n	8008f8e <_malloc_r+0xd2>
 8008f18:	6821      	ldr	r1, [r4, #0]
 8008f1a:	3503      	adds	r5, #3
 8008f1c:	1a6d      	subs	r5, r5, r1
 8008f1e:	f025 0503 	bic.w	r5, r5, #3
 8008f22:	3508      	adds	r5, #8
 8008f24:	2d0c      	cmp	r5, #12
 8008f26:	bf38      	it	cc
 8008f28:	250c      	movcc	r5, #12
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	f7ff ffa5 	bl	8008e7c <sbrk_aligned>
 8008f32:	3001      	adds	r0, #1
 8008f34:	d02b      	beq.n	8008f8e <_malloc_r+0xd2>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	442b      	add	r3, r5
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	e00e      	b.n	8008f5c <_malloc_r+0xa0>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	1b52      	subs	r2, r2, r5
 8008f42:	d41e      	bmi.n	8008f82 <_malloc_r+0xc6>
 8008f44:	2a0b      	cmp	r2, #11
 8008f46:	d916      	bls.n	8008f76 <_malloc_r+0xba>
 8008f48:	1961      	adds	r1, r4, r5
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	6025      	str	r5, [r4, #0]
 8008f4e:	bf18      	it	ne
 8008f50:	6059      	strne	r1, [r3, #4]
 8008f52:	6863      	ldr	r3, [r4, #4]
 8008f54:	bf08      	it	eq
 8008f56:	6031      	streq	r1, [r6, #0]
 8008f58:	5162      	str	r2, [r4, r5]
 8008f5a:	604b      	str	r3, [r1, #4]
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f104 060b 	add.w	r6, r4, #11
 8008f62:	f000 f89f 	bl	80090a4 <__malloc_unlock>
 8008f66:	f026 0607 	bic.w	r6, r6, #7
 8008f6a:	1d23      	adds	r3, r4, #4
 8008f6c:	1af2      	subs	r2, r6, r3
 8008f6e:	d0b6      	beq.n	8008ede <_malloc_r+0x22>
 8008f70:	1b9b      	subs	r3, r3, r6
 8008f72:	50a3      	str	r3, [r4, r2]
 8008f74:	e7b3      	b.n	8008ede <_malloc_r+0x22>
 8008f76:	6862      	ldr	r2, [r4, #4]
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	bf0c      	ite	eq
 8008f7c:	6032      	streq	r2, [r6, #0]
 8008f7e:	605a      	strne	r2, [r3, #4]
 8008f80:	e7ec      	b.n	8008f5c <_malloc_r+0xa0>
 8008f82:	4623      	mov	r3, r4
 8008f84:	6864      	ldr	r4, [r4, #4]
 8008f86:	e7b2      	b.n	8008eee <_malloc_r+0x32>
 8008f88:	4634      	mov	r4, r6
 8008f8a:	6876      	ldr	r6, [r6, #4]
 8008f8c:	e7b9      	b.n	8008f02 <_malloc_r+0x46>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	4638      	mov	r0, r7
 8008f94:	f000 f886 	bl	80090a4 <__malloc_unlock>
 8008f98:	e7a1      	b.n	8008ede <_malloc_r+0x22>
 8008f9a:	6025      	str	r5, [r4, #0]
 8008f9c:	e7de      	b.n	8008f5c <_malloc_r+0xa0>
 8008f9e:	bf00      	nop
 8008fa0:	240043c8 	.word	0x240043c8

08008fa4 <cleanup_glue>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	6809      	ldr	r1, [r1, #0]
 8008faa:	4605      	mov	r5, r0
 8008fac:	b109      	cbz	r1, 8008fb2 <cleanup_glue+0xe>
 8008fae:	f7ff fff9 	bl	8008fa4 <cleanup_glue>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fba:	f7ff bf13 	b.w	8008de4 <_free_r>
	...

08008fc0 <_reclaim_reent>:
 8008fc0:	4b2c      	ldr	r3, [pc, #176]	; (8009074 <_reclaim_reent+0xb4>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4283      	cmp	r3, r0
 8008fc6:	b570      	push	{r4, r5, r6, lr}
 8008fc8:	4604      	mov	r4, r0
 8008fca:	d051      	beq.n	8009070 <_reclaim_reent+0xb0>
 8008fcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008fce:	b143      	cbz	r3, 8008fe2 <_reclaim_reent+0x22>
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d14a      	bne.n	800906c <_reclaim_reent+0xac>
 8008fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd8:	6819      	ldr	r1, [r3, #0]
 8008fda:	b111      	cbz	r1, 8008fe2 <_reclaim_reent+0x22>
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f7ff ff01 	bl	8008de4 <_free_r>
 8008fe2:	6961      	ldr	r1, [r4, #20]
 8008fe4:	b111      	cbz	r1, 8008fec <_reclaim_reent+0x2c>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7ff fefc 	bl	8008de4 <_free_r>
 8008fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008fee:	b111      	cbz	r1, 8008ff6 <_reclaim_reent+0x36>
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f7ff fef7 	bl	8008de4 <_free_r>
 8008ff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ff8:	b111      	cbz	r1, 8009000 <_reclaim_reent+0x40>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff fef2 	bl	8008de4 <_free_r>
 8009000:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009002:	b111      	cbz	r1, 800900a <_reclaim_reent+0x4a>
 8009004:	4620      	mov	r0, r4
 8009006:	f7ff feed 	bl	8008de4 <_free_r>
 800900a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800900c:	b111      	cbz	r1, 8009014 <_reclaim_reent+0x54>
 800900e:	4620      	mov	r0, r4
 8009010:	f7ff fee8 	bl	8008de4 <_free_r>
 8009014:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009016:	b111      	cbz	r1, 800901e <_reclaim_reent+0x5e>
 8009018:	4620      	mov	r0, r4
 800901a:	f7ff fee3 	bl	8008de4 <_free_r>
 800901e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009020:	b111      	cbz	r1, 8009028 <_reclaim_reent+0x68>
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff fede 	bl	8008de4 <_free_r>
 8009028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800902a:	b111      	cbz	r1, 8009032 <_reclaim_reent+0x72>
 800902c:	4620      	mov	r0, r4
 800902e:	f7ff fed9 	bl	8008de4 <_free_r>
 8009032:	69a3      	ldr	r3, [r4, #24]
 8009034:	b1e3      	cbz	r3, 8009070 <_reclaim_reent+0xb0>
 8009036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009038:	4620      	mov	r0, r4
 800903a:	4798      	blx	r3
 800903c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800903e:	b1b9      	cbz	r1, 8009070 <_reclaim_reent+0xb0>
 8009040:	4620      	mov	r0, r4
 8009042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009046:	f7ff bfad 	b.w	8008fa4 <cleanup_glue>
 800904a:	5949      	ldr	r1, [r1, r5]
 800904c:	b941      	cbnz	r1, 8009060 <_reclaim_reent+0xa0>
 800904e:	3504      	adds	r5, #4
 8009050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009052:	2d80      	cmp	r5, #128	; 0x80
 8009054:	68d9      	ldr	r1, [r3, #12]
 8009056:	d1f8      	bne.n	800904a <_reclaim_reent+0x8a>
 8009058:	4620      	mov	r0, r4
 800905a:	f7ff fec3 	bl	8008de4 <_free_r>
 800905e:	e7ba      	b.n	8008fd6 <_reclaim_reent+0x16>
 8009060:	680e      	ldr	r6, [r1, #0]
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff febe 	bl	8008de4 <_free_r>
 8009068:	4631      	mov	r1, r6
 800906a:	e7ef      	b.n	800904c <_reclaim_reent+0x8c>
 800906c:	2500      	movs	r5, #0
 800906e:	e7ef      	b.n	8009050 <_reclaim_reent+0x90>
 8009070:	bd70      	pop	{r4, r5, r6, pc}
 8009072:	bf00      	nop
 8009074:	24000014 	.word	0x24000014

08009078 <_sbrk_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d06      	ldr	r5, [pc, #24]	; (8009094 <_sbrk_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	f7f8 fe2a 	bl	8001cdc <_sbrk>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_sbrk_r+0x1a>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_sbrk_r+0x1a>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	240043d0 	.word	0x240043d0

08009098 <__malloc_lock>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__malloc_lock+0x8>)
 800909a:	f7ff be91 	b.w	8008dc0 <__retarget_lock_acquire_recursive>
 800909e:	bf00      	nop
 80090a0:	240043c4 	.word	0x240043c4

080090a4 <__malloc_unlock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__malloc_unlock+0x8>)
 80090a6:	f7ff be8c 	b.w	8008dc2 <__retarget_lock_release_recursive>
 80090aa:	bf00      	nop
 80090ac:	240043c4 	.word	0x240043c4

080090b0 <sqrt>:
 80090b0:	b508      	push	{r3, lr}
 80090b2:	ed2d 8b04 	vpush	{d8-d9}
 80090b6:	eeb0 8b40 	vmov.f64	d8, d0
 80090ba:	f000 f819 	bl	80090f0 <__ieee754_sqrt>
 80090be:	eeb4 8b48 	vcmp.f64	d8, d8
 80090c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c6:	d60c      	bvs.n	80090e2 <sqrt+0x32>
 80090c8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80090e8 <sqrt+0x38>
 80090cc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80090d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d4:	d505      	bpl.n	80090e2 <sqrt+0x32>
 80090d6:	f7ff fe49 	bl	8008d6c <__errno>
 80090da:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80090de:	2321      	movs	r3, #33	; 0x21
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	ecbd 8b04 	vpop	{d8-d9}
 80090e6:	bd08      	pop	{r3, pc}
	...

080090f0 <__ieee754_sqrt>:
 80090f0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80090f4:	4770      	bx	lr
	...

080090f8 <_init>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	bf00      	nop
 80090fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fe:	bc08      	pop	{r3}
 8009100:	469e      	mov	lr, r3
 8009102:	4770      	bx	lr

08009104 <_fini>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	bf00      	nop
 8009108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910a:	bc08      	pop	{r3}
 800910c:	469e      	mov	lr, r3
 800910e:	4770      	bx	lr
