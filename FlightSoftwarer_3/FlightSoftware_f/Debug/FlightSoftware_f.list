
FlightSoftware_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08007fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004208  24000078  08008058  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004280  08008058  00024280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020f28  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003900  00000000  00000000  00040fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017d8  00000000  00000000  000448d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001680  00000000  00000000  000460a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391a0  00000000  00000000  00047728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e428  00000000  00000000  000808c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016bab5  00000000  00000000  0009ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020a7a5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006814  00000000  00000000  0020a7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007ebc 	.word	0x08007ebc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08007ebc 	.word	0x08007ebc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <GZP_SET_REG>:
//void GZP_INIT(){
//	//status = null;
//	//set GZP settings? defaults seem okay, might not need init function at all
//}

void GZP_SET_REG(I2C_HandleTypeDef* hi2c, uint8_t reg_addr, uint8_t input){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
 80005f0:	4613      	mov	r3, r2
 80005f2:	70bb      	strb	r3, [r7, #2]
	//memaddsize, input, size, timeout

	//check if it works with status return val? add later todo
	//status = Hal_I2C_Mem_Write(&hi2c,GZP_I2C_ADDR,reg_addr,1,input,1,50);

	HAL_I2C_Mem_Write(&hi2c,GZP_I2C_ADDR,reg_addr,1,input,1,50);
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	4619      	mov	r1, r3
 80005fc:	1d38      	adds	r0, r7, #4
 80005fe:	2332      	movs	r3, #50	; 0x32
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	9100      	str	r1, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	2136      	movs	r1, #54	; 0x36
 800060c:	f001 f92a 	bl	8001864 <HAL_I2C_Mem_Write>
	//if any issues with HAL or writing, return
//	if(status != HAL_OK){
//		return status;
//	}
//	return HAL_OK;
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <GZP_READ_REG>:

uint8_t GZP_READ_REG(I2C_HandleTypeDef* hi2c, uint8_t reg_addr){
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af04      	add	r7, sp, #16
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	uint8_t output;
	HAL_I2C_Mem_Read(&hi2c,GZP_I2C_ADDR,reg_addr,1,&output,1,50);
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	b29a      	uxth	r2, r3
 8000628:	1d38      	adds	r0, r7, #4
 800062a:	2332      	movs	r3, #50	; 0x32
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	2301      	movs	r3, #1
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	f107 030f 	add.w	r3, r7, #15
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	2136      	movs	r1, #54	; 0x36
 800063c:	f001 fa26 	bl	8001a8c <HAL_I2C_Mem_Read>
	return output;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <GZP_READ_DATA>:

void GZP_READ_DATA(I2C_HandleTypeDef* hi2c, uint8_t* combined){
 800064a:	b580      	push	{r7, lr}
 800064c:	b088      	sub	sp, #32
 800064e:	af04      	add	r7, sp, #16
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
	uint8_t check = 1 << 3;
 8000654:	2308      	movs	r3, #8
 8000656:	73fb      	strb	r3, [r7, #15]

	GZP_SET_REG(hi2c, CMD, REQUEST_CMD);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2202      	movs	r2, #2
 800065c:	2130      	movs	r1, #48	; 0x30
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ffc0 	bl	80005e4 <GZP_SET_REG>

	//wait for Sco bit to go to zero, means conversions are done and can be read
	while((GZP_READ_REG(hi2c, SYS_CFG) & check) != check);
 8000664:	bf00      	nop
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	21a5      	movs	r1, #165	; 0xa5
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffd4 	bl	8000618 <GZP_READ_REG>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	429a      	cmp	r2, r3
 800067e:	d1f2      	bne.n	8000666 <GZP_READ_DATA+0x1c>

	//read first 3 pressure, next 2 temp into same array
	//combined = (uint8_t*) malloc(5);
	HAL_I2C_Mem_Read(&hi2c,GZP_I2C_ADDR,START_ADDR | 0x01,1,&combined,5,50);
 8000680:	1d38      	adds	r0, r7, #4
 8000682:	2332      	movs	r3, #50	; 0x32
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2305      	movs	r3, #5
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	463b      	mov	r3, r7
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2207      	movs	r2, #7
 8000692:	2136      	movs	r1, #54	; 0x36
 8000694:	f001 f9fa 	bl	8001a8c <HAL_I2C_Mem_Read>
	//return out;
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <vApplicationGetIdleTaskMemory+0x2c>)
 80006b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <vApplicationGetIdleTaskMemory+0x30>)
 80006b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094
 80006d0:	24000148 	.word	0x24000148

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fd15 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f821 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f971 	bl	80009c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e6:	f000 f923 	bl	8000930 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80006ea:	f000 f8d5 	bl	8000898 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 80006ee:	f000 f893 	bl	8000818 <MX_I2C4_Init>
  /* definition and creation of BMP388_Thread */
//  osThreadDef(BMP388_Thread, BMP388_Entry, osPriorityNormal, 0, 128);
//  BMP388_ThreadHandle = osThreadCreate(osThread(BMP388_Thread), NULL);

  /* definition and creation of GZP_Thread */
  osThreadDef(GZP_Thread, GZP_Entry, osPriorityIdle, 0, 128);
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <main+0x48>)
 80006f4:	1d3c      	adds	r4, r7, #4
 80006f6:	461d      	mov	r5, r3
 80006f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GZP_ThreadHandle = osThreadCreate(osThread(GZP_Thread), NULL);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f006 f88a 	bl	8006822 <osThreadCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <main+0x4c>)
 8000712:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000714:	f006 f87e 	bl	8006814 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x44>
 800071a:	bf00      	nop
 800071c:	08007ee0 	.word	0x08007ee0
 8000720:	240004d0 	.word	0x240004d0

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09c      	sub	sp, #112	; 0x70
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	224c      	movs	r2, #76	; 0x4c
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 faf8 	bl	8007d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2220      	movs	r2, #32
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f007 faf2 	bl	8007d28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000744:	2002      	movs	r0, #2
 8000746:	f001 fe15 	bl	8002374 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <SystemClock_Config+0xec>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <SystemClock_Config+0xec>)
 8000754:	f023 0301 	bic.w	r3, r3, #1
 8000758:	62d3      	str	r3, [r2, #44]	; 0x2c
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <SystemClock_Config+0xec>)
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemClock_Config+0xf0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemClock_Config+0xf0>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0xf0>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077c:	bf00      	nop
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xf0>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800078a:	d1f8      	bne.n	800077e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000790:	2301      	movs	r3, #1
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007a4:	230a      	movs	r3, #10
 80007a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007b4:	230c      	movs	r3, #12
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007b8:	2302      	movs	r3, #2
 80007ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fe0f 	bl	80023e8 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007d0:	f000 fa22 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	233f      	movs	r3, #63	; 0x3f
 80007d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2303      	movs	r3, #3
 80007da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fa4f 	bl	8002c9c <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000804:	f000 fa08 	bl	8000c18 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3770      	adds	r7, #112	; 0x70
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58000400 	.word	0x58000400
 8000814:	58024800 	.word	0x58024800

08000818 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_I2C4_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_I2C4_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10909CEC;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_I2C4_Init+0x74>)
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <MX_I2C4_Init+0x7c>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_I2C4_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_I2C4_Init+0x74>)
 8000830:	2201      	movs	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_I2C4_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_I2C4_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C4_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_I2C4_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C4_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000852:	480e      	ldr	r0, [pc, #56]	; (800088c <MX_I2C4_Init+0x74>)
 8000854:	f000 ff6a 	bl	800172c <HAL_I2C_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800085e:	f000 f9db 	bl	8000c18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_I2C4_Init+0x74>)
 8000866:	f001 fced 	bl	8002244 <HAL_I2CEx_ConfigAnalogFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 f9d2 	bl	8000c18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000874:	2100      	movs	r1, #0
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_I2C4_Init+0x74>)
 8000878:	f001 fd2f 	bl	80022da <HAL_I2CEx_ConfigDigitalFilter>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 f9c9 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	24000354 	.word	0x24000354
 8000890:	58001c00 	.word	0x58001c00
 8000894:	10909cec 	.word	0x10909cec

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_USART1_UART_Init+0x90>)
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <MX_USART1_UART_Init+0x94>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008e2:	f004 fea3 	bl	800562c <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f994 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008f4:	f005 feab 	bl	800664e <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008fe:	f000 f98b 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_USART1_UART_Init+0x90>)
 8000906:	f005 fee0 	bl	80066ca <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f982 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_USART1_UART_Init+0x90>)
 8000916:	f005 fe61 	bl	80065dc <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f97a 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	240003a8 	.word	0x240003a8
 800092c:	40011000 	.word	0x40011000

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_USART3_UART_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800097a:	f004 fe57 	bl	800562c <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f948 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800098c:	f005 fe5f 	bl	800664e <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f93f 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 800099e:	f005 fe94 	bl	80066ca <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f936 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_USART3_UART_Init+0x90>)
 80009ae:	f005 fe15 	bl	80065dc <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f92e 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2400043c 	.word	0x2400043c
 80009c4:	40004800 	.word	0x40004800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b78      	ldr	r3, [pc, #480]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a76      	ldr	r2, [pc, #472]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b74      	ldr	r3, [pc, #464]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fc:	4b70      	ldr	r3, [pc, #448]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	4a6f      	ldr	r2, [pc, #444]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0c:	4b6c      	ldr	r3, [pc, #432]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b69      	ldr	r3, [pc, #420]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	4a67      	ldr	r2, [pc, #412]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2a:	4b65      	ldr	r3, [pc, #404]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b61      	ldr	r3, [pc, #388]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	4a60      	ldr	r2, [pc, #384]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a48:	4b5d      	ldr	r3, [pc, #372]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	4b5a      	ldr	r3, [pc, #360]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a58      	ldr	r2, [pc, #352]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a74:	4b52      	ldr	r3, [pc, #328]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	4a51      	ldr	r2, [pc, #324]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a84:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	484b      	ldr	r0, [pc, #300]	; (8000bc4 <MX_GPIO_Init+0x1fc>)
 8000a98:	f000 fe2e 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4849      	ldr	r0, [pc, #292]	; (8000bc8 <MX_GPIO_Init+0x200>)
 8000aa2:	f000 fe29 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4843      	ldr	r0, [pc, #268]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000abe:	f000 fc6b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac2:	2332      	movs	r3, #50	; 0x32
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	483b      	ldr	r0, [pc, #236]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000ade:	f000 fc5b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae2:	2386      	movs	r3, #134	; 0x86
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af2:	230b      	movs	r3, #11
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4834      	ldr	r0, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0x208>)
 8000afe:	f000 fc4b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b14:	230b      	movs	r3, #11
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0x200>)
 8000b20:	f000 fc3a 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b24:	2340      	movs	r3, #64	; 0x40
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x1fc>)
 8000b3c:	f000 fc2c 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	481c      	ldr	r0, [pc, #112]	; (8000bc4 <MX_GPIO_Init+0x1fc>)
 8000b54:	f000 fc20 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b58:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <MX_GPIO_Init+0x208>)
 8000b76:	f000 fc0f 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <MX_GPIO_Init+0x1fc>)
 8000b98:	f000 fbfe 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0x200>)
 8000bb4:	f000 fbf0 	bl	8001398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	bf00      	nop
 8000bba:	3730      	adds	r7, #48	; 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58021800 	.word	0x58021800
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	58020800 	.word	0x58020800
 8000bd0:	58020000 	.word	0x58020000

08000bd4 <GZP_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GZP_Entry */
void GZP_Entry(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GZP_Entry */
  /* Infinite loop */
  for(;;)
  {
	GZP_READ_DATA(&hi2c4, (uint8_t *) GZP_Buffer);
 8000bdc:	4903      	ldr	r1, [pc, #12]	; (8000bec <GZP_Entry+0x18>)
 8000bde:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <GZP_Entry+0x1c>)
 8000be0:	f7ff fd33 	bl	800064a <GZP_READ_DATA>
	osDelay(100);
 8000be4:	2064      	movs	r0, #100	; 0x64
 8000be6:	f005 fe68 	bl	80068ba <osDelay>
	GZP_READ_DATA(&hi2c4, (uint8_t *) GZP_Buffer);
 8000bea:	e7f7      	b.n	8000bdc <GZP_Entry+0x8>
 8000bec:	24000348 	.word	0x24000348
 8000bf0:	24000354 	.word	0x24000354

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c06:	f000 fabb 	bl	8001180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010000 	.word	0x40010000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x38>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_MspInit+0x38>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_MspInit+0x38>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f06f 0001 	mvn.w	r0, #1
 8000c50:	f000 fb7a 	bl	8001348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400

08000c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ba      	sub	sp, #232	; 0xe8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	22c0      	movs	r2, #192	; 0xc0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f007 f851 	bl	8007d28 <memset>
  if(hi2c->Instance==I2C4)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <HAL_I2C_MspInit+0xc8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d146      	bne.n	8000d1e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c90:	f04f 0210 	mov.w	r2, #16
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fbc6 	bl	8003438 <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000cb2:	f7ff ffb1 	bl	8000c18 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_I2C_MspInit+0xcc>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_I2C_MspInit+0xcc>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_I2C_MspInit+0xcc>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cd4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cdc:	2312      	movs	r3, #18
 8000cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <HAL_I2C_MspInit+0xd0>)
 8000cfc:	f000 fb4c 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_I2C_MspInit+0xcc>)
 8000d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d06:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <HAL_I2C_MspInit+0xcc>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_I2C_MspInit+0xcc>)
 8000d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	37e8      	adds	r7, #232	; 0xe8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	58001c00 	.word	0x58001c00
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020c00 	.word	0x58020c00

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0bc      	sub	sp, #240	; 0xf0
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	22c0      	movs	r2, #192	; 0xc0
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f006 ffe7 	bl	8007d28 <memset>
  if(huart->Instance==USART1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <HAL_UART_MspInit+0x160>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d147      	bne.n	8000df4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d64:	f04f 0201 	mov.w	r2, #1
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fb5c 	bl	8003438 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d86:	f7ff ff47 	bl	8000c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d90:	4a41      	ldr	r2, [pc, #260]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a3a      	ldr	r2, [pc, #232]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000dc6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000de0:	2304      	movs	r3, #4
 8000de2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dea:	4619      	mov	r1, r3
 8000dec:	482b      	ldr	r0, [pc, #172]	; (8000e9c <HAL_UART_MspInit+0x168>)
 8000dee:	f000 fad3 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df2:	e04b      	b.n	8000e8c <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_UART_MspInit+0x16c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d146      	bne.n	8000e8c <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dfe:	f04f 0202 	mov.w	r2, #2
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fb0f 	bl	8003438 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000e20:	f7ff fefa 	bl	8000c18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0x164>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_UART_MspInit+0x168>)
 8000e88:	f000 fa86 	bl	8001398 <HAL_GPIO_Init>
}
 8000e8c:	bf00      	nop
 8000e8e:	37f0      	adds	r7, #240	; 0xf0
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40011000 	.word	0x40011000
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	58020400 	.word	0x58020400
 8000ea0:	40004800 	.word	0x40004800

08000ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08e      	sub	sp, #56	; 0x38
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d842      	bhi.n	8000f38 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	2019      	movs	r0, #25
 8000eb8:	f000 fa46 	bl	8001348 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ebc:	2019      	movs	r0, #25
 8000ebe:	f000 fa5d 	bl	800137c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ec2:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <HAL_InitTick+0xac>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_InitTick+0xb0>)
 8000eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_InitTick+0xb0>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_InitTick+0xb0>)
 8000eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee6:	f107 020c 	add.w	r2, r7, #12
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fa5f 	bl	80033b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ef6:	f002 fa47 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 8000efa:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_InitTick+0xb4>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	0c9b      	lsrs	r3, r3, #18
 8000f06:	3b01      	subs	r3, #1
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_InitTick+0xb8>)
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_InitTick+0xbc>)
 8000f0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0xb8>)
 8000f12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f16:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f18:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_InitTick+0xb8>)
 8000f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_InitTick+0xb8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_InitTick+0xb8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <HAL_InitTick+0xb8>)
 8000f2c:	f004 f8b0 	bl	8005090 <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d107      	bne.n	8000f46 <HAL_InitTick+0xa2>
 8000f36:	e001      	b.n	8000f3c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e005      	b.n	8000f48 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <HAL_InitTick+0xb8>)
 8000f3e:	f004 f909 	bl	8005154 <HAL_TIM_Base_Start_IT>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3738      	adds	r7, #56	; 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	24000008 	.word	0x24000008
 8000f54:	58024400 	.word	0x58024400
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	240004d4 	.word	0x240004d4
 8000f60:	40010000 	.word	0x40010000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM1_UP_IRQHandler+0x10>)
 8000f96:	f004 f955 	bl	8005244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	240004d4 	.word	0x240004d4

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b37      	ldr	r3, [pc, #220]	; (8001088 <SystemInit+0xe4>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a36      	ldr	r2, [pc, #216]	; (8001088 <SystemInit+0xe4>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <SystemInit+0xe8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	2b06      	cmp	r3, #6
 8000fc2:	d807      	bhi.n	8000fd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <SystemInit+0xe8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 030f 	bic.w	r3, r3, #15
 8000fcc:	4a2f      	ldr	r2, [pc, #188]	; (800108c <SystemInit+0xe8>)
 8000fce:	f043 0307 	orr.w	r3, r3, #7
 8000fd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <SystemInit+0xec>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <SystemInit+0xec>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <SystemInit+0xec>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <SystemInit+0xec>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4929      	ldr	r1, [pc, #164]	; (8001090 <SystemInit+0xec>)
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <SystemInit+0xf0>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <SystemInit+0xe8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <SystemInit+0xe8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 030f 	bic.w	r3, r3, #15
 8001006:	4a21      	ldr	r2, [pc, #132]	; (800108c <SystemInit+0xe8>)
 8001008:	f043 0307 	orr.w	r3, r3, #7
 800100c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <SystemInit+0xec>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <SystemInit+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <SystemInit+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <SystemInit+0xec>)
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <SystemInit+0xf4>)
 8001024:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <SystemInit+0xec>)
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <SystemInit+0xf8>)
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <SystemInit+0xec>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <SystemInit+0xfc>)
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <SystemInit+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <SystemInit+0xec>)
 800103a:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <SystemInit+0xfc>)
 800103c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SystemInit+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <SystemInit+0xec>)
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <SystemInit+0xfc>)
 8001048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <SystemInit+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <SystemInit+0xec>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <SystemInit+0xec>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <SystemInit+0xec>)
 800105e:	2200      	movs	r2, #0
 8001060:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <SystemInit+0x100>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <SystemInit+0x104>)
 8001068:	4013      	ands	r3, r2
 800106a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800106e:	d202      	bcs.n	8001076 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <SystemInit+0x108>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <SystemInit+0x10c>)
 8001078:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800107c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	52002000 	.word	0x52002000
 8001090:	58024400 	.word	0x58024400
 8001094:	eaf6ed7f 	.word	0xeaf6ed7f
 8001098:	02020200 	.word	0x02020200
 800109c:	01ff0000 	.word	0x01ff0000
 80010a0:	01010280 	.word	0x01010280
 80010a4:	5c001000 	.word	0x5c001000
 80010a8:	ffff0000 	.word	0xffff0000
 80010ac:	51008108 	.word	0x51008108
 80010b0:	52004000 	.word	0x52004000

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b8:	f7ff ff74 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f006 fdfb 	bl	8007cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff faf5 	bl	80006d4 <main>
  bx  lr
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010f4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80010f8:	08007fe0 	.word	0x08007fe0
  ldr r2, =_sbss
 80010fc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001100:	24004280 	.word	0x24004280

08001104 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC3_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110e:	2003      	movs	r0, #3
 8001110:	f000 f90f 	bl	8001332 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001114:	f001 ff78 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8001118:	4602      	mov	r2, r0
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_Init+0x68>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	4913      	ldr	r1, [pc, #76]	; (8001174 <HAL_Init+0x6c>)
 8001126:	5ccb      	ldrb	r3, [r1, r3]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_Init+0x68>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_Init+0x6c>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_Init+0x70>)
 800114a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_Init+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	200f      	movs	r0, #15
 8001154:	f7ff fea6 	bl	8000ea4 <HAL_InitTick>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e002      	b.n	8001168 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001162:	f7ff fd5f 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024400 	.word	0x58024400
 8001174:	08007f38 	.word	0x08007f38
 8001178:	24000004 	.word	0x24000004
 800117c:	24000000 	.word	0x24000000

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	24000520 	.word	0x24000520

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	24000520 	.word	0x24000520

080011c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetREVID+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0c1b      	lsrs	r3, r3, #16
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	5c001000 	.word	0x5c001000

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	4313      	orrs	r3, r2
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	05fa0000 	.word	0x05fa0000

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff4c 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001356:	f7ff ff63 	bl	8001220 <__NVIC_GetPriorityGrouping>
 800135a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ffb3 	bl	80012cc <NVIC_EncodePriority>
 8001366:	4602      	mov	r2, r0
 8001368:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff82 	bl	8001278 <__NVIC_SetPriority>
}
 8001374:	bf00      	nop
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff56 	bl	800123c <__NVIC_EnableIRQ>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013a6:	4b89      	ldr	r3, [pc, #548]	; (80015cc <HAL_GPIO_Init+0x234>)
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013aa:	e194      	b.n	80016d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8186 	beq.w	80016d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x44>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 0201 	and.w	r2, r3, #1
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80e0 	beq.w	80016d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_GPIO_Init+0x238>)
 8001512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <HAL_GPIO_Init+0x238>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_GPIO_Init+0x238>)
 8001522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <HAL_GPIO_Init+0x23c>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <HAL_GPIO_Init+0x240>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d052      	beq.n	8001600 <HAL_GPIO_Init+0x268>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <HAL_GPIO_Init+0x244>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d031      	beq.n	80015c6 <HAL_GPIO_Init+0x22e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_GPIO_Init+0x248>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_GPIO_Init+0x22a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_GPIO_Init+0x24c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_GPIO_Init+0x250>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_GPIO_Init+0x254>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_GPIO_Init+0x258>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_GPIO_Init+0x25c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_GPIO_Init+0x260>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_GPIO_Init+0x264>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x20e>
 80015a2:	2309      	movs	r3, #9
 80015a4:	e02d      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015a6:	230a      	movs	r3, #10
 80015a8:	e02b      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e029      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e027      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e025      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015b6:	2305      	movs	r3, #5
 80015b8:	e023      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e021      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015be:	2303      	movs	r3, #3
 80015c0:	e01f      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e01d      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01b      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ca:	bf00      	nop
 80015cc:	58000080 	.word	0x58000080
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58000400 	.word	0x58000400
 80015d8:	58020000 	.word	0x58020000
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58020800 	.word	0x58020800
 80015e4:	58020c00 	.word	0x58020c00
 80015e8:	58021000 	.word	0x58021000
 80015ec:	58021400 	.word	0x58021400
 80015f0:	58021800 	.word	0x58021800
 80015f4:	58021c00 	.word	0x58021c00
 80015f8:	58022000 	.word	0x58022000
 80015fc:	58022400 	.word	0x58022400
 8001600:	2300      	movs	r3, #0
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001612:	4938      	ldr	r1, [pc, #224]	; (80016f4 <HAL_GPIO_Init+0x35c>)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f ae63 	bne.w	80013ac <HAL_GPIO_Init+0x14>
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	; 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	58000400 	.word	0x58000400

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001714:	e003      	b.n	800171e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	041a      	lsls	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	619a      	str	r2, [r3, #24]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e08b      	b.n	8001856 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fa84 	bl	8000c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2224      	movs	r2, #36	; 0x24
 800175c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800177c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800178c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	e006      	b.n	80017b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d108      	bne.n	80017ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e007      	b.n	80017de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_I2C_Init+0x134>)
 80017ea:	430b      	orrs	r3, r1
 80017ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69d9      	ldr	r1, [r3, #28]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	02008000 	.word	0x02008000

08001864 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	817b      	strh	r3, [r7, #10]
 8001876:	460b      	mov	r3, r1
 8001878:	813b      	strh	r3, [r7, #8]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b20      	cmp	r3, #32
 8001888:	f040 80f9 	bne.w	8001a7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_I2C_Mem_Write+0x34>
 8001892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0ed      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Mem_Write+0x4e>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0e6      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ba:	f7ff fc75 	bl	80011a8 <HAL_GetTick>
 80018be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2319      	movs	r3, #25
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fac3 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0d1      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2221      	movs	r2, #33	; 0x21
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2240      	movs	r2, #64	; 0x40
 80018e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a3a      	ldr	r2, [r7, #32]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001904:	88f8      	ldrh	r0, [r7, #6]
 8001906:	893a      	ldrh	r2, [r7, #8]
 8001908:	8979      	ldrh	r1, [r7, #10]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4603      	mov	r3, r0
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f9d3 	bl	8001cc0 <I2C_RequestMemoryWrite>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0a9      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d90e      	bls.n	8001954 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	22ff      	movs	r2, #255	; 0xff
 800193a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001940:	b2da      	uxtb	r2, r3
 8001942:	8979      	ldrh	r1, [r7, #10]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fc47 	bl	80021e0 <I2C_TransferConfig>
 8001952:	e00f      	b.n	8001974 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	b2da      	uxtb	r2, r3
 8001964:	8979      	ldrh	r1, [r7, #10]
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fc36 	bl	80021e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 fac6 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e07b      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d034      	beq.n	8001a2c <HAL_I2C_Mem_Write+0x1c8>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d130      	bne.n	8001a2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	2200      	movs	r2, #0
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fa3f 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e04d      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d90e      	bls.n	8001a0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	22ff      	movs	r2, #255	; 0xff
 80019f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	8979      	ldrh	r1, [r7, #10]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fbeb 	bl	80021e0 <I2C_TransferConfig>
 8001a0a:	e00f      	b.n	8001a2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	8979      	ldrh	r1, [r7, #10]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fbda 	bl	80021e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d19e      	bne.n	8001974 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 faac 	bl	8001f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e01a      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_I2C_Mem_Write+0x224>)
 8001a5e:	400b      	ands	r3, r1
 8001a60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
  }
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	fe00e800 	.word	0xfe00e800

08001a8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	817b      	strh	r3, [r7, #10]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	813b      	strh	r3, [r7, #8]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b20      	cmp	r3, #32
 8001ab0:	f040 80fd 	bne.w	8001cae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_I2C_Mem_Read+0x34>
 8001aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0f1      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Mem_Read+0x4e>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e0ea      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ae2:	f7ff fb61 	bl	80011a8 <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2319      	movs	r3, #25
 8001aee:	2201      	movs	r2, #1
 8001af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f9af 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0d5      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2222      	movs	r2, #34	; 0x22
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b2c:	88f8      	ldrh	r0, [r7, #6]
 8001b2e:	893a      	ldrh	r2, [r7, #8]
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f913 	bl	8001d68 <I2C_RequestMemoryRead>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0ad      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d90e      	bls.n	8001b7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	22ff      	movs	r2, #255	; 0xff
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <HAL_I2C_Mem_Read+0x22c>)
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fb33 	bl	80021e0 <I2C_TransferConfig>
 8001b7a:	e00f      	b.n	8001b9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_I2C_Mem_Read+0x22c>)
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fb22 	bl	80021e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f956 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e07c      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d034      	beq.n	8001c5c <HAL_I2C_Mem_Read+0x1d0>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d130      	bne.n	8001c5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	2200      	movs	r2, #0
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f927 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e04d      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d90e      	bls.n	8001c3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fad3 	bl	80021e0 <I2C_TransferConfig>
 8001c3a:	e00f      	b.n	8001c5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	8979      	ldrh	r1, [r7, #10]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fac2 	bl	80021e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d19a      	bne.n	8001b9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f994 	bl	8001f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e01a      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_I2C_Mem_Read+0x230>)
 8001c8e:	400b      	ands	r3, r1
 8001c90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	80002400 	.word	0x80002400
 8001cbc:	fe00e800 	.word	0xfe00e800

08001cc0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	817b      	strh	r3, [r7, #10]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	813b      	strh	r3, [r7, #8]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	8979      	ldrh	r1, [r7, #10]
 8001ce0:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <I2C_RequestMemoryWrite+0xa4>)
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fa79 	bl	80021e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	69b9      	ldr	r1, [r7, #24]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f909 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e02c      	b.n	8001d5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
 8001d12:	e015      	b.n	8001d40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d14:	893b      	ldrh	r3, [r7, #8]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	69b9      	ldr	r1, [r7, #24]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8ef 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e012      	b.n	8001d5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d36:	893b      	ldrh	r3, [r7, #8]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2200      	movs	r2, #0
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f884 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	80002000 	.word	0x80002000

08001d68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	4608      	mov	r0, r1
 8001d72:	4611      	mov	r1, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	817b      	strh	r3, [r7, #10]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	813b      	strh	r3, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	8979      	ldrh	r1, [r7, #10]
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <I2C_RequestMemoryRead+0xa4>)
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fa26 	bl	80021e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f8b6 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e02c      	b.n	8001e02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d105      	bne.n	8001dba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dae:	893b      	ldrh	r3, [r7, #8]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
 8001db8:	e015      	b.n	8001de6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dba:	893b      	ldrh	r3, [r7, #8]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f89c 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e012      	b.n	8001e02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ddc:	893b      	ldrh	r3, [r7, #8]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2140      	movs	r1, #64	; 0x40
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f831 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	80002000 	.word	0x80002000

08001e10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d103      	bne.n	8001e2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d007      	beq.n	8001e4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	619a      	str	r2, [r3, #24]
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e68:	e03b      	b.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f8d6 	bl	8002020 <I2C_IsErrorOccurred>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e041      	b.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d02d      	beq.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e86:	f7ff f98f 	bl	80011a8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d302      	bcc.n	8001e9c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d122      	bne.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d113      	bne.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4013      	ands	r3, r2
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d0b4      	beq.n	8001e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f16:	e033      	b.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f87f 	bl	8002020 <I2C_IsErrorOccurred>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e031      	b.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d025      	beq.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f34:	f7ff f938 	bl	80011a8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d302      	bcc.n	8001f4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11a      	bne.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d013      	beq.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f043 0220 	orr.w	r2, r3, #32
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e007      	b.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d1c4      	bne.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa4:	e02f      	b.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f838 	bl	8002020 <I2C_IsErrorOccurred>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e02d      	b.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fba:	f7ff f8f5 	bl	80011a8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d11a      	bne.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d013      	beq.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f043 0220 	orr.w	r2, r3, #32
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e007      	b.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d1c8      	bne.n	8001fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d068      	beq.n	800211e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2210      	movs	r2, #16
 8002052:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002054:	e049      	b.n	80020ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d045      	beq.n	80020ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff f8a3 	bl	80011a8 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_IsErrorOccurred+0x54>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d13a      	bne.n	80020ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002086:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002096:	d121      	bne.n	80020dc <I2C_IsErrorOccurred+0xbc>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800209e:	d01d      	beq.n	80020dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d01a      	beq.n	80020dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020b6:	f7ff f877 	bl	80011a8 <HAL_GetTick>
 80020ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020bc:	e00e      	b.n	80020dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020be:	f7ff f873 	bl	80011a8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b19      	cmp	r3, #25
 80020ca:	d907      	bls.n	80020dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80020da:	e006      	b.n	80020ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d1e9      	bne.n	80020be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d003      	beq.n	8002100 <I2C_IsErrorOccurred+0xe0>
 80020f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0aa      	beq.n	8002056 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002140:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002162:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f043 0302 	orr.w	r3, r3, #2
 800217a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002184:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800218c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01c      	beq.n	80021ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fe3b 	bl	8001e10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <I2C_IsErrorOccurred+0x1bc>)
 80021a6:	400b      	ands	r3, r1
 80021a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80021ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	fe00e800 	.word	0xfe00e800

080021e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	4613      	mov	r3, r2
 80021f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021f2:	897b      	ldrh	r3, [r7, #10]
 80021f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021f8:	7a7b      	ldrb	r3, [r7, #9]
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002200:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	4313      	orrs	r3, r2
 800220a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800220e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	0d5b      	lsrs	r3, r3, #21
 800221a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <I2C_TransferConfig+0x60>)
 8002220:	430b      	orrs	r3, r1
 8002222:	43db      	mvns	r3, r3
 8002224:	ea02 0103 	and.w	r1, r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	03ff63ff 	.word	0x03ff63ff

08002244 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b20      	cmp	r3, #32
 8002258:	d138      	bne.n	80022cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002264:	2302      	movs	r3, #2
 8002266:	e032      	b.n	80022ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d139      	bne.n	8002364 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e033      	b.n	8002366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2224      	movs	r2, #36	; 0x24
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800232c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e000      	b.n	8002366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002364:	2302      	movs	r3, #2
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_PWREx_ConfigSupply+0x70>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00a      	beq.n	800239e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <HAL_PWREx_ConfigSupply+0x70>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d001      	beq.n	800239a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e01f      	b.n	80023da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e01d      	b.n	80023da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_PWREx_ConfigSupply+0x70>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	490f      	ldr	r1, [pc, #60]	; (80023e4 <HAL_PWREx_ConfigSupply+0x70>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023ae:	f7fe fefb 	bl	80011a8 <HAL_GetTick>
 80023b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023b4:	e009      	b.n	80023ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023b6:	f7fe fef7 	bl	80011a8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c4:	d901      	bls.n	80023ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_PWREx_ConfigSupply+0x70>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d6:	d1ee      	bne.n	80023b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	58024800 	.word	0x58024800

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f000 bc48 	b.w	8002c8c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8088 	beq.w	800251a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240a:	4b99      	ldr	r3, [pc, #612]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002414:	4b96      	ldr	r3, [pc, #600]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	2b10      	cmp	r3, #16
 800241e:	d007      	beq.n	8002430 <HAL_RCC_OscConfig+0x48>
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b18      	cmp	r3, #24
 8002424:	d111      	bne.n	800244a <HAL_RCC_OscConfig+0x62>
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d10c      	bne.n	800244a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b8f      	ldr	r3, [pc, #572]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d06d      	beq.n	8002518 <HAL_RCC_OscConfig+0x130>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d169      	bne.n	8002518 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f000 bc21 	b.w	8002c8c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x7a>
 8002454:	4b86      	ldr	r3, [pc, #536]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a85      	ldr	r2, [pc, #532]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e02e      	b.n	80024c0 <HAL_RCC_OscConfig+0xd8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x9c>
 800246a:	4b81      	ldr	r3, [pc, #516]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a80      	ldr	r2, [pc, #512]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b7e      	ldr	r3, [pc, #504]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7d      	ldr	r2, [pc, #500]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xd8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0xc0>
 800248e:	4b78      	ldr	r3, [pc, #480]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a77      	ldr	r2, [pc, #476]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b75      	ldr	r3, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a74      	ldr	r2, [pc, #464]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xd8>
 80024a8:	4b71      	ldr	r3, [pc, #452]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a70      	ldr	r2, [pc, #448]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b6e      	ldr	r3, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6d      	ldr	r2, [pc, #436]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fe6e 	bl	80011a8 <HAL_GetTick>
 80024cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fe6a 	bl	80011a8 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e3d4      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe8>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fe5a 	bl	80011a8 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe fe56 	bl	80011a8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e3c0      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800250a:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x110>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80ca 	beq.w	80026bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002528:	4b51      	ldr	r3, [pc, #324]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002530:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002532:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_RCC_OscConfig+0x166>
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b18      	cmp	r3, #24
 8002542:	d156      	bne.n	80025f2 <HAL_RCC_OscConfig+0x20a>
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d151      	bne.n	80025f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x17e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e392      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002566:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0219 	bic.w	r2, r3, #25
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	493f      	ldr	r1, [pc, #252]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fe16 	bl	80011a8 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fe12 	bl	80011a8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e37c      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	f7fe fe0f 	bl	80011c0 <HAL_GetREVID>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d817      	bhi.n	80025dc <HAL_RCC_OscConfig+0x1f4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d108      	bne.n	80025c6 <HAL_RCC_OscConfig+0x1de>
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025bc:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c4:	e07a      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	031b      	lsls	r3, r3, #12
 80025d4:	4926      	ldr	r1, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025da:	e06f      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	4921      	ldr	r1, [pc, #132]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f0:	e064      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d047      	beq.n	800268a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0219 	bic.w	r2, r3, #25
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fdcc 	bl	80011a8 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe fdc8 	bl	80011a8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e332      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	f7fe fdc5 	bl	80011c0 <HAL_GetREVID>
 8002636:	4603      	mov	r3, r0
 8002638:	f241 0203 	movw	r2, #4099	; 0x1003
 800263c:	4293      	cmp	r3, r2
 800263e:	d819      	bhi.n	8002674 <HAL_RCC_OscConfig+0x28c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d108      	bne.n	800265a <HAL_RCC_OscConfig+0x272>
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	6053      	str	r3, [r2, #4]
 8002658:	e030      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	031b      	lsls	r3, r3, #12
 8002668:	4901      	ldr	r1, [pc, #4]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
 800266e:	e025      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
 8002670:	58024400 	.word	0x58024400
 8002674:	4b9a      	ldr	r3, [pc, #616]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	4997      	ldr	r1, [pc, #604]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e018      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b95      	ldr	r3, [pc, #596]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a94      	ldr	r2, [pc, #592]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe fd87 	bl	80011a8 <HAL_GetTick>
 800269a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe fd83 	bl	80011a8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e2ed      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b0:	4b8b      	ldr	r3, [pc, #556]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a9 	beq.w	800281c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ca:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d4:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d007      	beq.n	80026f0 <HAL_RCC_OscConfig+0x308>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b18      	cmp	r3, #24
 80026e4:	d13a      	bne.n	800275c <HAL_RCC_OscConfig+0x374>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d135      	bne.n	800275c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_OscConfig+0x320>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b80      	cmp	r3, #128	; 0x80
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e2c1      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002708:	f7fe fd5a 	bl	80011c0 <HAL_GetREVID>
 800270c:	4603      	mov	r3, r0
 800270e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002712:	4293      	cmp	r3, r2
 8002714:	d817      	bhi.n	8002746 <HAL_RCC_OscConfig+0x35e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	2b20      	cmp	r3, #32
 800271c:	d108      	bne.n	8002730 <HAL_RCC_OscConfig+0x348>
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002726:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800272c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272e:	e075      	b.n	800281c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002730:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	069b      	lsls	r3, r3, #26
 800273e:	4968      	ldr	r1, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002744:	e06a      	b.n	800281c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002746:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	4962      	ldr	r1, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800275a:	e05f      	b.n	800281c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d042      	beq.n	80027ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002764:	4b5e      	ldr	r3, [pc, #376]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a5d      	ldr	r2, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fd1a 	bl	80011a8 <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002778:	f7fe fd16 	bl	80011a8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e280      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800278a:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002796:	f7fe fd13 	bl	80011c0 <HAL_GetREVID>
 800279a:	4603      	mov	r3, r0
 800279c:	f241 0203 	movw	r2, #4099	; 0x1003
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d817      	bhi.n	80027d4 <HAL_RCC_OscConfig+0x3ec>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d108      	bne.n	80027be <HAL_RCC_OscConfig+0x3d6>
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	6053      	str	r3, [r2, #4]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0x434>
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	4944      	ldr	r1, [pc, #272]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
 80027d2:	e023      	b.n	800281c <HAL_RCC_OscConfig+0x434>
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	493f      	ldr	r1, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
 80027e8:	e018      	b.n	800281c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3c      	ldr	r2, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fcd7 	bl	80011a8 <HAL_GetTick>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027fe:	f7fe fcd3 	bl	80011a8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e23d      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002810:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d036      	beq.n	8002896 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d019      	beq.n	8002864 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002834:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe fcb4 	bl	80011a8 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002844:	f7fe fcb0 	bl	80011a8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e21a      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x45c>
 8002862:	e018      	b.n	8002896 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fc9a 	bl	80011a8 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fc96 	bl	80011a8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e200      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d039      	beq.n	8002916 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fc77 	bl	80011a8 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028be:	f7fe fc73 	bl	80011a8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1dd      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x4d6>
 80028dc:	e01b      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
 80028de:	bf00      	nop
 80028e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e4:	4b9b      	ldr	r3, [pc, #620]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a9a      	ldr	r2, [pc, #616]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80028ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028f0:	f7fe fc5a 	bl	80011a8 <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f8:	f7fe fc56 	bl	80011a8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1c0      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800290a:	4b92      	ldr	r3, [pc, #584]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8081 	beq.w	8002a26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002924:	4b8c      	ldr	r3, [pc, #560]	; (8002b58 <HAL_RCC_OscConfig+0x770>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a8b      	ldr	r2, [pc, #556]	; (8002b58 <HAL_RCC_OscConfig+0x770>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002930:	f7fe fc3a 	bl	80011a8 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002938:	f7fe fc36 	bl	80011a8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1a0      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294a:	4b83      	ldr	r3, [pc, #524]	; (8002b58 <HAL_RCC_OscConfig+0x770>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x584>
 800295e:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	e02d      	b.n	80029c8 <HAL_RCC_OscConfig+0x5e0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10c      	bne.n	800298e <HAL_RCC_OscConfig+0x5a6>
 8002974:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a76      	ldr	r2, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	4b74      	ldr	r3, [pc, #464]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a73      	ldr	r2, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	e01c      	b.n	80029c8 <HAL_RCC_OscConfig+0x5e0>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5c8>
 8002996:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a6e      	ldr	r2, [pc, #440]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0x5e0>
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a67      	ldr	r2, [pc, #412]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a64      	ldr	r2, [pc, #400]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029c2:	f023 0304 	bic.w	r3, r3, #4
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fbea 	bl	80011a8 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fbe6 	bl	80011a8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e14e      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ee:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ee      	beq.n	80029d8 <HAL_RCC_OscConfig+0x5f0>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fbd4 	bl	80011a8 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fe fbd0 	bl	80011a8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e138      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1a:	4b4e      	ldr	r3, [pc, #312]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ee      	bne.n	8002a04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 812d 	beq.w	8002c8a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a38:	2b18      	cmp	r3, #24
 8002a3a:	f000 80bd 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	f040 809e 	bne.w	8002b84 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fba8 	bl	80011a8 <HAL_GetTick>
 8002a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fba4 	bl	80011a8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e10e      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCC_OscConfig+0x774>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4931      	ldr	r1, [pc, #196]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	628b      	str	r3, [r1, #40]	; 0x28
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	3b01      	subs	r3, #1
 8002abe:	061b      	lsls	r3, r3, #24
 8002ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ac4:	4923      	ldr	r1, [pc, #140]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCC_OscConfig+0x778>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ae2:	00d2      	lsls	r2, r2, #3
 8002ae4:	491b      	ldr	r1, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f023 020c 	bic.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4917      	ldr	r1, [pc, #92]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	f023 0202 	bic.w	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	4912      	ldr	r1, [pc, #72]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fb2d 	bl	80011a8 <HAL_GetTick>
 8002b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b50:	e011      	b.n	8002b76 <HAL_RCC_OscConfig+0x78e>
 8002b52:	bf00      	nop
 8002b54:	58024400 	.word	0x58024400
 8002b58:	58024800 	.word	0x58024800
 8002b5c:	fffffc0c 	.word	0xfffffc0c
 8002b60:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fb20 	bl	80011a8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e08a      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x77c>
 8002b82:	e082      	b.n	8002c8a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a42      	ldr	r2, [pc, #264]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fb0a 	bl	80011a8 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe fb06 	bl	80011a8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e070      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002baa:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x7b0>
 8002bb6:	e068      	b.n	8002c8a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bbe:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d031      	beq.n	8002c30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0203 	and.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d12a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d122      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d11a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0a5b      	lsrs	r3, r3, #9
 8002bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d108      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	0e1b      	lsrs	r3, r3, #24
 8002c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e02b      	b.n	8002c8c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c34:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d01f      	beq.n	8002c8a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c56:	f7fe faa7 	bl	80011a8 <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c5c:	bf00      	nop
 8002c5e:	f7fe faa3 	bl	80011a8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d0f9      	beq.n	8002c5e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_OscConfig+0x8b0>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c76:	00d2      	lsls	r2, r2, #3
 8002c78:	4906      	ldr	r1, [pc, #24]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_RCC_OscConfig+0x8ac>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3730      	adds	r7, #48	; 0x30
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	58024400 	.word	0x58024400
 8002c98:	ffff0007 	.word	0xffff0007

08002c9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e19c      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b8a      	ldr	r3, [pc, #552]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d910      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b87      	ldr	r3, [pc, #540]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 020f 	bic.w	r2, r3, #15
 8002cc6:	4985      	ldr	r1, [pc, #532]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b83      	ldr	r3, [pc, #524]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e184      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	4b7b      	ldr	r3, [pc, #492]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d908      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cfc:	4b78      	ldr	r3, [pc, #480]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4975      	ldr	r1, [pc, #468]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d908      	bls.n	8002d3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	496a      	ldr	r1, [pc, #424]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d908      	bls.n	8002d6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d58:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	495e      	ldr	r1, [pc, #376]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d908      	bls.n	8002d98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d86:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4953      	ldr	r1, [pc, #332]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d908      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f023 020f 	bic.w	r2, r3, #15
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4947      	ldr	r1, [pc, #284]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d055      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dd2:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4940      	ldr	r1, [pc, #256]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dec:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0f6      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d115      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0ea      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e1c:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0de      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0d6      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f023 0207 	bic.w	r2, r3, #7
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4e:	f7fe f9ab 	bl	80011a8 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e56:	f7fe f9a7 	bl	80011a8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e0be      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d1eb      	bne.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d010      	beq.n	8002eac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d208      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d214      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 020f 	bic.w	r2, r3, #15
 8002ec2:	4906      	ldr	r1, [pc, #24]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e086      	b.n	8002fea <HAL_RCC_ClockConfig+0x34e>
 8002edc:	52002000 	.word	0x52002000
 8002ee0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d208      	bcs.n	8002f12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f00:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	4939      	ldr	r1, [pc, #228]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d208      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f2e:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	492e      	ldr	r1, [pc, #184]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d208      	bcs.n	8002f6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d208      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4917      	ldr	r1, [pc, #92]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f9c:	f000 f834 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	4912      	ldr	r1, [pc, #72]	; (8002ff8 <HAL_RCC_ClockConfig+0x35c>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x358>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <HAL_RCC_ClockConfig+0x35c>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x360>)
 8002fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_RCC_ClockConfig+0x364>)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x368>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd ff60 	bl	8000ea4 <HAL_InitTick>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	08007f38 	.word	0x08007f38
 8002ffc:	24000004 	.word	0x24000004
 8003000:	24000000 	.word	0x24000000
 8003004:	24000008 	.word	0x24000008

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300e:	4bb3      	ldr	r3, [pc, #716]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003016:	2b18      	cmp	r3, #24
 8003018:	f200 8155 	bhi.w	80032c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_RCC_GetSysClockFreq+0x1c>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003089 	.word	0x08003089
 8003028:	080032c7 	.word	0x080032c7
 800302c:	080032c7 	.word	0x080032c7
 8003030:	080032c7 	.word	0x080032c7
 8003034:	080032c7 	.word	0x080032c7
 8003038:	080032c7 	.word	0x080032c7
 800303c:	080032c7 	.word	0x080032c7
 8003040:	080032c7 	.word	0x080032c7
 8003044:	080030af 	.word	0x080030af
 8003048:	080032c7 	.word	0x080032c7
 800304c:	080032c7 	.word	0x080032c7
 8003050:	080032c7 	.word	0x080032c7
 8003054:	080032c7 	.word	0x080032c7
 8003058:	080032c7 	.word	0x080032c7
 800305c:	080032c7 	.word	0x080032c7
 8003060:	080032c7 	.word	0x080032c7
 8003064:	080030b5 	.word	0x080030b5
 8003068:	080032c7 	.word	0x080032c7
 800306c:	080032c7 	.word	0x080032c7
 8003070:	080032c7 	.word	0x080032c7
 8003074:	080032c7 	.word	0x080032c7
 8003078:	080032c7 	.word	0x080032c7
 800307c:	080032c7 	.word	0x080032c7
 8003080:	080032c7 	.word	0x080032c7
 8003084:	080030bb 	.word	0x080030bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003088:	4b94      	ldr	r3, [pc, #592]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003094:	4b91      	ldr	r3, [pc, #580]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	4a90      	ldr	r2, [pc, #576]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030a6:	e111      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030a8:	4b8d      	ldr	r3, [pc, #564]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030aa:	61bb      	str	r3, [r7, #24]
      break;
 80030ac:	e10e      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030ae:	4b8d      	ldr	r3, [pc, #564]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030b0:	61bb      	str	r3, [r7, #24]
      break;
 80030b2:	e10b      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030b4:	4b8c      	ldr	r3, [pc, #560]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030b6:	61bb      	str	r3, [r7, #24]
      break;
 80030b8:	e108      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030c4:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030d0:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030da:	4b80      	ldr	r3, [pc, #512]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	08db      	lsrs	r3, r3, #3
 80030e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80e1 	beq.w	80032c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b02      	cmp	r3, #2
 8003102:	f000 8083 	beq.w	800320c <HAL_RCC_GetSysClockFreq+0x204>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	f200 80a1 	bhi.w	8003250 <HAL_RCC_GetSysClockFreq+0x248>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x114>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d056      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800311a:	e099      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d02d      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003128:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	4a6b      	ldr	r2, [pc, #428]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003152:	4b62      	ldr	r3, [pc, #392]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003162:	ed97 6a02 	vldr	s12, [r7, #8]
 8003166:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800316a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003182:	e087      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c6:	e065      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031da:	4b40      	ldr	r3, [pc, #256]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80031f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800320a:	e043      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003216:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800321a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003232:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800324e:	e021      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800325e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003272:	ed97 6a02 	vldr	s12, [r7, #8]
 8003276:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800327a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003292:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	0a5b      	lsrs	r3, r3, #9
 800329a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800329e:	3301      	adds	r3, #1
 80032a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80032b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032b8:	ee17 3a90 	vmov	r3, s15
 80032bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032be:	e005      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
      break;
 80032c4:	e002      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032c8:	61bb      	str	r3, [r7, #24]
      break;
 80032ca:	bf00      	nop
  }

  return sysclockfreq;
 80032cc:	69bb      	ldr	r3, [r7, #24]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	58024400 	.word	0x58024400
 80032e0:	03d09000 	.word	0x03d09000
 80032e4:	003d0900 	.word	0x003d0900
 80032e8:	007a1200 	.word	0x007a1200
 80032ec:	46000000 	.word	0x46000000
 80032f0:	4c742400 	.word	0x4c742400
 80032f4:	4a742400 	.word	0x4a742400
 80032f8:	4af42400 	.word	0x4af42400

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003302:	f7ff fe81 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <HAL_RCC_GetHCLKFreq+0x50>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490f      	ldr	r1, [pc, #60]	; (8003350 <HAL_RCC_GetHCLKFreq+0x54>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_GetHCLKFreq+0x50>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_GetHCLKFreq+0x54>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_RCC_GetHCLKFreq+0x58>)
 8003338:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800333a:	4a07      	ldr	r2, [pc, #28]	; (8003358 <HAL_RCC_GetHCLKFreq+0x5c>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_RCC_GetHCLKFreq+0x58>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	58024400 	.word	0x58024400
 8003350:	08007f38 	.word	0x08007f38
 8003354:	24000004 	.word	0x24000004
 8003358:	24000000 	.word	0x24000000

0800335c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003360:	f7ff ffcc 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4904      	ldr	r1, [pc, #16]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	58024400 	.word	0x58024400
 8003384:	08007f38 	.word	0x08007f38

08003388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800338c:	f7ff ffb6 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4904      	ldr	r1, [pc, #16]	; (80033b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	58024400 	.word	0x58024400
 80033b0:	08007f38 	.word	0x08007f38

080033b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	223f      	movs	r2, #63	; 0x3f
 80033c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_GetClockConfig+0x7c>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0207 	and.w	r2, r3, #7
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_RCC_GetClockConfig+0x7c>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_RCC_GetClockConfig+0x7c>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_GetClockConfig+0x7c>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <HAL_RCC_GetClockConfig+0x7c>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_GetClockConfig+0x7c>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_RCC_GetClockConfig+0x7c>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_GetClockConfig+0x80>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	58024400 	.word	0x58024400
 8003434:	52002000 	.word	0x52002000

08003438 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b0ca      	sub	sp, #296	; 0x128
 800343e:	af00      	add	r7, sp, #0
 8003440:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800345c:	2500      	movs	r5, #0
 800345e:	ea54 0305 	orrs.w	r3, r4, r5
 8003462:	d049      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800346e:	d02f      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003470:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003474:	d828      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347a:	d01a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800347c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003480:	d822      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348a:	d007      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800348c:	e01c      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348e:	4bb8      	ldr	r3, [pc, #736]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	4ab7      	ldr	r2, [pc, #732]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800349a:	e01a      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a0:	3308      	adds	r3, #8
 80034a2:	2102      	movs	r1, #2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fc8f 	bl	8004dc8 <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034b0:	e00f      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b6:	3328      	adds	r3, #40	; 0x28
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fd36 	bl	8004f2c <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034c6:	e004      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034ce:	e000      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034da:	4ba5      	ldr	r3, [pc, #660]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e8:	4aa1      	ldr	r2, [pc, #644]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ea:	430b      	orrs	r3, r1
 80034ec:	6513      	str	r3, [r2, #80]	; 0x50
 80034ee:	e003      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003504:	f04f 0900 	mov.w	r9, #0
 8003508:	ea58 0309 	orrs.w	r3, r8, r9
 800350c:	d047      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	2b04      	cmp	r3, #4
 8003516:	d82a      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003535 	.word	0x08003535
 8003524:	08003543 	.word	0x08003543
 8003528:	08003559 	.word	0x08003559
 800352c:	08003577 	.word	0x08003577
 8003530:	08003577 	.word	0x08003577
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003534:	4b8e      	ldr	r3, [pc, #568]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4a8d      	ldr	r2, [pc, #564]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003540:	e01a      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003546:	3308      	adds	r3, #8
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fc3c 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003556:	e00f      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	3328      	adds	r3, #40	; 0x28
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fce3 	bl	8004f2c <RCCEx_PLL3_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003580:	4b7b      	ldr	r3, [pc, #492]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	f023 0107 	bic.w	r1, r3, #7
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	4a78      	ldr	r2, [pc, #480]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003590:	430b      	orrs	r3, r1
 8003592:	6513      	str	r3, [r2, #80]	; 0x50
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800359a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80035aa:	f04f 0b00 	mov.w	fp, #0
 80035ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80035b2:	d04c      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035be:	d030      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d829      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035c6:	2bc0      	cmp	r3, #192	; 0xc0
 80035c8:	d02d      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035ca:	2bc0      	cmp	r3, #192	; 0xc0
 80035cc:	d825      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d018      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d821      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d007      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80035de:	e01c      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b63      	ldr	r3, [pc, #396]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a62      	ldr	r2, [pc, #392]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035ec:	e01c      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f2:	3308      	adds	r3, #8
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fbe6 	bl	8004dc8 <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003608:	3328      	adds	r3, #40	; 0x28
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fc8d 	bl	8004f2c <RCCEx_PLL3_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003628:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003630:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	4a4c      	ldr	r2, [pc, #304]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003640:	430b      	orrs	r3, r1
 8003642:	6513      	str	r3, [r2, #80]	; 0x50
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800364a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800365a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800365e:	2300      	movs	r3, #0
 8003660:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003664:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d053      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800367a:	d035      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800367c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003680:	d82e      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003682:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003686:	d031      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003688:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800368c:	d828      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800368e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003692:	d01a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003698:	d822      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800369e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a2:	d007      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036a4:	e01c      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a6:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	4a31      	ldr	r2, [pc, #196]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b2:	e01c      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b8:	3308      	adds	r3, #8
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fb83 	bl	8004dc8 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036c8:	e011      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	3328      	adds	r3, #40	; 0x28
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 fc2a 	bl	8004f2c <RCCEx_PLL3_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036de:	e006      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036e6:	e002      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003708:	430b      	orrs	r3, r1
 800370a:	6593      	str	r3, [r2, #88]	; 0x58
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003722:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800372c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003730:	460b      	mov	r3, r1
 8003732:	4313      	orrs	r3, r2
 8003734:	d056      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800373e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003742:	d038      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003748:	d831      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800374a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800374e:	d034      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003754:	d82b      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800375a:	d01d      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800375c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003760:	d825      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003766:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800376c:	e01f      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800376e:	bf00      	nop
 8003770:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4ba2      	ldr	r3, [pc, #648]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4aa1      	ldr	r2, [pc, #644]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003780:	e01c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003786:	3308      	adds	r3, #8
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fb1c 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	3328      	adds	r3, #40	; 0x28
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fbc3 	bl	8004f2c <RCCEx_PLL3_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037b4:	e002      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037c4:	4b8e      	ldr	r3, [pc, #568]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037d4:	4a8a      	ldr	r2, [pc, #552]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6593      	str	r3, [r2, #88]	; 0x58
 80037da:	e003      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80037f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80037fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80037fe:	460b      	mov	r3, r1
 8003800:	4313      	orrs	r3, r2
 8003802:	d03a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	2b30      	cmp	r3, #48	; 0x30
 800380c:	d01f      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d819      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003812:	2b20      	cmp	r3, #32
 8003814:	d00c      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d815      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800381e:	2b10      	cmp	r3, #16
 8003820:	d111      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003822:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800382e:	e011      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003834:	3308      	adds	r3, #8
 8003836:	2102      	movs	r1, #2
 8003838:	4618      	mov	r0, r3
 800383a:	f001 fac5 	bl	8004dc8 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003844:	e006      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800384c:	e002      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800385c:	4b68      	ldr	r3, [pc, #416]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003860:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386c:	430b      	orrs	r3, r1
 800386e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003886:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003890:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d051      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a4:	d035      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038aa:	d82e      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038b0:	d031      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038b6:	d828      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	d01a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c2:	d822      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d007      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80038ce:	e01c      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d0:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038dc:	e01c      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e2:	3308      	adds	r3, #8
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fa6e 	bl	8004dc8 <RCCEx_PLL2_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038f2:	e011      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f8:	3328      	adds	r3, #40	; 0x28
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fb15 	bl	8004f2c <RCCEx_PLL3_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003908:	e006      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003910:	e002      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392e:	4a34      	ldr	r2, [pc, #208]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003930:	430b      	orrs	r3, r1
 8003932:	6513      	str	r3, [r2, #80]	; 0x50
 8003934:	e003      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800393a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800394a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003954:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003958:	460b      	mov	r3, r1
 800395a:	4313      	orrs	r3, r2
 800395c:	d056      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	d033      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800396a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396e:	d82c      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003974:	d02f      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003976:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800397a:	d826      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800397c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003980:	d02b      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003982:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003986:	d820      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800398c:	d012      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800398e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003992:	d81a      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d022      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d115      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a2:	3308      	adds	r3, #8
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fa0e 	bl	8004dc8 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039b2:	e015      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b8:	3328      	adds	r3, #40	; 0x28
 80039ba:	2101      	movs	r1, #1
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fab5 	bl	8004f2c <RCCEx_PLL3_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039c8:	e00a      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039d2:	bf00      	nop
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f6:	4a02      	ldr	r2, [pc, #8]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6513      	str	r3, [r2, #80]	; 0x50
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039fe:	bf00      	nop
 8003a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d055      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a38:	d033      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3e:	d82c      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d02f      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d826      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a50:	d02b      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a56:	d820      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5c:	d012      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a62:	d81a      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d022      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6c:	d115      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a72:	3308      	adds	r3, #8
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f9a6 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a82:	e015      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a88:	3328      	adds	r3, #40	; 0x28
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fa4d 	bl	8004f2c <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ab8:	4ba3      	ldr	r3, [pc, #652]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ac8:	4a9f      	ldr	r2, [pc, #636]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ace:	e003      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003af2:	460b      	mov	r3, r1
 8003af4:	4313      	orrs	r3, r2
 8003af6:	d037      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b02:	d00e      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b08:	d816      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d018      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b12:	d111      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b14:	4b8c      	ldr	r3, [pc, #560]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4a8b      	ldr	r2, [pc, #556]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b20:	e00f      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b26:	3308      	adds	r3, #8
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f94c 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b36:	e004      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b3e:	e000      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b4a:	4b7f      	ldr	r3, [pc, #508]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a7b      	ldr	r2, [pc, #492]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	6513      	str	r3, [r2, #80]	; 0x50
 8003b5e:	e003      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4313      	orrs	r3, r2
 8003b86:	d039      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d81c      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b92:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b98:	08003bd5 	.word	0x08003bd5
 8003b9c:	08003ba9 	.word	0x08003ba9
 8003ba0:	08003bb7 	.word	0x08003bb7
 8003ba4:	08003bd5 	.word	0x08003bd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b67      	ldr	r3, [pc, #412]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a66      	ldr	r2, [pc, #408]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bb4:	e00f      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f902 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bca:	e004      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bde:	4b5a      	ldr	r3, [pc, #360]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	f023 0103 	bic.w	r1, r3, #3
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	4a56      	ldr	r2, [pc, #344]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf2:	e003      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f000 809f 	beq.w	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1e:	4b4b      	ldr	r3, [pc, #300]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c2a:	f7fd fabd 	bl	80011a8 <HAL_GetTick>
 8003c2e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c32:	e00b      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c34:	f7fd fab8 	bl	80011a8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b64      	cmp	r3, #100	; 0x64
 8003c42:	d903      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c4a:	e005      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c4c:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ed      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d179      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c60:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c6c:	4053      	eors	r3, r2
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c76:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c9a:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	d118      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fa7a 	bl	80011a8 <HAL_GetTick>
 8003cb4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cb8:	e00d      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fd fa75 	bl	80011a8 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d903      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003cd4:	e005      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0eb      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d129      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfa:	d10e      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d0c:	091a      	lsrs	r2, r3, #4
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6113      	str	r3, [r2, #16]
 8003d18:	e005      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d24:	6113      	str	r3, [r2, #16]
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d36:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3c:	e00e      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003d46:	e009      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	58024800 	.word	0x58024800
 8003d50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f002 0301 	and.w	r3, r2, #1
 8003d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f000 8089 	beq.w	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d84:	2b28      	cmp	r3, #40	; 0x28
 8003d86:	d86b      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d88:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003e69 	.word	0x08003e69
 8003d94:	08003e61 	.word	0x08003e61
 8003d98:	08003e61 	.word	0x08003e61
 8003d9c:	08003e61 	.word	0x08003e61
 8003da0:	08003e61 	.word	0x08003e61
 8003da4:	08003e61 	.word	0x08003e61
 8003da8:	08003e61 	.word	0x08003e61
 8003dac:	08003e61 	.word	0x08003e61
 8003db0:	08003e35 	.word	0x08003e35
 8003db4:	08003e61 	.word	0x08003e61
 8003db8:	08003e61 	.word	0x08003e61
 8003dbc:	08003e61 	.word	0x08003e61
 8003dc0:	08003e61 	.word	0x08003e61
 8003dc4:	08003e61 	.word	0x08003e61
 8003dc8:	08003e61 	.word	0x08003e61
 8003dcc:	08003e61 	.word	0x08003e61
 8003dd0:	08003e4b 	.word	0x08003e4b
 8003dd4:	08003e61 	.word	0x08003e61
 8003dd8:	08003e61 	.word	0x08003e61
 8003ddc:	08003e61 	.word	0x08003e61
 8003de0:	08003e61 	.word	0x08003e61
 8003de4:	08003e61 	.word	0x08003e61
 8003de8:	08003e61 	.word	0x08003e61
 8003dec:	08003e61 	.word	0x08003e61
 8003df0:	08003e69 	.word	0x08003e69
 8003df4:	08003e61 	.word	0x08003e61
 8003df8:	08003e61 	.word	0x08003e61
 8003dfc:	08003e61 	.word	0x08003e61
 8003e00:	08003e61 	.word	0x08003e61
 8003e04:	08003e61 	.word	0x08003e61
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e61 	.word	0x08003e61
 8003e10:	08003e69 	.word	0x08003e69
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e61 	.word	0x08003e61
 8003e1c:	08003e61 	.word	0x08003e61
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e69 	.word	0x08003e69
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e38:	3308      	adds	r3, #8
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 ffc3 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	3328      	adds	r3, #40	; 0x28
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f86a 	bl	8004f2c <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e72:	4bbf      	ldr	r3, [pc, #764]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e80:	4abb      	ldr	r2, [pc, #748]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6553      	str	r3, [r2, #84]	; 0x54
 8003e86:	e003      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f002 0302 	and.w	r3, r2, #2
 8003e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ea6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d041      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d824      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003ed9 	.word	0x08003ed9
 8003ec8:	08003eef 	.word	0x08003eef
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f0d 	.word	0x08003f0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	3308      	adds	r3, #8
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 ff71 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003eec:	e00f      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef2:	3328      	adds	r3, #40	; 0x28
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f818 	bl	8004f2c <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f02:	e004      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f16:	4b96      	ldr	r3, [pc, #600]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	f023 0107 	bic.w	r1, r3, #7
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f24:	4a92      	ldr	r2, [pc, #584]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6553      	str	r3, [r2, #84]	; 0x54
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f002 0304 	and.w	r3, r2, #4
 8003f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4313      	orrs	r3, r2
 8003f52:	d044      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d825      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003fb5 	.word	0x08003fb5
 8003f6c:	08003f81 	.word	0x08003f81
 8003f70:	08003f97 	.word	0x08003f97
 8003f74:	08003fb5 	.word	0x08003fb5
 8003f78:	08003fb5 	.word	0x08003fb5
 8003f7c:	08003fb5 	.word	0x08003fb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f84:	3308      	adds	r3, #8
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 ff1d 	bl	8004dc8 <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f94:	e00f      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f9a:	3328      	adds	r3, #40	; 0x28
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 ffc4 	bl	8004f2c <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fbe:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	f023 0107 	bic.w	r1, r3, #7
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fce:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f002 0320 	and.w	r3, r2, #32
 8003fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d055      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800400a:	d033      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800400c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004010:	d82c      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d02f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d826      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800401e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004022:	d02b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004028:	d820      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402e:	d012      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d81a      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d022      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403e:	d115      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004044:	3308      	adds	r3, #8
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 febd 	bl	8004dc8 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004054:	e015      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405a:	3328      	adds	r3, #40	; 0x28
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f000 ff64 	bl	8004f2c <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408a:	4b39      	ldr	r3, [pc, #228]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	4a35      	ldr	r2, [pc, #212]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6553      	str	r3, [r2, #84]	; 0x54
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80040b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	d058      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040d6:	d033      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80040d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040dc:	d82c      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d02f      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d826      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ee:	d02b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80040f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f4:	d820      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fa:	d012      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004100:	d81a      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d022      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d115      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	3308      	adds	r3, #8
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fe57 	bl	8004dc8 <RCCEx_PLL2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004120:	e015      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004126:	3328      	adds	r3, #40	; 0x28
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fefe 	bl	8004f2c <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004136:	e00a      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800413e:	e006      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004140:	bf00      	nop
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10e      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004166:	4a02      	ldr	r2, [pc, #8]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6593      	str	r3, [r2, #88]	; 0x58
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800416e:	bf00      	nop
 8004170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004192:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d055      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041a8:	d033      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041ae:	d82c      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	d02f      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ba:	d826      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041c0:	d02b      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80041c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041c6:	d820      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041cc:	d012      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80041ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d2:	d81a      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d022      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041dc:	d115      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	3308      	adds	r3, #8
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fdee 	bl	8004dc8 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041f2:	e015      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f8:	3328      	adds	r3, #40	; 0x28
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fe95 	bl	8004f2c <RCCEx_PLL3_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004208:	e00a      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004210:	e006      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004212:	bf00      	nop
 8004214:	e004      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004216:	bf00      	nop
 8004218:	e002      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800421e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004228:	4ba1      	ldr	r3, [pc, #644]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004238:	4a9d      	ldr	r2, [pc, #628]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423a:	430b      	orrs	r3, r1
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
 800423e:	e003      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f002 0308 	and.w	r3, r2, #8
 8004254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800425e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d01e      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d10c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427a:	3328      	adds	r3, #40	; 0x28
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fe54 	bl	8004f2c <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004290:	4b87      	ldr	r3, [pc, #540]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a0:	4a83      	ldr	r2, [pc, #524]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a2:	430b      	orrs	r3, r1
 80042a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f002 0310 	and.w	r3, r2, #16
 80042b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80042c0:	460b      	mov	r3, r1
 80042c2:	4313      	orrs	r3, r2
 80042c4:	d01e      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d2:	d10c      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d8:	3328      	adds	r3, #40	; 0x28
 80042da:	2102      	movs	r1, #2
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fe25 	bl	8004f2c <RCCEx_PLL3_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042ee:	4b70      	ldr	r3, [pc, #448]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042fe:	4a6c      	ldr	r2, [pc, #432]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004300:	430b      	orrs	r3, r1
 8004302:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800431a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d03e      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800432c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004330:	d022      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004336:	d81b      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d00b      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004342:	e015      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	3308      	adds	r3, #8
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fd3b 	bl	8004dc8 <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004358:	e00f      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	3328      	adds	r3, #40	; 0x28
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fde2 	bl	8004f2c <RCCEx_PLL3_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800436e:	e004      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004376:	e000      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004382:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004386:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004392:	4a47      	ldr	r2, [pc, #284]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004394:	430b      	orrs	r3, r1
 8004396:	6593      	str	r3, [r2, #88]	; 0x58
 8004398:	e003      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800439e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80043ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80043b0:	2300      	movs	r3, #0
 80043b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d03b      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ca:	d01f      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80043cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043d0:	d818      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80043d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d6:	d003      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80043d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043dc:	d007      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80043de:	e011      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e0:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	4a32      	ldr	r2, [pc, #200]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043ec:	e00f      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	3328      	adds	r3, #40	; 0x28
 80043f4:	2101      	movs	r1, #1
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fd98 	bl	8004f2c <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004402:	e004      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800440a:	e000      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800440c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004428:	430b      	orrs	r3, r1
 800442a:	6553      	str	r3, [r2, #84]	; 0x54
 800442c:	e003      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004442:	673b      	str	r3, [r7, #112]	; 0x70
 8004444:	2300      	movs	r3, #0
 8004446:	677b      	str	r3, [r7, #116]	; 0x74
 8004448:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d034      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d007      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004462:	e011      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	4a11      	ldr	r2, [pc, #68]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004470:	e00e      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004476:	3308      	adds	r3, #8
 8004478:	2102      	movs	r1, #2
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fca4 	bl	8004dc8 <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004486:	e003      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800448e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	4a02      	ldr	r2, [pc, #8]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80044c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ca:	2300      	movs	r3, #0
 80044cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d00c      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044dc:	3328      	adds	r3, #40	; 0x28
 80044de:	2102      	movs	r1, #2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fd23 	bl	8004f2c <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80044fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004500:	2300      	movs	r3, #0
 8004502:	667b      	str	r3, [r7, #100]	; 0x64
 8004504:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004508:	460b      	mov	r3, r1
 800450a:	4313      	orrs	r3, r2
 800450c:	d038      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451a:	d018      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800451c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004520:	d811      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004526:	d014      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452c:	d80b      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d011      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d106      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004538:	4bc3      	ldr	r3, [pc, #780]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	4ac2      	ldr	r2, [pc, #776]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004544:	e008      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800454c:	e004      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800454e:	bf00      	nop
 8004550:	e002      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004560:	4bb9      	ldr	r3, [pc, #740]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004570:	4ab5      	ldr	r2, [pc, #724]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004572:	430b      	orrs	r3, r1
 8004574:	6553      	str	r3, [r2, #84]	; 0x54
 8004576:	e003      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800457c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800458c:	65bb      	str	r3, [r7, #88]	; 0x58
 800458e:	2300      	movs	r3, #0
 8004590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004592:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800459c:	4baa      	ldr	r3, [pc, #680]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	4aa7      	ldr	r2, [pc, #668]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80045bc:	653b      	str	r3, [r7, #80]	; 0x50
 80045be:	2300      	movs	r3, #0
 80045c0:	657b      	str	r3, [r7, #84]	; 0x54
 80045c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045cc:	4b9e      	ldr	r3, [pc, #632]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045dc:	4a9a      	ldr	r2, [pc, #616]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80045ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f0:	2300      	movs	r3, #0
 80045f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d009      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045fe:	4b92      	ldr	r3, [pc, #584]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004602:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460c:	4a8e      	ldr	r2, [pc, #568]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460e:	430b      	orrs	r3, r1
 8004610:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800461e:	643b      	str	r3, [r7, #64]	; 0x40
 8004620:	2300      	movs	r3, #0
 8004622:	647b      	str	r3, [r7, #68]	; 0x44
 8004624:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800462e:	4b86      	ldr	r3, [pc, #536]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	4a85      	ldr	r2, [pc, #532]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004638:	6113      	str	r3, [r2, #16]
 800463a:	4b83      	ldr	r3, [pc, #524]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800463c:	6919      	ldr	r1, [r3, #16]
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004642:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004646:	4a80      	ldr	r2, [pc, #512]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004658:	63bb      	str	r3, [r7, #56]	; 0x38
 800465a:	2300      	movs	r3, #0
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004668:	4b77      	ldr	r3, [pc, #476]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	4a74      	ldr	r2, [pc, #464]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004678:	430b      	orrs	r3, r1
 800467a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
 800468a:	2300      	movs	r3, #0
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
 800468e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004698:	4b6b      	ldr	r3, [pc, #428]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	4a67      	ldr	r2, [pc, #412]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046aa:	430b      	orrs	r3, r1
 80046ac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	2100      	movs	r1, #0
 80046b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80046c4:	460b      	mov	r3, r1
 80046c6:	4313      	orrs	r3, r2
 80046c8:	d011      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	3308      	adds	r3, #8
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fb78 	bl	8004dc8 <RCCEx_PLL2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	2100      	movs	r1, #0
 80046f8:	6239      	str	r1, [r7, #32]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004700:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d011      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470e:	3308      	adds	r3, #8
 8004710:	2101      	movs	r1, #1
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fb58 	bl	8004dc8 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800472a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	2100      	movs	r1, #0
 8004738:	61b9      	str	r1, [r7, #24]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004744:	460b      	mov	r3, r1
 8004746:	4313      	orrs	r3, r2
 8004748:	d011      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474e:	3308      	adds	r3, #8
 8004750:	2102      	movs	r1, #2
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fb38 	bl	8004dc8 <RCCEx_PLL2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800476a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	2100      	movs	r1, #0
 8004778:	6139      	str	r1, [r7, #16]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d011      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	3328      	adds	r3, #40	; 0x28
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fbca 	bl	8004f2c <RCCEx_PLL3_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	2100      	movs	r1, #0
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047c4:	460b      	mov	r3, r1
 80047c6:	4313      	orrs	r3, r2
 80047c8:	d011      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	3328      	adds	r3, #40	; 0x28
 80047d0:	2101      	movs	r1, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fbaa 	bl	8004f2c <RCCEx_PLL3_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	2100      	movs	r1, #0
 80047f8:	6039      	str	r1, [r7, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	3328      	adds	r3, #40	; 0x28
 8004810:	2102      	movs	r1, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fb8a 	bl	8004f2c <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800482e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
}
 800483c:	4618      	mov	r0, r3
 800483e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004842:	46bd      	mov	sp, r7
 8004844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004848:	58024400 	.word	0x58024400

0800484c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004850:	f7fe fd54 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	58024400 	.word	0x58024400
 8004874:	08007f38 	.word	0x08007f38

08004878 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004880:	4ba1      	ldr	r3, [pc, #644]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800488a:	4b9f      	ldr	r3, [pc, #636]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	0b1b      	lsrs	r3, r3, #12
 8004890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004894:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004896:	4b9c      	ldr	r3, [pc, #624]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048a2:	4b99      	ldr	r3, [pc, #612]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	08db      	lsrs	r3, r3, #3
 80048a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8111 	beq.w	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	f000 8083 	beq.w	80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	f200 80a1 	bhi.w	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d056      	beq.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80048e2:	e099      	b.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048e4:	4b88      	ldr	r3, [pc, #544]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d02d      	beq.n	800494c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048f0:	4b85      	ldr	r3, [pc, #532]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	08db      	lsrs	r3, r3, #3
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	4a84      	ldr	r2, [pc, #528]	; (8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004900:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491a:	4b7b      	ldr	r3, [pc, #492]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492a:	ed97 6a03 	vldr	s12, [r7, #12]
 800492e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800494a:	e087      	b.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800495a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495e:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004972:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498e:	e065      	b.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800499e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a2:	4b59      	ldr	r3, [pc, #356]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049d2:	e043      	b.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b48      	ldr	r3, [pc, #288]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a16:	e021      	b.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a5c:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	0a5b      	lsrs	r3, r3, #9
 8004a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a82:	ee17 2a90 	vmov	r2, s15
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a8a:	4b1f      	ldr	r3, [pc, #124]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab0:	ee17 2a90 	vmov	r2, s15
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ab8:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	0e1b      	lsrs	r3, r3, #24
 8004abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ade:	ee17 2a90 	vmov	r2, s15
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ae6:	e008      	b.n	8004afa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	609a      	str	r2, [r3, #8]
}
 8004afa:	bf00      	nop
 8004afc:	3724      	adds	r7, #36	; 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	03d09000 	.word	0x03d09000
 8004b10:	46000000 	.word	0x46000000
 8004b14:	4c742400 	.word	0x4c742400
 8004b18:	4a742400 	.word	0x4a742400
 8004b1c:	4af42400 	.word	0x4af42400

08004b20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b28:	4ba1      	ldr	r3, [pc, #644]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b32:	4b9f      	ldr	r3, [pc, #636]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	0d1b      	lsrs	r3, r3, #20
 8004b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b3e:	4b9c      	ldr	r3, [pc, #624]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b4a:	4b99      	ldr	r3, [pc, #612]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8111 	beq.w	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	f000 8083 	beq.w	8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	f200 80a1 	bhi.w	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d056      	beq.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b8a:	e099      	b.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8c:	4b88      	ldr	r3, [pc, #544]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02d      	beq.n	8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b98:	4b85      	ldr	r3, [pc, #532]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	08db      	lsrs	r3, r3, #3
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	4a84      	ldr	r2, [pc, #528]	; (8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b7b      	ldr	r3, [pc, #492]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bf2:	e087      	b.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004dbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b6a      	ldr	r3, [pc, #424]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c36:	e065      	b.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c7a:	e043      	b.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b48      	ldr	r3, [pc, #288]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cbe:	e021      	b.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	0a5b      	lsrs	r3, r3, #9
 8004d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2a:	ee17 2a90 	vmov	r2, s15
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d32:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d58:	ee17 2a90 	vmov	r2, s15
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	0e1b      	lsrs	r3, r3, #24
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d86:	ee17 2a90 	vmov	r2, s15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d8e:	e008      	b.n	8004da2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
}
 8004da2:	bf00      	nop
 8004da4:	3724      	adds	r7, #36	; 0x24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	58024400 	.word	0x58024400
 8004db4:	03d09000 	.word	0x03d09000
 8004db8:	46000000 	.word	0x46000000
 8004dbc:	4c742400 	.word	0x4c742400
 8004dc0:	4a742400 	.word	0x4a742400
 8004dc4:	4af42400 	.word	0x4af42400

08004dc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dd6:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d101      	bne.n	8004de6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e099      	b.n	8004f1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004de6:	4b4f      	ldr	r3, [pc, #316]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4e      	ldr	r2, [pc, #312]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df2:	f7fc f9d9 	bl	80011a8 <HAL_GetTick>
 8004df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dfa:	f7fc f9d5 	bl	80011a8 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e086      	b.n	8004f1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e0c:	4b45      	ldr	r3, [pc, #276]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	031b      	lsls	r3, r3, #12
 8004e26:	493f      	ldr	r1, [pc, #252]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e5c:	4931      	ldr	r1, [pc, #196]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e62:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	492d      	ldr	r1, [pc, #180]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e74:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	f023 0220 	bic.w	r2, r3, #32
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	4928      	ldr	r1, [pc, #160]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e8c:	f023 0310 	bic.w	r3, r3, #16
 8004e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e92:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <RCCEx_PLL2_Config+0x160>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	69d2      	ldr	r2, [r2, #28]
 8004e9e:	00d2      	lsls	r2, r2, #3
 8004ea0:	4920      	ldr	r1, [pc, #128]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ea6:	4b1f      	ldr	r3, [pc, #124]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004eac:	f043 0310 	orr.w	r3, r3, #16
 8004eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004ebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ec4:	e00f      	b.n	8004ee6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ecc:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ed8:	e005      	b.n	8004ee6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fc f959 	bl	80011a8 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ef8:	e008      	b.n	8004f0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004efa:	f7fc f955 	bl	80011a8 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400
 8004f28:	ffff0007 	.word	0xffff0007

08004f2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f3a:	4b53      	ldr	r3, [pc, #332]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d101      	bne.n	8004f4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e099      	b.n	800507e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f4a:	4b4f      	ldr	r3, [pc, #316]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a4e      	ldr	r2, [pc, #312]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f56:	f7fc f927 	bl	80011a8 <HAL_GetTick>
 8004f5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f5c:	e008      	b.n	8004f70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f5e:	f7fc f923 	bl	80011a8 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e086      	b.n	800507e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f70:	4b45      	ldr	r3, [pc, #276]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f0      	bne.n	8004f5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f7c:	4b42      	ldr	r3, [pc, #264]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	051b      	lsls	r3, r3, #20
 8004f8a:	493f      	ldr	r1, [pc, #252]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	025b      	lsls	r3, r3, #9
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	061b      	lsls	r3, r3, #24
 8004fbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fc0:	4931      	ldr	r1, [pc, #196]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	492d      	ldr	r1, [pc, #180]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	4928      	ldr	r1, [pc, #160]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	4a26      	ldr	r2, [pc, #152]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <RCCEx_PLL3_Config+0x160>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	69d2      	ldr	r2, [r2, #28]
 8005002:	00d2      	lsls	r2, r2, #3
 8005004:	4920      	ldr	r1, [pc, #128]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800500a:	4b1f      	ldr	r3, [pc, #124]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005022:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005028:	e00f      	b.n	800504a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d106      	bne.n	800503e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005030:	4b15      	ldr	r3, [pc, #84]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	4a14      	ldr	r2, [pc, #80]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005036:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800503a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800503c:	e005      	b.n	800504a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005044:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005048:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800504a:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a0e      	ldr	r2, [pc, #56]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005056:	f7fc f8a7 	bl	80011a8 <HAL_GetTick>
 800505a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800505c:	e008      	b.n	8005070 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800505e:	f7fc f8a3 	bl	80011a8 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e006      	b.n	800507e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <RCCEx_PLL3_Config+0x15c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
 800508c:	ffff0007 	.word	0xffff0007

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e049      	b.n	8005136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f841 	bl	800513e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 f9e8 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e054      	b.n	8005216 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <HAL_TIM_Base_Start_IT+0xd0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d01d      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <HAL_TIM_Base_Start_IT+0xd4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a21      	ldr	r2, [pc, #132]	; (800522c <HAL_TIM_Base_Start_IT+0xd8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1f      	ldr	r2, [pc, #124]	; (8005230 <HAL_TIM_Base_Start_IT+0xdc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <HAL_TIM_Base_Start_IT+0xe0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1c      	ldr	r2, [pc, #112]	; (8005238 <HAL_TIM_Base_Start_IT+0xe4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1b      	ldr	r2, [pc, #108]	; (800523c <HAL_TIM_Base_Start_IT+0xe8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d115      	bne.n	8005200 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	4b19      	ldr	r3, [pc, #100]	; (8005240 <HAL_TIM_Base_Start_IT+0xec>)
 80051dc:	4013      	ands	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d015      	beq.n	8005212 <HAL_TIM_Base_Start_IT+0xbe>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ec:	d011      	beq.n	8005212 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	e008      	b.n	8005212 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e000      	b.n	8005214 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40001800 	.word	0x40001800
 800523c:	40014000 	.word	0x40014000
 8005240:	00010007 	.word	0x00010007

08005244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d020      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0202 	mvn.w	r2, #2
 8005278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8e9 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8db 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f8ec 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d020      	beq.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0204 	mvn.w	r2, #4
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8c3 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8b5 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8c6 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d020      	beq.n	8005340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01b      	beq.n	8005340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0208 	mvn.w	r2, #8
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2204      	movs	r2, #4
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f89d 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f88f 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f8a0 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	d020      	beq.n	800538c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01b      	beq.n	800538c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0210 	mvn.w	r2, #16
 800535c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2208      	movs	r2, #8
 8005362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f877 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f869 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f87a 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0201 	mvn.w	r2, #1
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fb fc22 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d104      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00c      	beq.n	80053de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80053d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f913 	bl	8005604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00c      	beq.n	8005402 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f90b 	bl	8005618 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00c      	beq.n	8005426 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f834 	bl	800548e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f06f 0220 	mvn.w	r2, #32
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8d3 	bl	80055f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a46      	ldr	r2, [pc, #280]	; (80055d0 <TIM_Base_SetConfig+0x12c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d00f      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a43      	ldr	r2, [pc, #268]	; (80055d4 <TIM_Base_SetConfig+0x130>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a42      	ldr	r2, [pc, #264]	; (80055d8 <TIM_Base_SetConfig+0x134>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a41      	ldr	r2, [pc, #260]	; (80055dc <TIM_Base_SetConfig+0x138>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a40      	ldr	r2, [pc, #256]	; (80055e0 <TIM_Base_SetConfig+0x13c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a35      	ldr	r2, [pc, #212]	; (80055d0 <TIM_Base_SetConfig+0x12c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01f      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d01b      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <TIM_Base_SetConfig+0x130>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d017      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a31      	ldr	r2, [pc, #196]	; (80055d8 <TIM_Base_SetConfig+0x134>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a30      	ldr	r2, [pc, #192]	; (80055dc <TIM_Base_SetConfig+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2f      	ldr	r2, [pc, #188]	; (80055e0 <TIM_Base_SetConfig+0x13c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2e      	ldr	r2, [pc, #184]	; (80055e4 <TIM_Base_SetConfig+0x140>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2d      	ldr	r2, [pc, #180]	; (80055e8 <TIM_Base_SetConfig+0x144>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <TIM_Base_SetConfig+0x148>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <TIM_Base_SetConfig+0x12c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <TIM_Base_SetConfig+0x13c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <TIM_Base_SetConfig+0x140>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <TIM_Base_SetConfig+0x144>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a15      	ldr	r2, [pc, #84]	; (80055ec <TIM_Base_SetConfig+0x148>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f023 0201 	bic.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	611a      	str	r2, [r3, #16]
  }
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40010400 	.word	0x40010400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800

080055f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e042      	b.n	80056c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fb fb6f 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2224      	movs	r2, #36	; 0x24
 800565a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fd90 	bl	800619c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f825 	bl	80056cc <UART_SetConfig>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e01b      	b.n	80056c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800569a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fe0f 	bl	80062e0 <UART_CheckIdleState>
 80056c2:	4603      	mov	r3, r0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d0:	b092      	sub	sp, #72	; 0x48
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4bbe      	ldr	r3, [pc, #760]	; (80059f4 <UART_SetConfig+0x328>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005704:	430b      	orrs	r3, r1
 8005706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4ab3      	ldr	r2, [pc, #716]	; (80059f8 <UART_SetConfig+0x32c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005734:	4313      	orrs	r3, r2
 8005736:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	4baf      	ldr	r3, [pc, #700]	; (80059fc <UART_SetConfig+0x330>)
 8005740:	4013      	ands	r3, r2
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005748:	430b      	orrs	r3, r1
 800574a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	f023 010f 	bic.w	r1, r3, #15
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4aa6      	ldr	r2, [pc, #664]	; (8005a00 <UART_SetConfig+0x334>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d177      	bne.n	800585c <UART_SetConfig+0x190>
 800576c:	4ba5      	ldr	r3, [pc, #660]	; (8005a04 <UART_SetConfig+0x338>)
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005774:	2b28      	cmp	r3, #40	; 0x28
 8005776:	d86d      	bhi.n	8005854 <UART_SetConfig+0x188>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0xb4>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	08005825 	.word	0x08005825
 8005784:	08005855 	.word	0x08005855
 8005788:	08005855 	.word	0x08005855
 800578c:	08005855 	.word	0x08005855
 8005790:	08005855 	.word	0x08005855
 8005794:	08005855 	.word	0x08005855
 8005798:	08005855 	.word	0x08005855
 800579c:	08005855 	.word	0x08005855
 80057a0:	0800582d 	.word	0x0800582d
 80057a4:	08005855 	.word	0x08005855
 80057a8:	08005855 	.word	0x08005855
 80057ac:	08005855 	.word	0x08005855
 80057b0:	08005855 	.word	0x08005855
 80057b4:	08005855 	.word	0x08005855
 80057b8:	08005855 	.word	0x08005855
 80057bc:	08005855 	.word	0x08005855
 80057c0:	08005835 	.word	0x08005835
 80057c4:	08005855 	.word	0x08005855
 80057c8:	08005855 	.word	0x08005855
 80057cc:	08005855 	.word	0x08005855
 80057d0:	08005855 	.word	0x08005855
 80057d4:	08005855 	.word	0x08005855
 80057d8:	08005855 	.word	0x08005855
 80057dc:	08005855 	.word	0x08005855
 80057e0:	0800583d 	.word	0x0800583d
 80057e4:	08005855 	.word	0x08005855
 80057e8:	08005855 	.word	0x08005855
 80057ec:	08005855 	.word	0x08005855
 80057f0:	08005855 	.word	0x08005855
 80057f4:	08005855 	.word	0x08005855
 80057f8:	08005855 	.word	0x08005855
 80057fc:	08005855 	.word	0x08005855
 8005800:	08005845 	.word	0x08005845
 8005804:	08005855 	.word	0x08005855
 8005808:	08005855 	.word	0x08005855
 800580c:	08005855 	.word	0x08005855
 8005810:	08005855 	.word	0x08005855
 8005814:	08005855 	.word	0x08005855
 8005818:	08005855 	.word	0x08005855
 800581c:	08005855 	.word	0x08005855
 8005820:	0800584d 	.word	0x0800584d
 8005824:	2301      	movs	r3, #1
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582a:	e222      	b.n	8005c72 <UART_SetConfig+0x5a6>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005832:	e21e      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e21a      	b.n	8005c72 <UART_SetConfig+0x5a6>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005842:	e216      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005844:	2320      	movs	r3, #32
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584a:	e212      	b.n	8005c72 <UART_SetConfig+0x5a6>
 800584c:	2340      	movs	r3, #64	; 0x40
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e20e      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e20a      	b.n	8005c72 <UART_SetConfig+0x5a6>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a69      	ldr	r2, [pc, #420]	; (8005a08 <UART_SetConfig+0x33c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d130      	bne.n	80058c8 <UART_SetConfig+0x1fc>
 8005866:	4b67      	ldr	r3, [pc, #412]	; (8005a04 <UART_SetConfig+0x338>)
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	2b05      	cmp	r3, #5
 8005870:	d826      	bhi.n	80058c0 <UART_SetConfig+0x1f4>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0x1ac>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	08005891 	.word	0x08005891
 800587c:	08005899 	.word	0x08005899
 8005880:	080058a1 	.word	0x080058a1
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058b1 	.word	0x080058b1
 800588c:	080058b9 	.word	0x080058b9
 8005890:	2300      	movs	r3, #0
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005896:	e1ec      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005898:	2304      	movs	r3, #4
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589e:	e1e8      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80058a0:	2308      	movs	r3, #8
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a6:	e1e4      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80058a8:	2310      	movs	r3, #16
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ae:	e1e0      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80058b0:	2320      	movs	r3, #32
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b6:	e1dc      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80058b8:	2340      	movs	r3, #64	; 0x40
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e1d8      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e1d4      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a4f      	ldr	r2, [pc, #316]	; (8005a0c <UART_SetConfig+0x340>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d130      	bne.n	8005934 <UART_SetConfig+0x268>
 80058d2:	4b4c      	ldr	r3, [pc, #304]	; (8005a04 <UART_SetConfig+0x338>)
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	2b05      	cmp	r3, #5
 80058dc:	d826      	bhi.n	800592c <UART_SetConfig+0x260>
 80058de:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <UART_SetConfig+0x218>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	080058fd 	.word	0x080058fd
 80058e8:	08005905 	.word	0x08005905
 80058ec:	0800590d 	.word	0x0800590d
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005902:	e1b6      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005904:	2304      	movs	r3, #4
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590a:	e1b2      	b.n	8005c72 <UART_SetConfig+0x5a6>
 800590c:	2308      	movs	r3, #8
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005912:	e1ae      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005914:	2310      	movs	r3, #16
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591a:	e1aa      	b.n	8005c72 <UART_SetConfig+0x5a6>
 800591c:	2320      	movs	r3, #32
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e1a6      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005924:	2340      	movs	r3, #64	; 0x40
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e1a2      	b.n	8005c72 <UART_SetConfig+0x5a6>
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e19e      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a35      	ldr	r2, [pc, #212]	; (8005a10 <UART_SetConfig+0x344>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d130      	bne.n	80059a0 <UART_SetConfig+0x2d4>
 800593e:	4b31      	ldr	r3, [pc, #196]	; (8005a04 <UART_SetConfig+0x338>)
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	2b05      	cmp	r3, #5
 8005948:	d826      	bhi.n	8005998 <UART_SetConfig+0x2cc>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x284>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005969 	.word	0x08005969
 8005954:	08005971 	.word	0x08005971
 8005958:	08005979 	.word	0x08005979
 800595c:	08005981 	.word	0x08005981
 8005960:	08005989 	.word	0x08005989
 8005964:	08005991 	.word	0x08005991
 8005968:	2300      	movs	r3, #0
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596e:	e180      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005970:	2304      	movs	r3, #4
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005976:	e17c      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005978:	2308      	movs	r3, #8
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597e:	e178      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005980:	2310      	movs	r3, #16
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005986:	e174      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005988:	2320      	movs	r3, #32
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e170      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005996:	e16c      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e168      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <UART_SetConfig+0x348>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d142      	bne.n	8005a30 <UART_SetConfig+0x364>
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <UART_SetConfig+0x338>)
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	d838      	bhi.n	8005a28 <UART_SetConfig+0x35c>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x2f0>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059d5 	.word	0x080059d5
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	080059e5 	.word	0x080059e5
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	08005a19 	.word	0x08005a19
 80059d0:	08005a21 	.word	0x08005a21
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059da:	e14a      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e2:	e146      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ea:	e142      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f2:	e13e      	b.n	8005c72 <UART_SetConfig+0x5a6>
 80059f4:	cfff69f3 	.word	0xcfff69f3
 80059f8:	58000c00 	.word	0x58000c00
 80059fc:	11fff4ff 	.word	0x11fff4ff
 8005a00:	40011000 	.word	0x40011000
 8005a04:	58024400 	.word	0x58024400
 8005a08:	40004400 	.word	0x40004400
 8005a0c:	40004800 	.word	0x40004800
 8005a10:	40004c00 	.word	0x40004c00
 8005a14:	40005000 	.word	0x40005000
 8005a18:	2320      	movs	r3, #32
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1e:	e128      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005a20:	2340      	movs	r3, #64	; 0x40
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a26:	e124      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2e:	e120      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4acb      	ldr	r2, [pc, #812]	; (8005d64 <UART_SetConfig+0x698>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d176      	bne.n	8005b28 <UART_SetConfig+0x45c>
 8005a3a:	4bcb      	ldr	r3, [pc, #812]	; (8005d68 <UART_SetConfig+0x69c>)
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a42:	2b28      	cmp	r3, #40	; 0x28
 8005a44:	d86c      	bhi.n	8005b20 <UART_SetConfig+0x454>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0x380>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005af1 	.word	0x08005af1
 8005a50:	08005b21 	.word	0x08005b21
 8005a54:	08005b21 	.word	0x08005b21
 8005a58:	08005b21 	.word	0x08005b21
 8005a5c:	08005b21 	.word	0x08005b21
 8005a60:	08005b21 	.word	0x08005b21
 8005a64:	08005b21 	.word	0x08005b21
 8005a68:	08005b21 	.word	0x08005b21
 8005a6c:	08005af9 	.word	0x08005af9
 8005a70:	08005b21 	.word	0x08005b21
 8005a74:	08005b21 	.word	0x08005b21
 8005a78:	08005b21 	.word	0x08005b21
 8005a7c:	08005b21 	.word	0x08005b21
 8005a80:	08005b21 	.word	0x08005b21
 8005a84:	08005b21 	.word	0x08005b21
 8005a88:	08005b21 	.word	0x08005b21
 8005a8c:	08005b01 	.word	0x08005b01
 8005a90:	08005b21 	.word	0x08005b21
 8005a94:	08005b21 	.word	0x08005b21
 8005a98:	08005b21 	.word	0x08005b21
 8005a9c:	08005b21 	.word	0x08005b21
 8005aa0:	08005b21 	.word	0x08005b21
 8005aa4:	08005b21 	.word	0x08005b21
 8005aa8:	08005b21 	.word	0x08005b21
 8005aac:	08005b09 	.word	0x08005b09
 8005ab0:	08005b21 	.word	0x08005b21
 8005ab4:	08005b21 	.word	0x08005b21
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005b21 	.word	0x08005b21
 8005ac0:	08005b21 	.word	0x08005b21
 8005ac4:	08005b21 	.word	0x08005b21
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b11 	.word	0x08005b11
 8005ad0:	08005b21 	.word	0x08005b21
 8005ad4:	08005b21 	.word	0x08005b21
 8005ad8:	08005b21 	.word	0x08005b21
 8005adc:	08005b21 	.word	0x08005b21
 8005ae0:	08005b21 	.word	0x08005b21
 8005ae4:	08005b21 	.word	0x08005b21
 8005ae8:	08005b21 	.word	0x08005b21
 8005aec:	08005b19 	.word	0x08005b19
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e0bc      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e0b8      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b06:	e0b4      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0e:	e0b0      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b10:	2320      	movs	r3, #32
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e0ac      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e0a8      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e0a4      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a8f      	ldr	r2, [pc, #572]	; (8005d6c <UART_SetConfig+0x6a0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d130      	bne.n	8005b94 <UART_SetConfig+0x4c8>
 8005b32:	4b8d      	ldr	r3, [pc, #564]	; (8005d68 <UART_SetConfig+0x69c>)
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d826      	bhi.n	8005b8c <UART_SetConfig+0x4c0>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <UART_SetConfig+0x478>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b5d 	.word	0x08005b5d
 8005b48:	08005b65 	.word	0x08005b65
 8005b4c:	08005b6d 	.word	0x08005b6d
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e086      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b64:	2304      	movs	r3, #4
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e082      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e07e      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b74:	2310      	movs	r3, #16
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e07a      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e076      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b84:	2340      	movs	r3, #64	; 0x40
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e072      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e06e      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a75      	ldr	r2, [pc, #468]	; (8005d70 <UART_SetConfig+0x6a4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d130      	bne.n	8005c00 <UART_SetConfig+0x534>
 8005b9e:	4b72      	ldr	r3, [pc, #456]	; (8005d68 <UART_SetConfig+0x69c>)
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	d826      	bhi.n	8005bf8 <UART_SetConfig+0x52c>
 8005baa:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <UART_SetConfig+0x4e4>)
 8005bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb0:	08005bc9 	.word	0x08005bc9
 8005bb4:	08005bd1 	.word	0x08005bd1
 8005bb8:	08005bd9 	.word	0x08005bd9
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e050      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e04c      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e048      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e044      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005be8:	2320      	movs	r3, #32
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e040      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e03c      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005bf8:	2380      	movs	r3, #128	; 0x80
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e038      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a5b      	ldr	r2, [pc, #364]	; (8005d74 <UART_SetConfig+0x6a8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d130      	bne.n	8005c6c <UART_SetConfig+0x5a0>
 8005c0a:	4b57      	ldr	r3, [pc, #348]	; (8005d68 <UART_SetConfig+0x69c>)
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d826      	bhi.n	8005c64 <UART_SetConfig+0x598>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x550>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c3d 	.word	0x08005c3d
 8005c24:	08005c45 	.word	0x08005c45
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	2302      	movs	r3, #2
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3a:	e01a      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c42:	e016      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4a:	e012      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c52:	e00e      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c54:	2320      	movs	r3, #32
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e00a      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c5c:	2340      	movs	r3, #64	; 0x40
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e006      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e002      	b.n	8005c72 <UART_SetConfig+0x5a6>
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a3f      	ldr	r2, [pc, #252]	; (8005d74 <UART_SetConfig+0x6a8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f040 80f8 	bne.w	8005e6e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	dc46      	bgt.n	8005d14 <UART_SetConfig+0x648>
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	f2c0 8082 	blt.w	8005d90 <UART_SetConfig+0x6c4>
 8005c8c:	3b02      	subs	r3, #2
 8005c8e:	2b1e      	cmp	r3, #30
 8005c90:	d87e      	bhi.n	8005d90 <UART_SetConfig+0x6c4>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0x5cc>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005d1b 	.word	0x08005d1b
 8005c9c:	08005d91 	.word	0x08005d91
 8005ca0:	08005d23 	.word	0x08005d23
 8005ca4:	08005d91 	.word	0x08005d91
 8005ca8:	08005d91 	.word	0x08005d91
 8005cac:	08005d91 	.word	0x08005d91
 8005cb0:	08005d33 	.word	0x08005d33
 8005cb4:	08005d91 	.word	0x08005d91
 8005cb8:	08005d91 	.word	0x08005d91
 8005cbc:	08005d91 	.word	0x08005d91
 8005cc0:	08005d91 	.word	0x08005d91
 8005cc4:	08005d91 	.word	0x08005d91
 8005cc8:	08005d91 	.word	0x08005d91
 8005ccc:	08005d91 	.word	0x08005d91
 8005cd0:	08005d43 	.word	0x08005d43
 8005cd4:	08005d91 	.word	0x08005d91
 8005cd8:	08005d91 	.word	0x08005d91
 8005cdc:	08005d91 	.word	0x08005d91
 8005ce0:	08005d91 	.word	0x08005d91
 8005ce4:	08005d91 	.word	0x08005d91
 8005ce8:	08005d91 	.word	0x08005d91
 8005cec:	08005d91 	.word	0x08005d91
 8005cf0:	08005d91 	.word	0x08005d91
 8005cf4:	08005d91 	.word	0x08005d91
 8005cf8:	08005d91 	.word	0x08005d91
 8005cfc:	08005d91 	.word	0x08005d91
 8005d00:	08005d91 	.word	0x08005d91
 8005d04:	08005d91 	.word	0x08005d91
 8005d08:	08005d91 	.word	0x08005d91
 8005d0c:	08005d91 	.word	0x08005d91
 8005d10:	08005d83 	.word	0x08005d83
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	d037      	beq.n	8005d88 <UART_SetConfig+0x6bc>
 8005d18:	e03a      	b.n	8005d90 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d1a:	f7fe fd97 	bl	800484c <HAL_RCCEx_GetD3PCLK1Freq>
 8005d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d20:	e03c      	b.n	8005d9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe fda6 	bl	8004878 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d30:	e034      	b.n	8005d9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d32:	f107 0318 	add.w	r3, r7, #24
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fef2 	bl	8004b20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d40:	e02c      	b.n	8005d9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <UART_SetConfig+0x69c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <UART_SetConfig+0x69c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	08db      	lsrs	r3, r3, #3
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	4a07      	ldr	r2, [pc, #28]	; (8005d78 <UART_SetConfig+0x6ac>)
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d60:	e01c      	b.n	8005d9c <UART_SetConfig+0x6d0>
 8005d62:	bf00      	nop
 8005d64:	40011400 	.word	0x40011400
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	40007800 	.word	0x40007800
 8005d70:	40007c00 	.word	0x40007c00
 8005d74:	58000c00 	.word	0x58000c00
 8005d78:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005d7c:	4b9d      	ldr	r3, [pc, #628]	; (8005ff4 <UART_SetConfig+0x928>)
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d80:	e00c      	b.n	8005d9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d82:	4b9d      	ldr	r3, [pc, #628]	; (8005ff8 <UART_SetConfig+0x92c>)
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d86:	e009      	b.n	8005d9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d8e:	e005      	b.n	8005d9c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 81de 	beq.w	8006160 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	4a94      	ldr	r2, [pc, #592]	; (8005ffc <UART_SetConfig+0x930>)
 8005daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dae:	461a      	mov	r2, r3
 8005db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d305      	bcc.n	8005dd4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005dda:	e1c1      	b.n	8006160 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dde:	2200      	movs	r2, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	60fa      	str	r2, [r7, #12]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	4a84      	ldr	r2, [pc, #528]	; (8005ffc <UART_SetConfig+0x930>)
 8005dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2200      	movs	r2, #0
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005dfe:	f7fa fa6f 	bl	80002e0 <__aeabi_uldivmod>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	020b      	lsls	r3, r1, #8
 8005e14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e18:	0202      	lsls	r2, r0, #8
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	6849      	ldr	r1, [r1, #4]
 8005e1e:	0849      	lsrs	r1, r1, #1
 8005e20:	2000      	movs	r0, #0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4605      	mov	r5, r0
 8005e26:	eb12 0804 	adds.w	r8, r2, r4
 8005e2a:	eb43 0905 	adc.w	r9, r3, r5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	469a      	mov	sl, r3
 8005e36:	4693      	mov	fp, r2
 8005e38:	4652      	mov	r2, sl
 8005e3a:	465b      	mov	r3, fp
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	4649      	mov	r1, r9
 8005e40:	f7fa fa4e 	bl	80002e0 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e52:	d308      	bcc.n	8005e66 <UART_SetConfig+0x79a>
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5a:	d204      	bcs.n	8005e66 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	e17c      	b.n	8006160 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e6c:	e178      	b.n	8006160 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e76:	f040 80c5 	bne.w	8006004 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005e7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	dc48      	bgt.n	8005f14 <UART_SetConfig+0x848>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	db7b      	blt.n	8005f7e <UART_SetConfig+0x8b2>
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d879      	bhi.n	8005f7e <UART_SetConfig+0x8b2>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x7c4>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005f1b 	.word	0x08005f1b
 8005e94:	08005f23 	.word	0x08005f23
 8005e98:	08005f7f 	.word	0x08005f7f
 8005e9c:	08005f7f 	.word	0x08005f7f
 8005ea0:	08005f2b 	.word	0x08005f2b
 8005ea4:	08005f7f 	.word	0x08005f7f
 8005ea8:	08005f7f 	.word	0x08005f7f
 8005eac:	08005f7f 	.word	0x08005f7f
 8005eb0:	08005f3b 	.word	0x08005f3b
 8005eb4:	08005f7f 	.word	0x08005f7f
 8005eb8:	08005f7f 	.word	0x08005f7f
 8005ebc:	08005f7f 	.word	0x08005f7f
 8005ec0:	08005f7f 	.word	0x08005f7f
 8005ec4:	08005f7f 	.word	0x08005f7f
 8005ec8:	08005f7f 	.word	0x08005f7f
 8005ecc:	08005f7f 	.word	0x08005f7f
 8005ed0:	08005f4b 	.word	0x08005f4b
 8005ed4:	08005f7f 	.word	0x08005f7f
 8005ed8:	08005f7f 	.word	0x08005f7f
 8005edc:	08005f7f 	.word	0x08005f7f
 8005ee0:	08005f7f 	.word	0x08005f7f
 8005ee4:	08005f7f 	.word	0x08005f7f
 8005ee8:	08005f7f 	.word	0x08005f7f
 8005eec:	08005f7f 	.word	0x08005f7f
 8005ef0:	08005f7f 	.word	0x08005f7f
 8005ef4:	08005f7f 	.word	0x08005f7f
 8005ef8:	08005f7f 	.word	0x08005f7f
 8005efc:	08005f7f 	.word	0x08005f7f
 8005f00:	08005f7f 	.word	0x08005f7f
 8005f04:	08005f7f 	.word	0x08005f7f
 8005f08:	08005f7f 	.word	0x08005f7f
 8005f0c:	08005f7f 	.word	0x08005f7f
 8005f10:	08005f71 	.word	0x08005f71
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d02e      	beq.n	8005f76 <UART_SetConfig+0x8aa>
 8005f18:	e031      	b.n	8005f7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fd fa1f 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 8005f1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f20:	e033      	b.n	8005f8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f22:	f7fd fa31 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 8005f26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f28:	e02f      	b.n	8005f8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fca2 	bl	8004878 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f38:	e027      	b.n	8005f8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fdee 	bl	8004b20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f48:	e01f      	b.n	8005f8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4a:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <UART_SetConfig+0x934>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f56:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <UART_SetConfig+0x934>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	4a24      	ldr	r2, [pc, #144]	; (8005ff4 <UART_SetConfig+0x928>)
 8005f62:	fa22 f303 	lsr.w	r3, r2, r3
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f68:	e00f      	b.n	8005f8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f6a:	4b22      	ldr	r3, [pc, #136]	; (8005ff4 <UART_SetConfig+0x928>)
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f6e:	e00c      	b.n	8005f8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <UART_SetConfig+0x92c>)
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f74:	e009      	b.n	8005f8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f7c:	e005      	b.n	8005f8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80e7 	beq.w	8006160 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <UART_SetConfig+0x930>)
 8005f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa4:	005a      	lsls	r2, r3, #1
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	441a      	add	r2, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d916      	bls.n	8005fec <UART_SetConfig+0x920>
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d212      	bcs.n	8005fec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f023 030f 	bic.w	r3, r3, #15
 8005fce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	e0b9      	b.n	8006160 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ff2:	e0b5      	b.n	8006160 <UART_SetConfig+0xa94>
 8005ff4:	03d09000 	.word	0x03d09000
 8005ff8:	003d0900 	.word	0x003d0900
 8005ffc:	08007f48 	.word	0x08007f48
 8006000:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006004:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006008:	2b20      	cmp	r3, #32
 800600a:	dc49      	bgt.n	80060a0 <UART_SetConfig+0x9d4>
 800600c:	2b00      	cmp	r3, #0
 800600e:	db7c      	blt.n	800610a <UART_SetConfig+0xa3e>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d87a      	bhi.n	800610a <UART_SetConfig+0xa3e>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x950>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	080060a7 	.word	0x080060a7
 8006020:	080060af 	.word	0x080060af
 8006024:	0800610b 	.word	0x0800610b
 8006028:	0800610b 	.word	0x0800610b
 800602c:	080060b7 	.word	0x080060b7
 8006030:	0800610b 	.word	0x0800610b
 8006034:	0800610b 	.word	0x0800610b
 8006038:	0800610b 	.word	0x0800610b
 800603c:	080060c7 	.word	0x080060c7
 8006040:	0800610b 	.word	0x0800610b
 8006044:	0800610b 	.word	0x0800610b
 8006048:	0800610b 	.word	0x0800610b
 800604c:	0800610b 	.word	0x0800610b
 8006050:	0800610b 	.word	0x0800610b
 8006054:	0800610b 	.word	0x0800610b
 8006058:	0800610b 	.word	0x0800610b
 800605c:	080060d7 	.word	0x080060d7
 8006060:	0800610b 	.word	0x0800610b
 8006064:	0800610b 	.word	0x0800610b
 8006068:	0800610b 	.word	0x0800610b
 800606c:	0800610b 	.word	0x0800610b
 8006070:	0800610b 	.word	0x0800610b
 8006074:	0800610b 	.word	0x0800610b
 8006078:	0800610b 	.word	0x0800610b
 800607c:	0800610b 	.word	0x0800610b
 8006080:	0800610b 	.word	0x0800610b
 8006084:	0800610b 	.word	0x0800610b
 8006088:	0800610b 	.word	0x0800610b
 800608c:	0800610b 	.word	0x0800610b
 8006090:	0800610b 	.word	0x0800610b
 8006094:	0800610b 	.word	0x0800610b
 8006098:	0800610b 	.word	0x0800610b
 800609c:	080060fd 	.word	0x080060fd
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d02e      	beq.n	8006102 <UART_SetConfig+0xa36>
 80060a4:	e031      	b.n	800610a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a6:	f7fd f959 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 80060aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060ac:	e033      	b.n	8006116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ae:	f7fd f96b 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 80060b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060b4:	e02f      	b.n	8006116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fbdc 	bl	8004878 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060c4:	e027      	b.n	8006116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060c6:	f107 0318 	add.w	r3, r7, #24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fd28 	bl	8004b20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d4:	e01f      	b.n	8006116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d6:	4b2d      	ldr	r3, [pc, #180]	; (800618c <UART_SetConfig+0xac0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060e2:	4b2a      	ldr	r3, [pc, #168]	; (800618c <UART_SetConfig+0xac0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	08db      	lsrs	r3, r3, #3
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	4a28      	ldr	r2, [pc, #160]	; (8006190 <UART_SetConfig+0xac4>)
 80060ee:	fa22 f303 	lsr.w	r3, r2, r3
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060f4:	e00f      	b.n	8006116 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80060f6:	4b26      	ldr	r3, [pc, #152]	; (8006190 <UART_SetConfig+0xac4>)
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060fa:	e00c      	b.n	8006116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <UART_SetConfig+0xac8>)
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006100:	e009      	b.n	8006116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006108:	e005      	b.n	8006116 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006114:	bf00      	nop
    }

    if (pclk != 0U)
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d021      	beq.n	8006160 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	4a1d      	ldr	r2, [pc, #116]	; (8006198 <UART_SetConfig+0xacc>)
 8006122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006126:	461a      	mov	r2, r3
 8006128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612a:	fbb3 f2f2 	udiv	r2, r3, r2
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	441a      	add	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	2b0f      	cmp	r3, #15
 8006144:	d909      	bls.n	800615a <UART_SetConfig+0xa8e>
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d205      	bcs.n	800615a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	b29a      	uxth	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60da      	str	r2, [r3, #12]
 8006158:	e002      	b.n	8006160 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2201      	movs	r2, #1
 8006164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2201      	movs	r2, #1
 800616c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2200      	movs	r2, #0
 8006174:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2200      	movs	r2, #0
 800617a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800617c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006180:	4618      	mov	r0, r3
 8006182:	3748      	adds	r7, #72	; 0x48
 8006184:	46bd      	mov	sp, r7
 8006186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
 8006190:	03d09000 	.word	0x03d09000
 8006194:	003d0900 	.word	0x003d0900
 8006198:	08007f48 	.word	0x08007f48

0800619c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629a:	d10a      	bne.n	80062b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b098      	sub	sp, #96	; 0x60
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f0:	f7fa ff5a 	bl	80011a8 <HAL_GetTick>
 80062f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d12f      	bne.n	8006364 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f88e 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d022      	beq.n	8006364 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
 800633e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e063      	b.n	800642c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b04      	cmp	r3, #4
 8006370:	d149      	bne.n	8006406 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006372:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800637a:	2200      	movs	r2, #0
 800637c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f857 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03c      	beq.n	8006406 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	623b      	str	r3, [r7, #32]
   return(result);
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
 80063ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e6      	bne.n	800638c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063de:	61fa      	str	r2, [r7, #28]
 80063e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	69b9      	ldr	r1, [r7, #24]
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	617b      	str	r3, [r7, #20]
   return(result);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e012      	b.n	800642c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3758      	adds	r7, #88	; 0x58
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006444:	e04f      	b.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d04b      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fa feab 	bl	80011a8 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x30>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e04e      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d037      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d034      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d031      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d110      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f839 	bl	8006510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2208      	movs	r2, #8
 80064a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e029      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d111      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f81f 	bl	8006510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00f      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0a0      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b095      	sub	sp, #84	; 0x54
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006536:	643b      	str	r3, [r7, #64]	; 0x40
 8006538:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800653c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	61fb      	str	r3, [r7, #28]
   return(result);
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <UART_EndRxTransfer+0xc8>)
 800655e:	4013      	ands	r3, r2
 8006560:	64bb      	str	r3, [r7, #72]	; 0x48
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800656a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e5      	bne.n	800654a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d118      	bne.n	80065b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	60bb      	str	r3, [r7, #8]
   return(result);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0310 	bic.w	r3, r3, #16
 800659a:	647b      	str	r3, [r7, #68]	; 0x44
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6979      	ldr	r1, [r7, #20]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	613b      	str	r3, [r7, #16]
   return(result);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80065cc:	bf00      	nop
 80065ce:	3754      	adds	r7, #84	; 0x54
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	effffffe 	.word	0xeffffffe

080065dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e027      	b.n	8006642 <HAL_UARTEx_DisableFifoMode+0x66>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2224      	movs	r2, #36	; 0x24
 80065fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006620:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006662:	2302      	movs	r3, #2
 8006664:	e02d      	b.n	80066c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2224      	movs	r2, #36	; 0x24
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f850 	bl	8006748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066de:	2302      	movs	r3, #2
 80066e0:	e02d      	b.n	800673e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2224      	movs	r2, #36	; 0x24
 80066ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f812 	bl	8006748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006754:	2b00      	cmp	r3, #0
 8006756:	d108      	bne.n	800676a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006768:	e031      	b.n	80067ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800676a:	2310      	movs	r3, #16
 800676c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800676e:	2310      	movs	r3, #16
 8006770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	0e5b      	lsrs	r3, r3, #25
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	0f5b      	lsrs	r3, r3, #29
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	7b3a      	ldrb	r2, [r7, #12]
 8006796:	4911      	ldr	r1, [pc, #68]	; (80067dc <UARTEx_SetNbDataToProcess+0x94>)
 8006798:	5c8a      	ldrb	r2, [r1, r2]
 800679a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800679e:	7b3a      	ldrb	r2, [r7, #12]
 80067a0:	490f      	ldr	r1, [pc, #60]	; (80067e0 <UARTEx_SetNbDataToProcess+0x98>)
 80067a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	7b7a      	ldrb	r2, [r7, #13]
 80067b4:	4909      	ldr	r1, [pc, #36]	; (80067dc <UARTEx_SetNbDataToProcess+0x94>)
 80067b6:	5c8a      	ldrb	r2, [r1, r2]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067bc:	7b7a      	ldrb	r2, [r7, #13]
 80067be:	4908      	ldr	r1, [pc, #32]	; (80067e0 <UARTEx_SetNbDataToProcess+0x98>)
 80067c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	08007f60 	.word	0x08007f60
 80067e0:	08007f68 	.word	0x08007f68

080067e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067f6:	2b84      	cmp	r3, #132	; 0x84
 80067f8:	d005      	beq.n	8006806 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4413      	add	r3, r2
 8006802:	3303      	adds	r3, #3
 8006804:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006806:	68fb      	ldr	r3, [r7, #12]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006818:	f000 faf6 	bl	8006e08 <vTaskStartScheduler>
  
  return osOK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	bd80      	pop	{r7, pc}

08006822 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006824:	b089      	sub	sp, #36	; 0x24
 8006826:	af04      	add	r7, sp, #16
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d020      	beq.n	8006876 <osThreadCreate+0x54>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01c      	beq.n	8006876 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685c      	ldr	r4, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681d      	ldr	r5, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691e      	ldr	r6, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff ffc8 	bl	80067e4 <makeFreeRtosPriority>
 8006854:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800685e:	9202      	str	r2, [sp, #8]
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	9100      	str	r1, [sp, #0]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	4632      	mov	r2, r6
 8006868:	4629      	mov	r1, r5
 800686a:	4620      	mov	r0, r4
 800686c:	f000 f8ed 	bl	8006a4a <xTaskCreateStatic>
 8006870:	4603      	mov	r3, r0
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e01c      	b.n	80068b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685c      	ldr	r4, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006882:	b29e      	uxth	r6, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff ffaa 	bl	80067e4 <makeFreeRtosPriority>
 8006890:	4602      	mov	r2, r0
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	9200      	str	r2, [sp, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	4632      	mov	r2, r6
 800689e:	4629      	mov	r1, r5
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 f92f 	bl	8006b04 <xTaskCreate>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d001      	beq.n	80068b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80068b0:	68fb      	ldr	r3, [r7, #12]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <osDelay+0x16>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e000      	b.n	80068d2 <osDelay+0x18>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fa64 	bl	8006da0 <vTaskDelay>
  
  return osOK;
 80068d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f103 0208 	add.w	r2, r3, #8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f103 0208 	add.w	r2, r3, #8
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f103 0208 	add.w	r2, r3, #8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	601a      	str	r2, [r3, #0]
}
 8006978:	bf00      	nop
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d103      	bne.n	80069a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e00c      	b.n	80069be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3308      	adds	r3, #8
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e002      	b.n	80069b2 <vListInsert+0x2e>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d2f6      	bcs.n	80069ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	601a      	str	r2, [r3, #0]
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6892      	ldr	r2, [r2, #8]
 8006a0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6852      	ldr	r2, [r2, #4]
 8006a16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d103      	bne.n	8006a2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	1e5a      	subs	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b08e      	sub	sp, #56	; 0x38
 8006a4e:	af04      	add	r7, sp, #16
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	61fb      	str	r3, [r7, #28]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a90:	23b4      	movs	r3, #180	; 0xb4
 8006a92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2bb4      	cmp	r3, #180	; 0xb4
 8006a98:	d00a      	beq.n	8006ab0 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	61bb      	str	r3, [r7, #24]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ab0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01e      	beq.n	8006af6 <xTaskCreateStatic+0xac>
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01b      	beq.n	8006af6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9303      	str	r3, [sp, #12]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	9302      	str	r3, [sp, #8]
 8006ad8:	f107 0314 	add.w	r3, r7, #20
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f851 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006af0:	f000 f8ec 	bl	8006ccc <prvAddNewTaskToReadyList>
 8006af4:	e001      	b.n	8006afa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006afa:	697b      	ldr	r3, [r7, #20]
	}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3728      	adds	r7, #40	; 0x28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	; 0x30
 8006b08:	af04      	add	r7, sp, #16
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fef5 	bl	8007908 <pvPortMalloc>
 8006b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b26:	20b4      	movs	r0, #180	; 0xb4
 8006b28:	f000 feee 	bl	8007908 <pvPortMalloc>
 8006b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
 8006b3a:	e005      	b.n	8006b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b3c:	6978      	ldr	r0, [r7, #20]
 8006b3e:	f000 ffaf 	bl	8007aa0 <vPortFree>
 8006b42:	e001      	b.n	8006b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d017      	beq.n	8006b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9303      	str	r3, [sp, #12]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	9302      	str	r3, [sp, #8]
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f80f 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b72:	69f8      	ldr	r0, [r7, #28]
 8006b74:	f000 f8aa 	bl	8006ccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e002      	b.n	8006b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b84:	69bb      	ldr	r3, [r7, #24]
	}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ba8:	440b      	add	r3, r1
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	f023 0307 	bic.w	r3, r3, #7
 8006bb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	617b      	str	r3, [r7, #20]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01f      	beq.n	8006c1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	e012      	b.n	8006c0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4413      	add	r3, r2
 8006bea:	7819      	ldrb	r1, [r3, #0]
 8006bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3334      	adds	r3, #52	; 0x34
 8006bf4:	460a      	mov	r2, r1
 8006bf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	3301      	adds	r3, #1
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b0f      	cmp	r3, #15
 8006c0e:	d9e9      	bls.n	8006be4 <prvInitialiseNewTask+0x54>
 8006c10:	e000      	b.n	8006c14 <prvInitialiseNewTask+0x84>
			{
				break;
 8006c12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c1c:	e003      	b.n	8006c26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	2b06      	cmp	r3, #6
 8006c2a:	d901      	bls.n	8006c30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c2c:	2306      	movs	r3, #6
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2200      	movs	r2, #0
 8006c40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	3304      	adds	r3, #4
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fe6b 	bl	8006922 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	3318      	adds	r3, #24
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fe66 	bl	8006922 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f1c3 0207 	rsb	r2, r3, #7
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	334c      	adds	r3, #76	; 0x4c
 8006c80:	2260      	movs	r2, #96	; 0x60
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 f84f 	bl	8007d28 <memset>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	4a0c      	ldr	r2, [pc, #48]	; (8006cc0 <prvInitialiseNewTask+0x130>)
 8006c8e:	651a      	str	r2, [r3, #80]	; 0x50
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <prvInitialiseNewTask+0x134>)
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <prvInitialiseNewTask+0x138>)
 8006c9a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	69b8      	ldr	r0, [r7, #24]
 8006ca2:	f000 fc1f 	bl	80074e4 <pxPortInitialiseStack>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cb8:	bf00      	nop
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	08007f90 	.word	0x08007f90
 8006cc4:	08007fb0 	.word	0x08007fb0
 8006cc8:	08007f70 	.word	0x08007f70

08006ccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cd4:	f000 fd36 	bl	8007744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <prvAddNewTaskToReadyList+0xb8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	4a29      	ldr	r2, [pc, #164]	; (8006d84 <prvAddNewTaskToReadyList+0xb8>)
 8006ce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ce2:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <prvAddNewTaskToReadyList+0xbc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cea:	4a27      	ldr	r2, [pc, #156]	; (8006d88 <prvAddNewTaskToReadyList+0xbc>)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cf0:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <prvAddNewTaskToReadyList+0xb8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d110      	bne.n	8006d1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cf8:	f000 facc 	bl	8007294 <prvInitialiseTaskLists>
 8006cfc:	e00d      	b.n	8006d1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cfe:	4b23      	ldr	r3, [pc, #140]	; (8006d8c <prvAddNewTaskToReadyList+0xc0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d06:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <prvAddNewTaskToReadyList+0xbc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d802      	bhi.n	8006d1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d14:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <prvAddNewTaskToReadyList+0xbc>)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <prvAddNewTaskToReadyList+0xc4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <prvAddNewTaskToReadyList+0xc4>)
 8006d22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	2201      	movs	r2, #1
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <prvAddNewTaskToReadyList+0xc8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <prvAddNewTaskToReadyList+0xc8>)
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4a15      	ldr	r2, [pc, #84]	; (8006d98 <prvAddNewTaskToReadyList+0xcc>)
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7ff fdf5 	bl	800693c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d52:	f000 fd27 	bl	80077a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <prvAddNewTaskToReadyList+0xc0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00e      	beq.n	8006d7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <prvAddNewTaskToReadyList+0xbc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d207      	bcs.n	8006d7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <prvAddNewTaskToReadyList+0xd0>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	24000624 	.word	0x24000624
 8006d88:	24000524 	.word	0x24000524
 8006d8c:	24000630 	.word	0x24000630
 8006d90:	24000640 	.word	0x24000640
 8006d94:	2400062c 	.word	0x2400062c
 8006d98:	24000528 	.word	0x24000528
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d017      	beq.n	8006de2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <vTaskDelay+0x60>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <vTaskDelay+0x30>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60bb      	str	r3, [r7, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dd0:	f000 f884 	bl	8006edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb1e 	bl	8007418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ddc:	f000 f88c 	bl	8006ef8 <xTaskResumeAll>
 8006de0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d107      	bne.n	8006df8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006de8:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <vTaskDelay+0x64>)
 8006dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	2400064c 	.word	0x2400064c
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e16:	463a      	mov	r2, r7
 8006e18:	1d39      	adds	r1, r7, #4
 8006e1a:	f107 0308 	add.w	r3, r7, #8
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7f9 fc3e 	bl	80006a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	9202      	str	r2, [sp, #8]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	460a      	mov	r2, r1
 8006e36:	4921      	ldr	r1, [pc, #132]	; (8006ebc <vTaskStartScheduler+0xb4>)
 8006e38:	4821      	ldr	r0, [pc, #132]	; (8006ec0 <vTaskStartScheduler+0xb8>)
 8006e3a:	f7ff fe06 	bl	8006a4a <xTaskCreateStatic>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4a20      	ldr	r2, [pc, #128]	; (8006ec4 <vTaskStartScheduler+0xbc>)
 8006e42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e44:	4b1f      	ldr	r3, [pc, #124]	; (8006ec4 <vTaskStartScheduler+0xbc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e001      	b.n	8006e56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d11b      	bne.n	8006e94 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	613b      	str	r3, [r7, #16]
}
 8006e6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e70:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <vTaskStartScheduler+0xc0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	334c      	adds	r3, #76	; 0x4c
 8006e76:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <vTaskStartScheduler+0xc4>)
 8006e78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <vTaskStartScheduler+0xc8>)
 8006e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e82:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <vTaskStartScheduler+0xcc>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e88:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <vTaskStartScheduler+0xd0>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e8e:	f000 fbb7 	bl	8007600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e92:	e00e      	b.n	8006eb2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d10a      	bne.n	8006eb2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <vTaskStartScheduler+0xa8>
}
 8006eb2:	bf00      	nop
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	08007f30 	.word	0x08007f30
 8006ec0:	08007265 	.word	0x08007265
 8006ec4:	24000648 	.word	0x24000648
 8006ec8:	24000524 	.word	0x24000524
 8006ecc:	24000014 	.word	0x24000014
 8006ed0:	24000644 	.word	0x24000644
 8006ed4:	24000630 	.word	0x24000630
 8006ed8:	24000628 	.word	0x24000628

08006edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ee0:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <vTaskSuspendAll+0x18>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	4a03      	ldr	r2, [pc, #12]	; (8006ef4 <vTaskSuspendAll+0x18>)
 8006ee8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eea:	bf00      	nop
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	2400064c 	.word	0x2400064c

08006ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f06:	4b41      	ldr	r3, [pc, #260]	; (800700c <xTaskResumeAll+0x114>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	603b      	str	r3, [r7, #0]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f24:	f000 fc0e 	bl	8007744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f28:	4b38      	ldr	r3, [pc, #224]	; (800700c <xTaskResumeAll+0x114>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	4a37      	ldr	r2, [pc, #220]	; (800700c <xTaskResumeAll+0x114>)
 8006f30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f32:	4b36      	ldr	r3, [pc, #216]	; (800700c <xTaskResumeAll+0x114>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d161      	bne.n	8006ffe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f3a:	4b35      	ldr	r3, [pc, #212]	; (8007010 <xTaskResumeAll+0x118>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d05d      	beq.n	8006ffe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f42:	e02e      	b.n	8006fa2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f44:	4b33      	ldr	r3, [pc, #204]	; (8007014 <xTaskResumeAll+0x11c>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3318      	adds	r3, #24
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fd50 	bl	80069f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fd4b 	bl	80069f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	2201      	movs	r2, #1
 8006f66:	409a      	lsls	r2, r3
 8006f68:	4b2b      	ldr	r3, [pc, #172]	; (8007018 <xTaskResumeAll+0x120>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <xTaskResumeAll+0x120>)
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4a27      	ldr	r2, [pc, #156]	; (800701c <xTaskResumeAll+0x124>)
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7ff fcd7 	bl	800693c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	4b23      	ldr	r3, [pc, #140]	; (8007020 <xTaskResumeAll+0x128>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d302      	bcc.n	8006fa2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f9c:	4b21      	ldr	r3, [pc, #132]	; (8007024 <xTaskResumeAll+0x12c>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <xTaskResumeAll+0x11c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1cc      	bne.n	8006f44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fb0:	f000 fa12 	bl	80073d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fb4:	4b1c      	ldr	r3, [pc, #112]	; (8007028 <xTaskResumeAll+0x130>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d010      	beq.n	8006fe2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fc0:	f000 f836 	bl	8007030 <xTaskIncrementTick>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006fca:	4b16      	ldr	r3, [pc, #88]	; (8007024 <xTaskResumeAll+0x12c>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1f1      	bne.n	8006fc0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <xTaskResumeAll+0x130>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fe2:	4b10      	ldr	r3, [pc, #64]	; (8007024 <xTaskResumeAll+0x12c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fea:	2301      	movs	r3, #1
 8006fec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <xTaskResumeAll+0x134>)
 8006ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ffe:	f000 fbd1 	bl	80077a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007002:	68bb      	ldr	r3, [r7, #8]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	2400064c 	.word	0x2400064c
 8007010:	24000624 	.word	0x24000624
 8007014:	240005e4 	.word	0x240005e4
 8007018:	2400062c 	.word	0x2400062c
 800701c:	24000528 	.word	0x24000528
 8007020:	24000524 	.word	0x24000524
 8007024:	24000638 	.word	0x24000638
 8007028:	24000634 	.word	0x24000634
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703a:	4b4e      	ldr	r3, [pc, #312]	; (8007174 <xTaskIncrementTick+0x144>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 808e 	bne.w	8007160 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007044:	4b4c      	ldr	r3, [pc, #304]	; (8007178 <xTaskIncrementTick+0x148>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800704c:	4a4a      	ldr	r2, [pc, #296]	; (8007178 <xTaskIncrementTick+0x148>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d120      	bne.n	800709a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007058:	4b48      	ldr	r3, [pc, #288]	; (800717c <xTaskIncrementTick+0x14c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <xTaskIncrementTick+0x48>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	603b      	str	r3, [r7, #0]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xTaskIncrementTick+0x46>
 8007078:	4b40      	ldr	r3, [pc, #256]	; (800717c <xTaskIncrementTick+0x14c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	4b40      	ldr	r3, [pc, #256]	; (8007180 <xTaskIncrementTick+0x150>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3e      	ldr	r2, [pc, #248]	; (800717c <xTaskIncrementTick+0x14c>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4a3e      	ldr	r2, [pc, #248]	; (8007180 <xTaskIncrementTick+0x150>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <xTaskIncrementTick+0x154>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a3c      	ldr	r2, [pc, #240]	; (8007184 <xTaskIncrementTick+0x154>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	f000 f99f 	bl	80073d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800709a:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <xTaskIncrementTick+0x158>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d348      	bcc.n	8007136 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a4:	4b35      	ldr	r3, [pc, #212]	; (800717c <xTaskIncrementTick+0x14c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	4b36      	ldr	r3, [pc, #216]	; (8007188 <xTaskIncrementTick+0x158>)
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	601a      	str	r2, [r3, #0]
					break;
 80070b6:	e03e      	b.n	8007136 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b8:	4b30      	ldr	r3, [pc, #192]	; (800717c <xTaskIncrementTick+0x14c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d203      	bcs.n	80070d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070d0:	4a2d      	ldr	r2, [pc, #180]	; (8007188 <xTaskIncrementTick+0x158>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070d6:	e02e      	b.n	8007136 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fc8a 	bl	80069f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff fc81 	bl	80069f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	2201      	movs	r2, #1
 80070fa:	409a      	lsls	r2, r3
 80070fc:	4b23      	ldr	r3, [pc, #140]	; (800718c <xTaskIncrementTick+0x15c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4313      	orrs	r3, r2
 8007102:	4a22      	ldr	r2, [pc, #136]	; (800718c <xTaskIncrementTick+0x15c>)
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4a1f      	ldr	r2, [pc, #124]	; (8007190 <xTaskIncrementTick+0x160>)
 8007114:	441a      	add	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	3304      	adds	r3, #4
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f7ff fc0d 	bl	800693c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007126:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <xTaskIncrementTick+0x164>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	429a      	cmp	r2, r3
 800712e:	d3b9      	bcc.n	80070a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007130:	2301      	movs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007134:	e7b6      	b.n	80070a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007136:	4b17      	ldr	r3, [pc, #92]	; (8007194 <xTaskIncrementTick+0x164>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	4914      	ldr	r1, [pc, #80]	; (8007190 <xTaskIncrementTick+0x160>)
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d901      	bls.n	8007152 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800714e:	2301      	movs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <xTaskIncrementTick+0x168>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800715a:	2301      	movs	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	e004      	b.n	800716a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <xTaskIncrementTick+0x16c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3301      	adds	r3, #1
 8007166:	4a0d      	ldr	r2, [pc, #52]	; (800719c <xTaskIncrementTick+0x16c>)
 8007168:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	2400064c 	.word	0x2400064c
 8007178:	24000628 	.word	0x24000628
 800717c:	240005dc 	.word	0x240005dc
 8007180:	240005e0 	.word	0x240005e0
 8007184:	2400063c 	.word	0x2400063c
 8007188:	24000644 	.word	0x24000644
 800718c:	2400062c 	.word	0x2400062c
 8007190:	24000528 	.word	0x24000528
 8007194:	24000524 	.word	0x24000524
 8007198:	24000638 	.word	0x24000638
 800719c:	24000634 	.word	0x24000634

080071a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071a6:	4b29      	ldr	r3, [pc, #164]	; (800724c <vTaskSwitchContext+0xac>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071ae:	4b28      	ldr	r3, [pc, #160]	; (8007250 <vTaskSwitchContext+0xb0>)
 80071b0:	2201      	movs	r2, #1
 80071b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071b4:	e044      	b.n	8007240 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80071b6:	4b26      	ldr	r3, [pc, #152]	; (8007250 <vTaskSwitchContext+0xb0>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071bc:	4b25      	ldr	r3, [pc, #148]	; (8007254 <vTaskSwitchContext+0xb4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	fab3 f383 	clz	r3, r3
 80071c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	f1c3 031f 	rsb	r3, r3, #31
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	4921      	ldr	r1, [pc, #132]	; (8007258 <vTaskSwitchContext+0xb8>)
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	607b      	str	r3, [r7, #4]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <vTaskSwitchContext+0x5a>
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <vTaskSwitchContext+0xb8>)
 8007208:	4413      	add	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	3308      	adds	r3, #8
 800721e:	429a      	cmp	r2, r3
 8007220:	d104      	bne.n	800722c <vTaskSwitchContext+0x8c>
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	605a      	str	r2, [r3, #4]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	4a0a      	ldr	r2, [pc, #40]	; (800725c <vTaskSwitchContext+0xbc>)
 8007234:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <vTaskSwitchContext+0xbc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	334c      	adds	r3, #76	; 0x4c
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <vTaskSwitchContext+0xc0>)
 800723e:	6013      	str	r3, [r2, #0]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2400064c 	.word	0x2400064c
 8007250:	24000638 	.word	0x24000638
 8007254:	2400062c 	.word	0x2400062c
 8007258:	24000528 	.word	0x24000528
 800725c:	24000524 	.word	0x24000524
 8007260:	24000014 	.word	0x24000014

08007264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800726c:	f000 f852 	bl	8007314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <prvIdleTask+0x28>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d9f9      	bls.n	800726c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <prvIdleTask+0x2c>)
 800727a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007288:	e7f0      	b.n	800726c <prvIdleTask+0x8>
 800728a:	bf00      	nop
 800728c:	24000528 	.word	0x24000528
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e00c      	b.n	80072ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <prvInitialiseTaskLists+0x60>)
 80072ac:	4413      	add	r3, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fb17 	bl	80068e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3301      	adds	r3, #1
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d9ef      	bls.n	80072a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072c0:	480d      	ldr	r0, [pc, #52]	; (80072f8 <prvInitialiseTaskLists+0x64>)
 80072c2:	f7ff fb0e 	bl	80068e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072c6:	480d      	ldr	r0, [pc, #52]	; (80072fc <prvInitialiseTaskLists+0x68>)
 80072c8:	f7ff fb0b 	bl	80068e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072cc:	480c      	ldr	r0, [pc, #48]	; (8007300 <prvInitialiseTaskLists+0x6c>)
 80072ce:	f7ff fb08 	bl	80068e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072d2:	480c      	ldr	r0, [pc, #48]	; (8007304 <prvInitialiseTaskLists+0x70>)
 80072d4:	f7ff fb05 	bl	80068e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072d8:	480b      	ldr	r0, [pc, #44]	; (8007308 <prvInitialiseTaskLists+0x74>)
 80072da:	f7ff fb02 	bl	80068e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <prvInitialiseTaskLists+0x78>)
 80072e0:	4a05      	ldr	r2, [pc, #20]	; (80072f8 <prvInitialiseTaskLists+0x64>)
 80072e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <prvInitialiseTaskLists+0x7c>)
 80072e6:	4a05      	ldr	r2, [pc, #20]	; (80072fc <prvInitialiseTaskLists+0x68>)
 80072e8:	601a      	str	r2, [r3, #0]
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	24000528 	.word	0x24000528
 80072f8:	240005b4 	.word	0x240005b4
 80072fc:	240005c8 	.word	0x240005c8
 8007300:	240005e4 	.word	0x240005e4
 8007304:	240005f8 	.word	0x240005f8
 8007308:	24000610 	.word	0x24000610
 800730c:	240005dc 	.word	0x240005dc
 8007310:	240005e0 	.word	0x240005e0

08007314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800731a:	e019      	b.n	8007350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800731c:	f000 fa12 	bl	8007744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007320:	4b10      	ldr	r3, [pc, #64]	; (8007364 <prvCheckTasksWaitingTermination+0x50>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fb62 	bl	80069f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007332:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3b01      	subs	r3, #1
 8007338:	4a0b      	ldr	r2, [pc, #44]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 800733a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <prvCheckTasksWaitingTermination+0x58>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3b01      	subs	r3, #1
 8007342:	4a0a      	ldr	r2, [pc, #40]	; (800736c <prvCheckTasksWaitingTermination+0x58>)
 8007344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007346:	f000 fa2d 	bl	80077a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f810 	bl	8007370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007350:	4b06      	ldr	r3, [pc, #24]	; (800736c <prvCheckTasksWaitingTermination+0x58>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e1      	bne.n	800731c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	240005f8 	.word	0x240005f8
 8007368:	24000624 	.word	0x24000624
 800736c:	2400060c 	.word	0x2400060c

08007370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	334c      	adds	r3, #76	; 0x4c
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fd35 	bl	8007dec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d108      	bne.n	800739e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fb85 	bl	8007aa0 <vPortFree>
				vPortFree( pxTCB );
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fb82 	bl	8007aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800739c:	e018      	b.n	80073d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d103      	bne.n	80073b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fb79 	bl	8007aa0 <vPortFree>
	}
 80073ae:	e00f      	b.n	80073d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d00a      	beq.n	80073d0 <prvDeleteTCB+0x60>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60fb      	str	r3, [r7, #12]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <prvDeleteTCB+0x5e>
	}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073de:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <prvResetNextTaskUnblockTime+0x38>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <prvResetNextTaskUnblockTime+0x3c>)
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295
 80073ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073f0:	e008      	b.n	8007404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f2:	4b07      	ldr	r3, [pc, #28]	; (8007410 <prvResetNextTaskUnblockTime+0x38>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4a04      	ldr	r2, [pc, #16]	; (8007414 <prvResetNextTaskUnblockTime+0x3c>)
 8007402:	6013      	str	r3, [r2, #0]
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	240005dc 	.word	0x240005dc
 8007414:	24000644 	.word	0x24000644

08007418 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007422:	4b29      	ldr	r3, [pc, #164]	; (80074c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007428:	4b28      	ldr	r3, [pc, #160]	; (80074cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3304      	adds	r3, #4
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fae1 	bl	80069f6 <uxListRemove>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800743a:	4b24      	ldr	r3, [pc, #144]	; (80074cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	2201      	movs	r2, #1
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43da      	mvns	r2, r3
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4013      	ands	r3, r2
 800744e:	4a20      	ldr	r2, [pc, #128]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d10a      	bne.n	8007470 <prvAddCurrentTaskToDelayedList+0x58>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007460:	4b1a      	ldr	r3, [pc, #104]	; (80074cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3304      	adds	r3, #4
 8007466:	4619      	mov	r1, r3
 8007468:	481a      	ldr	r0, [pc, #104]	; (80074d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800746a:	f7ff fa67 	bl	800693c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800746e:	e026      	b.n	80074be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007478:	4b14      	ldr	r3, [pc, #80]	; (80074cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	429a      	cmp	r2, r3
 8007486:	d209      	bcs.n	800749c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007488:	4b13      	ldr	r3, [pc, #76]	; (80074d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3304      	adds	r3, #4
 8007492:	4619      	mov	r1, r3
 8007494:	4610      	mov	r0, r2
 8007496:	f7ff fa75 	bl	8006984 <vListInsert>
}
 800749a:	e010      	b.n	80074be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800749c:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7ff fa6b 	bl	8006984 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d202      	bcs.n	80074be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074b8:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6013      	str	r3, [r2, #0]
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	24000628 	.word	0x24000628
 80074cc:	24000524 	.word	0x24000524
 80074d0:	2400062c 	.word	0x2400062c
 80074d4:	24000610 	.word	0x24000610
 80074d8:	240005e0 	.word	0x240005e0
 80074dc:	240005dc 	.word	0x240005dc
 80074e0:	24000644 	.word	0x24000644

080074e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3b04      	subs	r3, #4
 80074f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3b04      	subs	r3, #4
 8007502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f023 0201 	bic.w	r2, r3, #1
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3b04      	subs	r3, #4
 8007512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007514:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <pxPortInitialiseStack+0x64>)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3b14      	subs	r3, #20
 800751e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3b04      	subs	r3, #4
 800752a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f06f 0202 	mvn.w	r2, #2
 8007532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3b20      	subs	r3, #32
 8007538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	0800754d 	.word	0x0800754d

0800754c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007556:	4b12      	ldr	r3, [pc, #72]	; (80075a0 <prvTaskExitError+0x54>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d00a      	beq.n	8007576 <prvTaskExitError+0x2a>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <prvTaskExitError+0x28>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60bb      	str	r3, [r7, #8]
}
 8007588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800758a:	bf00      	nop
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0fc      	beq.n	800758c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	24000010 	.word	0x24000010
	...

080075b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <pxCurrentTCBConst2>)
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	6808      	ldr	r0, [r1, #0]
 80075b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	f380 8809 	msr	PSP, r0
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f380 8811 	msr	BASEPRI, r0
 80075ca:	4770      	bx	lr
 80075cc:	f3af 8000 	nop.w

080075d0 <pxCurrentTCBConst2>:
 80075d0:	24000524 	.word	0x24000524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075d8:	4808      	ldr	r0, [pc, #32]	; (80075fc <prvPortStartFirstTask+0x24>)
 80075da:	6800      	ldr	r0, [r0, #0]
 80075dc:	6800      	ldr	r0, [r0, #0]
 80075de:	f380 8808 	msr	MSP, r0
 80075e2:	f04f 0000 	mov.w	r0, #0
 80075e6:	f380 8814 	msr	CONTROL, r0
 80075ea:	b662      	cpsie	i
 80075ec:	b661      	cpsie	f
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	df00      	svc	0
 80075f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075fa:	bf00      	nop
 80075fc:	e000ed08 	.word	0xe000ed08

08007600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007606:	4b46      	ldr	r3, [pc, #280]	; (8007720 <xPortStartScheduler+0x120>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a46      	ldr	r2, [pc, #280]	; (8007724 <xPortStartScheduler+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d10a      	bne.n	8007626 <xPortStartScheduler+0x26>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	613b      	str	r3, [r7, #16]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007626:	4b3e      	ldr	r3, [pc, #248]	; (8007720 <xPortStartScheduler+0x120>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a3f      	ldr	r2, [pc, #252]	; (8007728 <xPortStartScheduler+0x128>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d10a      	bne.n	8007646 <xPortStartScheduler+0x46>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007646:	4b39      	ldr	r3, [pc, #228]	; (800772c <xPortStartScheduler+0x12c>)
 8007648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	22ff      	movs	r2, #255	; 0xff
 8007656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007668:	b2da      	uxtb	r2, r3
 800766a:	4b31      	ldr	r3, [pc, #196]	; (8007730 <xPortStartScheduler+0x130>)
 800766c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800766e:	4b31      	ldr	r3, [pc, #196]	; (8007734 <xPortStartScheduler+0x134>)
 8007670:	2207      	movs	r2, #7
 8007672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007674:	e009      	b.n	800768a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007676:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <xPortStartScheduler+0x134>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3b01      	subs	r3, #1
 800767c:	4a2d      	ldr	r2, [pc, #180]	; (8007734 <xPortStartScheduler+0x134>)
 800767e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d0ef      	beq.n	8007676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007696:	4b27      	ldr	r3, [pc, #156]	; (8007734 <xPortStartScheduler+0x134>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f1c3 0307 	rsb	r3, r3, #7
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d00a      	beq.n	80076b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60bb      	str	r3, [r7, #8]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076b8:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <xPortStartScheduler+0x134>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <xPortStartScheduler+0x134>)
 80076c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076c2:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <xPortStartScheduler+0x134>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ca:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <xPortStartScheduler+0x134>)
 80076cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <xPortStartScheduler+0x138>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a17      	ldr	r2, [pc, #92]	; (8007738 <xPortStartScheduler+0x138>)
 80076dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <xPortStartScheduler+0x138>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a14      	ldr	r2, [pc, #80]	; (8007738 <xPortStartScheduler+0x138>)
 80076e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076ee:	f000 f8dd 	bl	80078ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <xPortStartScheduler+0x13c>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076f8:	f000 f8fc 	bl	80078f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <xPortStartScheduler+0x140>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0f      	ldr	r2, [pc, #60]	; (8007740 <xPortStartScheduler+0x140>)
 8007702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007708:	f7ff ff66 	bl	80075d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800770c:	f7ff fd48 	bl	80071a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007710:	f7ff ff1c 	bl	800754c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	e000ed00 	.word	0xe000ed00
 8007724:	410fc271 	.word	0x410fc271
 8007728:	410fc270 	.word	0x410fc270
 800772c:	e000e400 	.word	0xe000e400
 8007730:	24000650 	.word	0x24000650
 8007734:	24000654 	.word	0x24000654
 8007738:	e000ed20 	.word	0xe000ed20
 800773c:	24000010 	.word	0x24000010
 8007740:	e000ef34 	.word	0xe000ef34

08007744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	607b      	str	r3, [r7, #4]
}
 800775c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <vPortEnterCritical+0x58>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	4a0d      	ldr	r2, [pc, #52]	; (800779c <vPortEnterCritical+0x58>)
 8007766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <vPortEnterCritical+0x58>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10f      	bne.n	8007790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <vPortEnterCritical+0x5c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <vPortEnterCritical+0x4c>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	603b      	str	r3, [r7, #0]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <vPortEnterCritical+0x4a>
	}
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	24000010 	.word	0x24000010
 80077a0:	e000ed04 	.word	0xe000ed04

080077a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <vPortExitCritical+0x50>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <vPortExitCritical+0x24>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	607b      	str	r3, [r7, #4]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <vPortExitCritical+0x50>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <vPortExitCritical+0x50>)
 80077d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077d2:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <vPortExitCritical+0x50>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <vPortExitCritical+0x42>
 80077da:	2300      	movs	r3, #0
 80077dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	24000010 	.word	0x24000010
	...

08007800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007800:	f3ef 8009 	mrs	r0, PSP
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <pxCurrentTCBConst>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	f01e 0f10 	tst.w	lr, #16
 8007810:	bf08      	it	eq
 8007812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007824:	f380 8811 	msr	BASEPRI, r0
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f7ff fcb6 	bl	80071a0 <vTaskSwitchContext>
 8007834:	f04f 0000 	mov.w	r0, #0
 8007838:	f380 8811 	msr	BASEPRI, r0
 800783c:	bc09      	pop	{r0, r3}
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	6808      	ldr	r0, [r1, #0]
 8007842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007846:	f01e 0f10 	tst.w	lr, #16
 800784a:	bf08      	it	eq
 800784c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007850:	f380 8809 	msr	PSP, r0
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst>:
 8007860:	24000524 	.word	0x24000524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
}
 8007880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007882:	f7ff fbd5 	bl	8007030 <xTaskIncrementTick>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <SysTick_Handler+0x40>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	2300      	movs	r3, #0
 8007896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f383 8811 	msr	BASEPRI, r3
}
 800789e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <vPortSetupTimerInterrupt+0x34>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <vPortSetupTimerInterrupt+0x38>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <vPortSetupTimerInterrupt+0x3c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <vPortSetupTimerInterrupt+0x40>)
 80078c2:	fba2 2303 	umull	r2, r3, r2, r3
 80078c6:	099b      	lsrs	r3, r3, #6
 80078c8:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <vPortSetupTimerInterrupt+0x44>)
 80078ca:	3b01      	subs	r3, #1
 80078cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ce:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <vPortSetupTimerInterrupt+0x34>)
 80078d0:	2207      	movs	r2, #7
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	e000e010 	.word	0xe000e010
 80078e4:	e000e018 	.word	0xe000e018
 80078e8:	24000000 	.word	0x24000000
 80078ec:	10624dd3 	.word	0x10624dd3
 80078f0:	e000e014 	.word	0xe000e014

080078f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007904 <vPortEnableVFP+0x10>
 80078f8:	6801      	ldr	r1, [r0, #0]
 80078fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078fe:	6001      	str	r1, [r0, #0]
 8007900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007902:	bf00      	nop
 8007904:	e000ed88 	.word	0xe000ed88

08007908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007914:	f7ff fae2 	bl	8006edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007918:	4b5b      	ldr	r3, [pc, #364]	; (8007a88 <pvPortMalloc+0x180>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007920:	f000 f920 	bl	8007b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007924:	4b59      	ldr	r3, [pc, #356]	; (8007a8c <pvPortMalloc+0x184>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8093 	bne.w	8007a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01d      	beq.n	8007974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007938:	2208      	movs	r2, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b00      	cmp	r3, #0
 8007948:	d014      	beq.n	8007974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	3308      	adds	r3, #8
 8007952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <pvPortMalloc+0x6c>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	617b      	str	r3, [r7, #20]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d06e      	beq.n	8007a58 <pvPortMalloc+0x150>
 800797a:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <pvPortMalloc+0x188>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d869      	bhi.n	8007a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007984:	4b43      	ldr	r3, [pc, #268]	; (8007a94 <pvPortMalloc+0x18c>)
 8007986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007988:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <pvPortMalloc+0x18c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800798e:	e004      	b.n	800799a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d903      	bls.n	80079ac <pvPortMalloc+0xa4>
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f1      	bne.n	8007990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079ac:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <pvPortMalloc+0x180>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d050      	beq.n	8007a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2208      	movs	r2, #8
 80079bc:	4413      	add	r3, r2
 80079be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	2308      	movs	r3, #8
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d91f      	bls.n	8007a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <pvPortMalloc+0xf8>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	613b      	str	r3, [r7, #16]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a12:	69b8      	ldr	r0, [r7, #24]
 8007a14:	f000 f908 	bl	8007c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a18:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <pvPortMalloc+0x188>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <pvPortMalloc+0x188>)
 8007a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a26:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <pvPortMalloc+0x188>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <pvPortMalloc+0x190>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d203      	bcs.n	8007a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a32:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <pvPortMalloc+0x188>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <pvPortMalloc+0x190>)
 8007a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <pvPortMalloc+0x184>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <pvPortMalloc+0x194>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <pvPortMalloc+0x194>)
 8007a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a58:	f7ff fa4e 	bl	8006ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <pvPortMalloc+0x174>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	60fb      	str	r3, [r7, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <pvPortMalloc+0x172>
	return pvReturn;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3728      	adds	r7, #40	; 0x28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	24004260 	.word	0x24004260
 8007a8c:	24004274 	.word	0x24004274
 8007a90:	24004264 	.word	0x24004264
 8007a94:	24004258 	.word	0x24004258
 8007a98:	24004268 	.word	0x24004268
 8007a9c:	2400426c 	.word	0x2400426c

08007aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d04d      	beq.n	8007b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <vPortFree+0xb8>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <vPortFree+0x44>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	60fb      	str	r3, [r7, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <vPortFree+0x62>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60bb      	str	r3, [r7, #8]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <vPortFree+0xb8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01e      	beq.n	8007b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d11a      	bne.n	8007b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <vPortFree+0xb8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	401a      	ands	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b28:	f7ff f9d8 	bl	8006edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vPortFree+0xbc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4413      	add	r3, r2
 8007b36:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <vPortFree+0xbc>)
 8007b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b3a:	6938      	ldr	r0, [r7, #16]
 8007b3c:	f000 f874 	bl	8007c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <vPortFree+0xc0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a06      	ldr	r2, [pc, #24]	; (8007b60 <vPortFree+0xc0>)
 8007b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b4a:	f7ff f9d5 	bl	8006ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b4e:	bf00      	nop
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	24004274 	.word	0x24004274
 8007b5c:	24004264 	.word	0x24004264
 8007b60:	24004270 	.word	0x24004270

08007b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <prvHeapInit+0xac>)
 8007b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3307      	adds	r3, #7
 8007b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvHeapInit+0xac>)
 8007b94:	4413      	add	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <prvHeapInit+0xb0>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ba2:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <prvHeapInit+0xb0>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0307 	bic.w	r3, r3, #7
 8007bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <prvHeapInit+0xb4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <prvHeapInit+0xb4>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <prvHeapInit+0xb8>)
 8007bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <prvHeapInit+0xbc>)
 8007bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <prvHeapInit+0xc0>)
 8007bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	24000658 	.word	0x24000658
 8007c14:	24004258 	.word	0x24004258
 8007c18:	24004260 	.word	0x24004260
 8007c1c:	24004268 	.word	0x24004268
 8007c20:	24004264 	.word	0x24004264
 8007c24:	24004274 	.word	0x24004274

08007c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c30:	4b28      	ldr	r3, [pc, #160]	; (8007cd4 <prvInsertBlockIntoFreeList+0xac>)
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e002      	b.n	8007c3c <prvInsertBlockIntoFreeList+0x14>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d8f7      	bhi.n	8007c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	4413      	add	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d108      	bne.n	8007c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	441a      	add	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	441a      	add	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d118      	bne.n	8007cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d00d      	beq.n	8007ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	441a      	add	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e008      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e003      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d002      	beq.n	8007cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	24004258 	.word	0x24004258
 8007cd8:	24004260 	.word	0x24004260

08007cdc <__libc_init_array>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	4d0d      	ldr	r5, [pc, #52]	; (8007d14 <__libc_init_array+0x38>)
 8007ce0:	4c0d      	ldr	r4, [pc, #52]	; (8007d18 <__libc_init_array+0x3c>)
 8007ce2:	1b64      	subs	r4, r4, r5
 8007ce4:	10a4      	asrs	r4, r4, #2
 8007ce6:	2600      	movs	r6, #0
 8007ce8:	42a6      	cmp	r6, r4
 8007cea:	d109      	bne.n	8007d00 <__libc_init_array+0x24>
 8007cec:	4d0b      	ldr	r5, [pc, #44]	; (8007d1c <__libc_init_array+0x40>)
 8007cee:	4c0c      	ldr	r4, [pc, #48]	; (8007d20 <__libc_init_array+0x44>)
 8007cf0:	f000 f8e4 	bl	8007ebc <_init>
 8007cf4:	1b64      	subs	r4, r4, r5
 8007cf6:	10a4      	asrs	r4, r4, #2
 8007cf8:	2600      	movs	r6, #0
 8007cfa:	42a6      	cmp	r6, r4
 8007cfc:	d105      	bne.n	8007d0a <__libc_init_array+0x2e>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d04:	4798      	blx	r3
 8007d06:	3601      	adds	r6, #1
 8007d08:	e7ee      	b.n	8007ce8 <__libc_init_array+0xc>
 8007d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0e:	4798      	blx	r3
 8007d10:	3601      	adds	r6, #1
 8007d12:	e7f2      	b.n	8007cfa <__libc_init_array+0x1e>
 8007d14:	08007fd8 	.word	0x08007fd8
 8007d18:	08007fd8 	.word	0x08007fd8
 8007d1c:	08007fd8 	.word	0x08007fd8
 8007d20:	08007fdc 	.word	0x08007fdc

08007d24 <__retarget_lock_acquire_recursive>:
 8007d24:	4770      	bx	lr

08007d26 <__retarget_lock_release_recursive>:
 8007d26:	4770      	bx	lr

08007d28 <memset>:
 8007d28:	4402      	add	r2, r0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d100      	bne.n	8007d32 <memset+0xa>
 8007d30:	4770      	bx	lr
 8007d32:	f803 1b01 	strb.w	r1, [r3], #1
 8007d36:	e7f9      	b.n	8007d2c <memset+0x4>

08007d38 <_free_r>:
 8007d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d3a:	2900      	cmp	r1, #0
 8007d3c:	d044      	beq.n	8007dc8 <_free_r+0x90>
 8007d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d42:	9001      	str	r0, [sp, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f1a1 0404 	sub.w	r4, r1, #4
 8007d4a:	bfb8      	it	lt
 8007d4c:	18e4      	addlt	r4, r4, r3
 8007d4e:	f000 f8a9 	bl	8007ea4 <__malloc_lock>
 8007d52:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <_free_r+0x94>)
 8007d54:	9801      	ldr	r0, [sp, #4]
 8007d56:	6813      	ldr	r3, [r2, #0]
 8007d58:	b933      	cbnz	r3, 8007d68 <_free_r+0x30>
 8007d5a:	6063      	str	r3, [r4, #4]
 8007d5c:	6014      	str	r4, [r2, #0]
 8007d5e:	b003      	add	sp, #12
 8007d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d64:	f000 b8a4 	b.w	8007eb0 <__malloc_unlock>
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	d908      	bls.n	8007d7e <_free_r+0x46>
 8007d6c:	6825      	ldr	r5, [r4, #0]
 8007d6e:	1961      	adds	r1, r4, r5
 8007d70:	428b      	cmp	r3, r1
 8007d72:	bf01      	itttt	eq
 8007d74:	6819      	ldreq	r1, [r3, #0]
 8007d76:	685b      	ldreq	r3, [r3, #4]
 8007d78:	1949      	addeq	r1, r1, r5
 8007d7a:	6021      	streq	r1, [r4, #0]
 8007d7c:	e7ed      	b.n	8007d5a <_free_r+0x22>
 8007d7e:	461a      	mov	r2, r3
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	b10b      	cbz	r3, 8007d88 <_free_r+0x50>
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	d9fa      	bls.n	8007d7e <_free_r+0x46>
 8007d88:	6811      	ldr	r1, [r2, #0]
 8007d8a:	1855      	adds	r5, r2, r1
 8007d8c:	42a5      	cmp	r5, r4
 8007d8e:	d10b      	bne.n	8007da8 <_free_r+0x70>
 8007d90:	6824      	ldr	r4, [r4, #0]
 8007d92:	4421      	add	r1, r4
 8007d94:	1854      	adds	r4, r2, r1
 8007d96:	42a3      	cmp	r3, r4
 8007d98:	6011      	str	r1, [r2, #0]
 8007d9a:	d1e0      	bne.n	8007d5e <_free_r+0x26>
 8007d9c:	681c      	ldr	r4, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	6053      	str	r3, [r2, #4]
 8007da2:	4421      	add	r1, r4
 8007da4:	6011      	str	r1, [r2, #0]
 8007da6:	e7da      	b.n	8007d5e <_free_r+0x26>
 8007da8:	d902      	bls.n	8007db0 <_free_r+0x78>
 8007daa:	230c      	movs	r3, #12
 8007dac:	6003      	str	r3, [r0, #0]
 8007dae:	e7d6      	b.n	8007d5e <_free_r+0x26>
 8007db0:	6825      	ldr	r5, [r4, #0]
 8007db2:	1961      	adds	r1, r4, r5
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf04      	itt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	6063      	str	r3, [r4, #4]
 8007dbe:	bf04      	itt	eq
 8007dc0:	1949      	addeq	r1, r1, r5
 8007dc2:	6021      	streq	r1, [r4, #0]
 8007dc4:	6054      	str	r4, [r2, #4]
 8007dc6:	e7ca      	b.n	8007d5e <_free_r+0x26>
 8007dc8:	b003      	add	sp, #12
 8007dca:	bd30      	pop	{r4, r5, pc}
 8007dcc:	2400427c 	.word	0x2400427c

08007dd0 <cleanup_glue>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	6809      	ldr	r1, [r1, #0]
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	b109      	cbz	r1, 8007dde <cleanup_glue+0xe>
 8007dda:	f7ff fff9 	bl	8007dd0 <cleanup_glue>
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de6:	f7ff bfa7 	b.w	8007d38 <_free_r>
	...

08007dec <_reclaim_reent>:
 8007dec:	4b2c      	ldr	r3, [pc, #176]	; (8007ea0 <_reclaim_reent+0xb4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4283      	cmp	r3, r0
 8007df2:	b570      	push	{r4, r5, r6, lr}
 8007df4:	4604      	mov	r4, r0
 8007df6:	d051      	beq.n	8007e9c <_reclaim_reent+0xb0>
 8007df8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007dfa:	b143      	cbz	r3, 8007e0e <_reclaim_reent+0x22>
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d14a      	bne.n	8007e98 <_reclaim_reent+0xac>
 8007e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e04:	6819      	ldr	r1, [r3, #0]
 8007e06:	b111      	cbz	r1, 8007e0e <_reclaim_reent+0x22>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7ff ff95 	bl	8007d38 <_free_r>
 8007e0e:	6961      	ldr	r1, [r4, #20]
 8007e10:	b111      	cbz	r1, 8007e18 <_reclaim_reent+0x2c>
 8007e12:	4620      	mov	r0, r4
 8007e14:	f7ff ff90 	bl	8007d38 <_free_r>
 8007e18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e1a:	b111      	cbz	r1, 8007e22 <_reclaim_reent+0x36>
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f7ff ff8b 	bl	8007d38 <_free_r>
 8007e22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e24:	b111      	cbz	r1, 8007e2c <_reclaim_reent+0x40>
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7ff ff86 	bl	8007d38 <_free_r>
 8007e2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e2e:	b111      	cbz	r1, 8007e36 <_reclaim_reent+0x4a>
 8007e30:	4620      	mov	r0, r4
 8007e32:	f7ff ff81 	bl	8007d38 <_free_r>
 8007e36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e38:	b111      	cbz	r1, 8007e40 <_reclaim_reent+0x54>
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff ff7c 	bl	8007d38 <_free_r>
 8007e40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e42:	b111      	cbz	r1, 8007e4a <_reclaim_reent+0x5e>
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff ff77 	bl	8007d38 <_free_r>
 8007e4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e4c:	b111      	cbz	r1, 8007e54 <_reclaim_reent+0x68>
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f7ff ff72 	bl	8007d38 <_free_r>
 8007e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e56:	b111      	cbz	r1, 8007e5e <_reclaim_reent+0x72>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7ff ff6d 	bl	8007d38 <_free_r>
 8007e5e:	69a3      	ldr	r3, [r4, #24]
 8007e60:	b1e3      	cbz	r3, 8007e9c <_reclaim_reent+0xb0>
 8007e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e64:	4620      	mov	r0, r4
 8007e66:	4798      	blx	r3
 8007e68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e6a:	b1b9      	cbz	r1, 8007e9c <_reclaim_reent+0xb0>
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e72:	f7ff bfad 	b.w	8007dd0 <cleanup_glue>
 8007e76:	5949      	ldr	r1, [r1, r5]
 8007e78:	b941      	cbnz	r1, 8007e8c <_reclaim_reent+0xa0>
 8007e7a:	3504      	adds	r5, #4
 8007e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e7e:	2d80      	cmp	r5, #128	; 0x80
 8007e80:	68d9      	ldr	r1, [r3, #12]
 8007e82:	d1f8      	bne.n	8007e76 <_reclaim_reent+0x8a>
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7ff ff57 	bl	8007d38 <_free_r>
 8007e8a:	e7ba      	b.n	8007e02 <_reclaim_reent+0x16>
 8007e8c:	680e      	ldr	r6, [r1, #0]
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f7ff ff52 	bl	8007d38 <_free_r>
 8007e94:	4631      	mov	r1, r6
 8007e96:	e7ef      	b.n	8007e78 <_reclaim_reent+0x8c>
 8007e98:	2500      	movs	r5, #0
 8007e9a:	e7ef      	b.n	8007e7c <_reclaim_reent+0x90>
 8007e9c:	bd70      	pop	{r4, r5, r6, pc}
 8007e9e:	bf00      	nop
 8007ea0:	24000014 	.word	0x24000014

08007ea4 <__malloc_lock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__malloc_lock+0x8>)
 8007ea6:	f7ff bf3d 	b.w	8007d24 <__retarget_lock_acquire_recursive>
 8007eaa:	bf00      	nop
 8007eac:	24004278 	.word	0x24004278

08007eb0 <__malloc_unlock>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__malloc_unlock+0x8>)
 8007eb2:	f7ff bf38 	b.w	8007d26 <__retarget_lock_release_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	24004278 	.word	0x24004278

08007ebc <_init>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	bf00      	nop
 8007ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec2:	bc08      	pop	{r3}
 8007ec4:	469e      	mov	lr, r3
 8007ec6:	4770      	bx	lr

08007ec8 <_fini>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	bf00      	nop
 8007ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ece:	bc08      	pop	{r3}
 8007ed0:	469e      	mov	lr, r3
 8007ed2:	4770      	bx	lr
