/*
 * BMP388.c
 *
 *  Leandro Sanchez
 */


#include "BMP388.h"
#include <math.h>

void fill_calibration_params(struct BMP388_calib_data *calib_data, uint8_t *buffer) {
    // Implementation of fill_calibration_params...
}

void set_coeff(struct BMP388_data *data, BMP388_calib *calib_data) {
    // Implementation of set_coeff...
}

float get_temp_compensated(struct BMP388_sensor *sensor) {
    // Implementation of get_temp_compensated...
}

float get_pressure_compensated(struct BMP388_sensor *sensor) {
    // Implementation of get_pressure_compensated...
}

void calibrate_sensor(struct BMP388_sensor *sensor) {
    // Implementation of calibrate_sensor...
}

void configure_sensor(struct BMP388_sensor *sensor) {
    // Implementation of configure_sensor...
}

BMP388_sensor *BMP388_sensor_create() {
    BMP388_sensor *sensor = (BMP388_sensor *)malloc(sizeof(BMP388_sensor));
    if (sensor) {
        sensor->raw_calib.fill_calibration_params = fill_calibration_params;
        sensor->data.set_coeff = set_coeff;
        sensor->get_temp_compensated = get_temp_compensated;
        sensor->get_pressure_compensated = get_pressure_compensated;
        sensor->calibrate_sensor = calibrate_sensor;
        sensor->configure_sensor = configure_sensor;
    }
    return sensor;
}
